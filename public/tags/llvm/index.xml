<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>LLVM on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/llvm/</link>
        <description>Recent content in LLVM on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Wed, 06 Aug 2025 10:56:03 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/llvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>检测不良OpenSSL使用模式 - Anselm工具深度解析</title>
        <link>http://localhost:1313/p/%E6%A3%80%E6%B5%8B%E4%B8%8D%E8%89%AFopenssl%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F-anselm%E5%B7%A5%E5%85%B7%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Wed, 06 Aug 2025 10:56:03 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%A3%80%E6%B5%8B%E4%B8%8D%E8%89%AFopenssl%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F-anselm%E5%B7%A5%E5%85%B7%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;检测不良openssl使用模式&#34;&gt;检测不良OpenSSL使用模式
&lt;/h1&gt;&lt;p&gt;OpenSSL是最流行的密码学库之一，即便您不使用C/C++，您所用编程语言的核心库很可能也包含OpenSSL绑定。由于其底层API的设计特点，这个库极易被误用。幸运的是，许多错误都遵循可识别的模式，这为自动化检测提供了可能。&lt;/p&gt;
&lt;p&gt;在冬季和春季的实习期间，我开发了名为Anselm的工具原型。这是一个LLVM编译中间层分析工具，能够识别开发者定义的不良行为模式。与静态分析相比，Anselm的优势在于它能处理任何可编译为LLVM字节码的语言，或任何可逆向为机器码的闭源代码。&lt;/p&gt;
&lt;h2 id=&#34;openssl的挑战&#34;&gt;OpenSSL的挑战
&lt;/h2&gt;&lt;p&gt;OpenSSL的设计对初学者极不友好：其库中存在不一致的命名规范，为每个加密原语提供过多选项和模式。例如同时存在高级(EVP)和低级方法来完成相同任务（如DSA签名或EC签名操作）。更糟的是，其文档也常常不一致且难以理解。&lt;/p&gt;
&lt;p&gt;该API的危险性还体现在：不一致地返回错误码、指针（含所有权和不含所有权）以及其他意外行为。若不严格检查错误码或防范空指针，就会导致程序异常终止。&lt;/p&gt;
&lt;h2 id=&#34;函数调用分析&#34;&gt;函数调用分析
&lt;/h2&gt;&lt;p&gt;Anselm的核心方法是遍历函数中所有可能的执行路径，寻找不良的API调用序列。以对称加密函数为例，&lt;code&gt;EVP_EncryptUpdate&lt;/code&gt;（加密数据块）和&lt;code&gt;EVP_EncryptFinal_ex&lt;/code&gt;（最终加密前填充明文）不应乱序调用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;EVP_EncryptFinal_ex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;EVP_EncryptUpdate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ciphertext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plaintext_len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;工具使用LLVM BasicBlocks（代表一组总是顺序执行的指令）构建函数调用图，通过带限制的深度优先搜索(DFS)来发现所有可能的执行路径。为提升性能，会先剪除不含相关API调用的BasicBlock，这能显著降低图复杂度。&lt;/p&gt;
&lt;h2 id=&#34;值匹配技术&#34;&gt;值匹配技术
&lt;/h2&gt;&lt;p&gt;仅检查函数调用还不够。考虑OpenSSL上下文的使用场景：通过&lt;code&gt;EVP_CIPHER_CTX_new&lt;/code&gt;创建后，必须用算法、密钥等初始化才能使用。Anselm通过匹配LLVM Value对象来实现精确检测：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;EVP_CIPHER_CTX_new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;EVP_CIPHER_CTX_new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ctx2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;EVP_EncryptInit_ex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;EVP_aes_256_cbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// ctx2未被初始化
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该技术同样可检测重复初始化向量(IV)的使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;EVP_EncryptInit_ex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;EVP_aes_256_cbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;EVP_EncryptInit_ex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ctx2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;EVP_aes_256_cbc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 重复使用iv
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;模式定义语法&#34;&gt;模式定义语法
&lt;/h2&gt;&lt;p&gt;我开发了专门的模式定义语言，开发者可通过正则表达式风格的语法指定不良行为模式。例如禁止重复IV的规则：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EVP_EncryptInit_ex _ _ _ _ _ iv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EVP_EncryptInit_ex _ _ _ _ _ iv
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;还支持否定前瞻语法，例如要求上下文必须初始化后才能使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EVP_CIPHER_CTX_new ctx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;! EVP_EncryptInit_ex _ ctx _ _ _ _
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EVP_EncryptUpdate _ ctx _ _ _ _
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;Anselm当前已能解析广泛的函数调用模式并在LLVM字节码中搜索它们。虽然仍是原型，但核心思路已经验证可行。感谢Trail of Bits支持这类实习项目——整个过程充满乐趣！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>McSema提升代码中的死存储消除优化技术详解</title>
        <link>http://localhost:1313/p/mcsema%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E6%AD%BB%E5%AD%98%E5%82%A8%E6%B6%88%E9%99%A4%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Wed, 06 Aug 2025 03:18:13 +0800</pubDate>
        
        <guid>http://localhost:1313/p/mcsema%E6%8F%90%E5%8D%87%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84%E6%AD%BB%E5%AD%98%E5%82%A8%E6%B6%88%E9%99%A4%E4%BC%98%E5%8C%96%E6%8A%80%E6%9C%AF%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;h1 id=&#34;提升代码中的死存储消除优化&#34;&gt;提升代码中的死存储消除优化
&lt;/h1&gt;&lt;p&gt;作为Trail of Bits春季实习项目的一部分，我开发了一系列基于数据流的优化技术，用于消除McSema提升程序中模拟机器码寄存器写入的&amp;quot;死&amp;quot;存储。例如，在Apache httpd上应用死存储消除(DSE)优化后，成功移除了117,059次存储操作，相当于Remill寄存器状态结构中50%的存储操作。&lt;/p&gt;
&lt;h2 id=&#34;提升时发生了什么&#34;&gt;提升时发生了什么
&lt;/h2&gt;&lt;p&gt;Remill/McSema提升代码的核心是State结构体，它模拟机器的寄存器状态。Remill通过LLVM的load/store指令来模拟寄存器的读写操作。例如一个简化版x86架构的State结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-llvm&#34; data-lang=&#34;llvm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;%struct.State&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;i32&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;考虑以下机器码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ebx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对应的LLVM IR简化表示中，我们可以发现：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从&lt;code&gt;%ebx_0&lt;/code&gt;到&lt;code&gt;%eax_ptr&lt;/code&gt;的存储后立即从同一位置加载&lt;code&gt;%eax_0&lt;/code&gt;是冗余的&lt;/li&gt;
&lt;li&gt;后续的&lt;code&gt;%eax_1&lt;/code&gt;存储会使之前的存储变为死存储&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;构建消除器&#34;&gt;构建消除器
&lt;/h2&gt;&lt;h3 id=&#34;槽位划分&#34;&gt;槽位划分
&lt;/h3&gt;&lt;p&gt;DSE过程将State结构划分为&amp;quot;槽位&amp;quot;，每个槽位大致对应一个寄存器。通过计算指针偏移量，我们可以确定每条指令引用的具体槽位。&lt;/p&gt;
&lt;h3 id=&#34;槽位别名分析&#34;&gt;槽位别名分析
&lt;/h3&gt;&lt;p&gt;我们使用ForwardAliasVisitor(FAV)来识别指向相同槽位的指令别名。FAV维护两个映射：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问映射：记录访问状态偏移的指令&lt;/li&gt;
&lt;li&gt;偏移映射：跟踪所有可能引用状态结构的指针&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;消除死指令&#34;&gt;消除死指令
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;LiveSetBlockVisitor(LSBV)&lt;/strong&gt;：通过反向遍历基本块进行活跃变量分析，确定哪些存储可以被安全消除&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ForwardingBlockVisitor&lt;/strong&gt;：通过替换存储-加载-使用序列为直接使用原值来优化指令&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;优化效果验证&#34;&gt;优化效果验证
&lt;/h2&gt;&lt;p&gt;在amd64架构的Apache httpd上，我们获得了以下优化结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;候选存储：210,855&lt;/li&gt;
&lt;li&gt;死存储消除：117,059&lt;/li&gt;
&lt;li&gt;DSE移除指令：273,322&lt;/li&gt;
&lt;li&gt;转发优化：3,348&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;未来优化方向&#34;&gt;未来优化方向
&lt;/h2&gt;&lt;p&gt;虽然当前DSE已取得显著效果，但仍有改进空间：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;处理分支中槽位仅在一侧活跃的情况&lt;/li&gt;
&lt;li&gt;更精确地处理函数调用&lt;/li&gt;
&lt;li&gt;将活跃区域提升为allocas以利用LLVM的mem2reg优化&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Trail of Bits 2020冬季实习项目亮点：从反编译器到智能合约安全</title>
        <link>http://localhost:1313/p/trail-of-bits-2020%E5%86%AC%E5%AD%A3%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E4%BB%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/</link>
        <pubDate>Sun, 03 Aug 2025 04:42:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/trail-of-bits-2020%E5%86%AC%E5%AD%A3%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E4%BB%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/</guid>
        <description>&lt;h3 id=&#34;aaron-yoo--anvill反编译器&#34;&gt;Aaron Yoo — Anvill反编译器
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;加州大学洛杉矶分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在Anvill反编译器中添加了一个生成LLVM位码函数&amp;quot;JSON规范&amp;quot;的工具。这些规范告知Anvill函数参数和返回值等重要值的物理位置（寄存器或内存）。典型规范示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;arch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;demangled_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;test(long, long)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_Z4testll&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;param1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;register&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RDI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过该项目，我深入了解了ABI规范，并解决了高级参数分散在多个机器寄存器中的技术难题。&lt;/p&gt;
&lt;h3 id=&#34;paweł-płatek--deepstate与python&#34;&gt;Paweł Płatek — DeepState与Python
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AGH科技大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我主要修复了DeepState Python部分的构建问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;：修正构建选项，增加仅构建示例的选项&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;：采用多阶段构建，支持Honggfuzz和Angora&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模糊测试执行器&lt;/strong&gt;：统一参数处理，重新实现日志系统和运行时统计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试体系&lt;/strong&gt;：创建基础测试用例验证执行器功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt;：拆分文档结构，新增模糊测试使用指南&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;philip-zhengyuan-wang--manticore&#34;&gt;Philip Zhengyuan Wang — Manticore
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;马里兰大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我开发了&amp;quot;mcorepv&amp;quot;工具实现Manticore的云化部署：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过Ansible自动配置DigitalOcean云主机&lt;/li&gt;
&lt;li&gt;使用Protobuf协议实时传输分析状态&lt;/li&gt;
&lt;li&gt;开发终端用户界面(TUI)监控运行状态&lt;/li&gt;
&lt;li&gt;实现工作目录自动同步和日志回传&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前待解决问题包括SSH端口转发优化和TUI信息展示改进。&lt;/p&gt;
&lt;h3 id=&#34;samuel-caccavale--go代码分析&#34;&gt;Samuel Caccavale — Go代码分析
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;东北大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发基于AST和SSA的Go代码扫描器，可检测以下模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 危险的类型断言使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;相比GoSec等工具，能更精确识别类型断言值的上下文使用安全。&lt;/p&gt;
&lt;h3 id=&#34;taylor-pothast--mishegos&#34;&gt;Taylor Pothast — Mishegos
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;范德堡大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将x86_64解码器模糊测试工具Mishegos的输出格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从JSON改为紧凑二进制格式&lt;/li&gt;
&lt;li&gt;开发mish2jsonl转换工具保持向后兼容&lt;/li&gt;
&lt;li&gt;更新分析工具处理新增的符号字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thomas-quig--crytic与slither&#34;&gt;Thomas Quig — Crytic与Slither
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;伊利诺伊大学香槟分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将Slither的智能合约升级检查集成到Crytic CI服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现合约版本选择界面&lt;/li&gt;
&lt;li&gt;检查代理合约模式的风险点（如存储变量对齐）&lt;/li&gt;
&lt;li&gt;输出标准化JSON格式的检测结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;william-wang--openssl与anselm&#34;&gt;William Wang — OpenSSL与Anselm
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;加州大学洛杉矶分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发OpenSSL API误用检测工具Anselm：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写LLVM Pass构建API调用图&lt;/li&gt;
&lt;li&gt;实现基础启发式规则（如密码上下文初始化检查）&lt;/li&gt;
&lt;li&gt;支持跨语言OpenSSL绑定分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来计划增强参数/返回值分析能力，完善开发者接口。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>McSema二进制转LLVM比特码工具重大升级</title>
        <link>http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/</link>
        <pubDate>Fri, 01 Aug 2025 21:24:22 +0800</pubDate>
        
        <guid>http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/</guid>
        <description>&lt;h1 id=&#34;mcsema二进制转llvm比特码工具重大升级&#34;&gt;McSema：二进制转LLVM比特码工具重大升级
&lt;/h1&gt;&lt;p&gt;我们的x86机器码转LLVM比特码工具McSema刚刚完成全面升级。上周举办的开发马拉松显著改善了McSema的易用性、文档质量和代码质量，现在使用McSema分析和逆向工程二进制文件比以往任何时候都更容易。&lt;/p&gt;
&lt;h2 id=&#34;发展阶段&#34;&gt;发展阶段
&lt;/h2&gt;&lt;p&gt;McSema已成为我们日常工作中不可或缺的工具，它能帮助我们发现并加固二进制程序的安全漏洞、独立验证供应商源代码，以及生成高代码覆盖率的应用测试。该工具不仅应用于学术研究，还参与DARPA项目。自2014年开源以来，我们（及其他贡献者）持续扩展其功能以分析日益复杂的程序。&lt;/p&gt;
&lt;h2 id=&#34;性能优化&#34;&gt;性能优化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建速度&lt;/strong&gt;：通过清理死代码、移除冗余库及优化目录结构，构建系统更简洁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比特码生成&lt;/strong&gt;：改进控制流图遍历算法，移除Boost依赖，简化比特码生成流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比特码质量&lt;/strong&gt;：取消函数入口/出口的寄存器上下文存储，改用原生位宽操作处理标志位，新增惰性生成比特码优化功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;现代化改造&#34;&gt;现代化改造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;升级至标准版LLVM 3.8（原使用定制版LLVM 3.5）&lt;/li&gt;
&lt;li&gt;完全移除Boost依赖，改用C++11现代特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能简化&#34;&gt;功能简化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;统一命令行接口：&lt;code&gt;mcsema-disass&lt;/code&gt;负责反汇编，&lt;code&gt;mcsema-lift&lt;/code&gt;执行比特码转换&lt;/li&gt;
&lt;li&gt;弃用定制反汇编器bin_descend，统一采用IDA Pro作为反汇编引擎&lt;/li&gt;
&lt;li&gt;重构代码结构，精简CMake构建脚本&lt;/li&gt;
&lt;li&gt;采用无外部依赖的集成测试框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新增特性&#34;&gt;新增特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持更多指令集（提供指令添加指南）&lt;/li&gt;
&lt;li&gt;新增&lt;code&gt;--list-supported&lt;/code&gt;命令查看支持指令列表&lt;/li&gt;
&lt;li&gt;集成测试框架支持快速添加全面翻译测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文档完善&#34;&gt;文档完善
&lt;/h2&gt;&lt;p&gt;全新文档详细说明安装流程、使用方法、测试方案、功能扩展和调试技巧，并包含常见错误解决方案，显著降低第三方开发者的参与门槛。&lt;/p&gt;
&lt;h2 id=&#34;运行时增强&#34;&gt;运行时增强
&lt;/h2&gt;&lt;p&gt;提升运行效率，大幅降低内存占用，改进与原生Windows/Linux代码的复杂交互能力，使转换后的比特码不仅能用于静态分析，还可重新编译为可执行程序。&lt;/p&gt;
&lt;h2 id=&#34;未来规划&#34;&gt;未来规划
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;扩展对复杂软件的支持&lt;/li&gt;
&lt;li&gt;计划采用Binary Ninja替代IDA Pro进行控制流恢复&lt;/li&gt;
&lt;li&gt;新增ARM架构二进制转LLVM比特码功能&lt;/li&gt;
&lt;li&gt;拓展移动应用和嵌入式固件分析场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们正在招募对McSema开发感兴趣的实习生。入门者可先尝试&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/mcsema/blob/master/docs/Converting.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux二进制转换教程&lt;/a&gt;，了解如何使libFuzzer等工具作用于二进制文件。如有创新构想，欢迎联系我们——若方案可行，我们将提供资金支持实现。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
