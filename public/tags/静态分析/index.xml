<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>静态分析 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/</link>
        <description>Recent content in 静态分析 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 18:57:18 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>软件成分分析工具对比：Snyk、Semgrep与Dependabot深度评测</title>
        <link>http://localhost:1313/p/%E8%BD%AF%E4%BB%B6%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94snyksemgrep%E4%B8%8Edependabot%E6%B7%B1%E5%BA%A6%E8%AF%84%E6%B5%8B/</link>
        <pubDate>Sat, 09 Aug 2025 18:57:18 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%BD%AF%E4%BB%B6%E6%88%90%E5%88%86%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E5%AF%B9%E6%AF%94snyksemgrep%E4%B8%8Edependabot%E6%B7%B1%E5%BA%A6%E8%AF%84%E6%B5%8B/</guid>
        <description>&lt;h3 id=&#34;背景&#34;&gt;背景
&lt;/h3&gt;&lt;p&gt;在Doyensec，我们专注于白盒与灰盒应用安全审计。除动态测试外，通常还会审计客户源代码。该过程常借助开源或商用工具实现，现代版本的工具具备检测第三方漏洞库的能力，即软件成分分析（SCA）。&lt;/p&gt;
&lt;h3 id=&#34;工具生态&#34;&gt;工具生态
&lt;/h3&gt;&lt;p&gt;SCA领域的三款知名工具分别为Snyk、Semgrep和Dependabot。前两者是含云组件的独立应用，后者直接集成于GitHub环境。作为安全自动化专家，Doyensec对这些工具具有丰富经验：从为Semgrep编写定制检测规则，到协助客户在SDLC流程中部署这类工具。我们此前还发布过关于它们静态应用安全测试(SAST)能力的研究报告（&lt;a class=&#34;link&#34; href=&#34;https://doyensec.com/research&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;查看详情&lt;/a&gt;）。在与Semgrep团队交流后，我们受邀对这三款工具的SCA功能进行无偏见横向对比。&lt;/p&gt;
&lt;h3 id=&#34;核心发现&#34;&gt;核心发现
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;应当忽略大多数依赖项告警&lt;/strong&gt;。完整测试结果已发布于&lt;a class=&#34;link&#34; href=&#34;https://doyensec.com/research&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;研究页面&lt;/a&gt;，白皮书中详细描述了测试集构建方法。简言之，我们旨在评估哪款工具能提供最高效的可行动结果（即高真阳性率），而非关注漏报率。这种场景符合多数安全团队的实际需求——他们无法承受耗时数日追查误报的代价。除超大型团队外，低精度工具带来的海量误报会耗尽人力资源。此外，在CI/CD流程中实施部署阻断时，系统对误报的容忍度极低。&lt;/p&gt;
&lt;h3 id=&#34;后续计划&#34;&gt;后续计划
&lt;/h3&gt;&lt;p&gt;希望本次工具对比白皮书对您有所启发。欢迎关注我们的博客获取更多应用安全趋势分析。如需应用安全项目协助（包括安全自动化服务），请通过info@doyensec.com联系我们。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;相关文章推荐&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doyensec.com/blog/unsafe-archive-unpacking&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;不安全的归档解压：实验与Semgrep规则&lt;/a&gt;（2024-12-16）&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doyensec.com/blog/semgrep-vs-codeql&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Semgrep与CodeQL深度对比&lt;/a&gt;（2022-10-06）&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doyensec.com/blog/internship-experience&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;我在Doyensec的实习经历&lt;/a&gt;（2022-08-24）&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://doyensec.com/blog/regexploit&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Regexploit：可导致DoS的正则表达式&lt;/a&gt;（2021-03-11）&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>首届智能合约分析国际研讨会(WoSCA 2020)重磅来袭</title>
        <link>http://localhost:1313/p/%E9%A6%96%E5%B1%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%86%E6%9E%90%E5%9B%BD%E9%99%85%E7%A0%94%E8%AE%A8%E4%BC%9Awosca-2020%E9%87%8D%E7%A3%85%E6%9D%A5%E8%A2%AD/</link>
        <pubDate>Fri, 08 Aug 2025 08:04:30 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E9%A6%96%E5%B1%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%86%E6%9E%90%E5%9B%BD%E9%99%85%E7%A0%94%E8%AE%A8%E4%BC%9Awosca-2020%E9%87%8D%E7%A3%85%E6%9D%A5%E8%A2%AD/</guid>
        <description>&lt;p&gt;在Trail of Bits，我们不仅从事安全审计工作：还不断突破漏洞检测工具的研究边界，定期在学术会议上展示成果，并评审其他研究人员的优秀论文（参见我们近期对Real World Crypto和Financial Crypto的综述）。&lt;/p&gt;
&lt;p&gt;秉承这一理念，我们与北亚利桑那大学共同筹办首届智能合约分析国际研讨会(WoSCA 2020)。本次研讨会将与ISSTA 2020同期举行，汇聚全球研究者探讨智能合约的静态与动态分析方法，包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于分析的漏洞发现（如启发式静态分析、模糊测试）&lt;/li&gt;
&lt;li&gt;可靠分析（如模型检测、时序逻辑）&lt;/li&gt;
&lt;li&gt;代码优化（如代码精简、Gas成本估算）&lt;/li&gt;
&lt;li&gt;代码理解（如反编译、逆向工程）&lt;/li&gt;
&lt;li&gt;代码监控（如调试、故障检测）&lt;/li&gt;
&lt;li&gt;中间表示（如设计、规范）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WoSCA 2020积极倡导开放可复现的研究，特别欢迎关于改进现有工具或提出新工具的论文投稿！&lt;/p&gt;
&lt;p&gt;论文提交（最长8页）截止日期延长至2020年6月26日（AoE时区）。另请注意：我们仍在接收&amp;quot;10k Crytic研究奖金&amp;quot;的申请，该奖项专门奖励基于我们区块链工具开发的学术论文。&lt;/p&gt;
&lt;p&gt;（社交媒体分享图标：Twitter/LinkedIn/GitHub/Mastodon/Hacker News）&lt;/p&gt;
&lt;p&gt;© 2025 Trail of Bits.
采用Hugo和Mainroad主题生成。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>自动化逆向工程培训正式发布 - Binary Ninja实战指南</title>
        <link>http://localhost:1313/p/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%B9%E8%AE%AD%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83-binary-ninja%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</link>
        <pubDate>Fri, 08 Aug 2025 04:06:27 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%87%AA%E5%8A%A8%E5%8C%96%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%B9%E8%AE%AD%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83-binary-ninja%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h3 id=&#34;即将开课的培训&#34;&gt;即将开课的培训
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;2020年1月20-23日 - 纽约&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们多年来一直推崇Vector35开发的Binary Ninja工具，并运用它完成了多项突破性工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在DEFCON 2016 CTF资格赛中为2000个独特二进制文件生成&amp;quot;漏洞利用&amp;quot;&lt;/li&gt;
&lt;li&gt;实现2017年DEFCON比赛中诡异的clemency架构&lt;/li&gt;
&lt;li&gt;开发架构无关的插件实现C++虚函数脱虚拟化&lt;/li&gt;
&lt;li&gt;精准建模Heartbleed漏洞的二进制表现&lt;/li&gt;
&lt;li&gt;在McSema 2.0中恢复程序控制流&lt;/li&gt;
&lt;li&gt;构建EVM字节码反汇编器Ethersplay&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Binary Ninja联合创始人Jordan Wiens高度评价道：&amp;ldquo;Josh无疑是我们最资深的Binary Ninja用户。我们高度重视他的每个反馈，也想不出比他更合适的第三方讲师来教授如何用Binary Ninja解决逆向工程难题。&amp;rdquo;&lt;/p&gt;
&lt;h3 id=&#34;为什么选择binary-ninja&#34;&gt;为什么选择Binary Ninja？
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;清晰的API设计&lt;/strong&gt;：相比竞品提供更完善的文档和示例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;现代化架构&lt;/strong&gt;：从底层设计就支持持续创新，不受历史包袱限制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动化优势&lt;/strong&gt;：内置架构无关的中间语言，相同分析可跨指令集复用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成本效益&lt;/strong&gt;：价格显著低于主流竞品&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模块化培训体系&#34;&gt;模块化培训体系
&lt;/h3&gt;&lt;h4 id=&#34;1-binary-ninja逆向工程基础1天&#34;&gt;1. Binary Ninja逆向工程基础（1天）
&lt;/h4&gt;&lt;p&gt;掌握软件逆向基础技能和简单任务自动化，为进阶模块铺垫。&lt;/p&gt;
&lt;h4 id=&#34;2-binary-ninja自动化逆向工程2天&#34;&gt;2. Binary Ninja自动化逆向工程（2天）
&lt;/h4&gt;&lt;p&gt;深度探索Python API，实现分析任务自动化，开发功能扩展插件。&lt;/p&gt;
&lt;h4 id=&#34;3-binary-ninja恶意代码分析2天&#34;&gt;3. Binary Ninja恶意代码分析（2天）
&lt;/h4&gt;&lt;p&gt;学习检测字符串混淆、控制流混淆的技术，开发批量恶意行为检测脚本。&lt;/p&gt;
&lt;h4 id=&#34;4-binary-ninja漏洞自动化挖掘2天&#34;&gt;4. Binary Ninja漏洞自动化挖掘（2天）
&lt;/h4&gt;&lt;p&gt;构建自动化漏洞挖掘工具链，通过CTF形式练习用C语言编写漏洞利用载荷。&lt;/p&gt;
&lt;h4 id=&#34;5-自定义加载器与架构支持1天&#34;&gt;5. 自定义加载器与架构支持（1天）
&lt;/h4&gt;&lt;p&gt;扩展对新文件格式和指令集的支持，开发反汇编器、lifting器和加载插件。&lt;/p&gt;
&lt;h4 id=&#34;6-c-api扩展开发1天&#34;&gt;6. C++ API扩展开发（1天）
&lt;/h4&gt;&lt;p&gt;比较不同API特性，开发与Binary Ninja核心交互的独立应用。&lt;/p&gt;
&lt;p&gt;[下载完整课程说明PDF]&lt;/p&gt;
&lt;h3 id=&#34;释放分析团队潜能&#34;&gt;释放分析团队潜能
&lt;/h3&gt;&lt;p&gt;手动逆向工程既低效又浪费智力资源。通过Binary Ninja自动化工具和我们的专业培训，可显著提升逆向工程能力。&lt;/p&gt;
&lt;p&gt;[联系我们安排培训]&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用CodeQL检测C&#43;&#43;迭代器失效问题</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8codeql%E6%A3%80%E6%B5%8Bc-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
        <pubDate>Wed, 06 Aug 2025 16:10:02 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8codeql%E6%A3%80%E6%B5%8Bc-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
        <description>&lt;h1 id=&#34;使用codeql检测迭代器失效&#34;&gt;使用CodeQL检测迭代器失效
&lt;/h1&gt;&lt;p&gt;迭代器失效是C++中常见且隐蔽的一类错误，经常导致可利用的漏洞。在Trail of Bits实习期间，我开发了Itergator——一组用于分析和发现迭代器失效的CodeQL类和查询。&lt;/p&gt;
&lt;h2 id=&#34;迭代器定义&#34;&gt;迭代器定义
&lt;/h2&gt;&lt;p&gt;迭代器是C++中遍历容器内容的标准方式。迭代器对象至少支持两种操作：解引用（获取容器中的底层对象）和递增（获取下一个元素的迭代器）。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;迭代器失效&#34;&gt;迭代器失效
&lt;/h2&gt;&lt;p&gt;当容器发生某些修改（如添加或删除元素）后，迭代器会失效。根据标准，使用失效迭代器属于未定义行为。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zone_manager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;deserialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonIn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;jsin&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;jsin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zones&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zone_type_id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zone_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;has_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zone_type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;zones&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;debugmsg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Invalid zone type: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zone_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c_str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;codeql简介&#34;&gt;CodeQL简介
&lt;/h2&gt;&lt;p&gt;CodeQL是GitHub开发的静态分析框架，允许使用类似SQL的语法查询代码库。它具有面向对象的类系统，其中谓词定义逻辑属性和关系。&lt;/p&gt;
&lt;h2 id=&#34;检测迭代器失效&#34;&gt;检测迭代器失效
&lt;/h2&gt;&lt;p&gt;使用静态分析检测迭代器失效面临多个挑战。Itergator通过以下方式解决：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建可能使迭代器失效的函数调用图&lt;/li&gt;
&lt;li&gt;定义核心类：
&lt;ul&gt;
&lt;li&gt;Iterator：存储迭代器的变量&lt;/li&gt;
&lt;li&gt;Iterated：被迭代的集合&lt;/li&gt;
&lt;li&gt;Invalidator：可能导致迭代器失效的函数调用&lt;/li&gt;
&lt;li&gt;Invalidation：直接使迭代器失效的函数调用&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PotentialInvalidationDestructor&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PotentialInvalidation&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;PotentialInvalidationDestructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MemberFunction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;~%&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;predicate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;invalidates&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Iterated&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;refersTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getParentScope&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;复杂案例&#34;&gt;复杂案例
&lt;/h2&gt;&lt;p&gt;在Google的正则表达式库中发现的一个复杂bug展示了该项目的挑战性。这个失效发生在循环的三次迭代中：第一次初始化迭代器，然后失效，最后使用失效的迭代器。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;Itergator是检测各种规模代码库中复杂迭代器失效的强大工具。尽管存在一些引擎bug，但与CodeQL的声明式查询语言合作非常愉快。&lt;/p&gt;
&lt;p&gt;特别感谢我的导师Josh和Trail of Bits的所有人，这是我工作过的最好的地方！如果有任何问题，欢迎在Twitter @themalwareman上联系我。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用Binary Ninja API检测潜在释放后使用漏洞的技术解析</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8binary-ninja-api%E6%A3%80%E6%B5%8B%E6%BD%9C%E5%9C%A8%E9%87%8A%E6%94%BE%E5%90%8E%E4%BD%BF%E7%94%A8%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Wed, 06 Aug 2025 11:46:22 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8binary-ninja-api%E6%A3%80%E6%B5%8B%E6%BD%9C%E5%9C%A8%E9%87%8A%E6%94%BE%E5%90%8E%E4%BD%BF%E7%94%A8%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h2 id=&#34;释放后使用漏洞的静态检测挑战&#34;&gt;释放后使用漏洞的静态检测挑战
&lt;/h2&gt;&lt;p&gt;释放后使用(Use-after-Free)是一种内存破坏条件，程序在内存被释放后仍继续引用。静态检测这类漏洞具有挑战性。本文探索了利用Binary Ninja的中级中间语言(MLIL)建立数据流图的方法，通过追踪特定内存分配与其他内存区域的交互关系，进行跨函数分析以识别潜在漏洞。&lt;/p&gt;
&lt;h2 id=&#34;内存分配数据流图构建&#34;&gt;内存分配数据流图构建
&lt;/h2&gt;&lt;p&gt;数据流图由四种节点类型构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;追踪分配节点(红色)&lt;/strong&gt;：表示待追踪的内存分配&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数栈帧节点(绿色)&lt;/strong&gt;：表示函数调用栈帧&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态内存节点(蓝色)&lt;/strong&gt;：表示无法确定来源的SSA变量&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全局内存节点(黑色)&lt;/strong&gt;：表示函数内的全局变量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;边表示指针存储操作，包含两个关键属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt;：写入位置相对于分配基址的偏移&lt;/li&gt;
&lt;li&gt;&lt;code&gt;points&lt;/code&gt;：指针值指向的目标偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ssa变量与图节点的映射关系&#34;&gt;SSA变量与图节点的映射关系
&lt;/h2&gt;&lt;p&gt;分析从分配函数(如malloc())返回值的SSA变量开始追踪。通过Binary Ninja的&lt;code&gt;get_ssa_var_definition()&lt;/code&gt;和&lt;code&gt;get_ssa_var_uses()&lt;/code&gt;API可以获取变量的定义位置和使用链。指针算术运算时会额外存储偏移信息。&lt;/p&gt;
&lt;h2 id=&#34;内存加载操作转换为图边&#34;&gt;内存加载操作转换为图边
&lt;/h2&gt;&lt;p&gt;当遇到函数外部内存加载操作时，会假设相关存储操作发生在函数外部，并据此创建图边。内存存储、赋值和加载操作共同构成了数据流图的基础构件。&lt;/p&gt;
&lt;h2 id=&#34;数据流图信息传播&#34;&gt;数据流图信息传播
&lt;/h2&gt;&lt;p&gt;变量赋值分为三种情况处理：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接变量赋值：简单传递源变量值&lt;/li&gt;
&lt;li&gt;含指针算术的赋值：更新偏移信息&lt;/li&gt;
&lt;li&gt;内存加载赋值：通过图边解析目标节点&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;释放后使用漏洞检测&#34;&gt;释放后使用漏洞检测
&lt;/h2&gt;&lt;p&gt;完成数据流图构建后，分析所有被标记为&amp;quot;Free&amp;quot;的基本块，检查是否存在路径通向&amp;quot;Use&amp;quot;块。同时也会检测从一个&amp;quot;Free&amp;quot;块到另一个&amp;quot;Free&amp;quot;块的路径，以发现潜在的双重释放问题。&lt;/p&gt;
&lt;h2 id=&#34;分配器释放器函数的自动识别&#34;&gt;分配器/释放器函数的自动识别
&lt;/h2&gt;&lt;p&gt;通过分析标准函数(如malloc/free)的使用链，可以识别程序特定的包装函数。对于释放器函数，检查函数参数是否直接传递给free()等标准释放函数。&lt;/p&gt;
&lt;h2 id=&#34;实际漏洞案例分析&#34;&gt;实际漏洞案例分析
&lt;/h2&gt;&lt;p&gt;工具在多个历史漏洞中成功检测出问题，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JasPer JPEG-2000中的双重释放(CVE-2015-5221)&lt;/li&gt;
&lt;li&gt;Giflib中的双重释放(CVE-2016-3177)&lt;/li&gt;
&lt;li&gt;GNOME-Nettool中的释放后使用&lt;/li&gt;
&lt;li&gt;OpenSLP中的跨函数双重释放(CVE-2015-5177)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论与展望&#34;&gt;结论与展望
&lt;/h2&gt;&lt;p&gt;本文介绍的方法虽然存在静态分析固有的分类误差，但为识别释放后使用漏洞提供了有效途径。未来可通过改进日志分组和增加全局内存跟踪来增强工具实用性。项目源代码已公开在uafninja仓库。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用CodeReason进行原生程序语义分析 - 揭秘二进制逆向工程利器</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8codereason%E8%BF%9B%E8%A1%8C%E5%8E%9F%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90-%E6%8F%AD%E7%A7%98%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%88%A9%E5%99%A8/</link>
        <pubDate>Tue, 05 Aug 2025 03:08:37 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8codereason%E8%BF%9B%E8%A1%8C%E5%8E%9F%E7%94%9F%E7%A8%8B%E5%BA%8F%E8%AF%AD%E4%B9%89%E5%88%86%E6%9E%90-%E6%8F%AD%E7%A7%98%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%88%A9%E5%99%A8/</guid>
        <description>&lt;h1 id=&#34;原生程序的语义分析codereason技术解析&#34;&gt;原生程序的语义分析：CodeReason技术解析
&lt;/h1&gt;&lt;p&gt;你是否曾想对原生模式程序发起查询，询问哪些代码位置会向特定寄存器写入特定值？是否希望自动化解混淆字符串的操作？&lt;/p&gt;
&lt;h2 id=&#34;逆向工程的语义挑战&#34;&gt;逆向工程的语义挑战
&lt;/h2&gt;&lt;p&gt;逆向工程原生程序需要在低层次理解其语义，直到浮现出高层次功能图景。系统化理解原生程序的一个关键挑战在于：这种理解必须覆盖程序使用的每一条指令。分析工具需要明确知道哪些指令会对内存调用和寄存器产生何种影响。&lt;/p&gt;
&lt;p&gt;我们向您介绍CodeReason——这个为DARPA网络快速追踪项目开发的机器码分析框架。CodeReason提供了分析x86和ARM原生代码语义的框架，其价值在于能让我们平台化地查询原生代码对整体程序状态的影响，这得益于它对原生指令的深度语义理解。&lt;/p&gt;
&lt;h2 id=&#34;构建语义理解的挑战&#34;&gt;构建语义理解的挑战
&lt;/h2&gt;&lt;p&gt;构建这种语义理解既耗时又昂贵。现有系统要么门槛过高，要么无法精确满足需求，或者没有对其语义进行简化和优化。而我们正需要这些简化——它们能将复杂的优化转化为易于理解的简单表达式。为说明这点，我们将展示一个CodeReason的实际应用案例。&lt;/p&gt;
&lt;h2 id=&#34;flame恶意软件分析实战&#34;&gt;Flame恶意软件分析实战
&lt;/h2&gt;&lt;p&gt;当Flame恶意软件曝光时，其部分二进制文件被上传到malware.lu。这些样本采用全局数据结构存储混淆字符串，结构如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ObfuscatedString&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;hasDeobfuscated&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringLen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;每个结构体末尾包含可变长度数据，其中7字节似乎未被使用。&lt;/p&gt;
&lt;h3 id=&#34;技术亮点一字符串反混淆&#34;&gt;技术亮点一：字符串反混淆
&lt;/h3&gt;&lt;p&gt;我们使用CodeReason编写了C语言字符串解混淆器。原始程序逻辑分三步进行字符串解混淆：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;首函数&lt;/strong&gt;检查hasDeobfuscated字段：若为零，返回字符串首元素指针；若非零则调用第二函数，并将hasDeobfuscated置零&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;次函数&lt;/strong&gt;遍历&amp;rsquo;string&amp;rsquo;数组每个字符，调用第三函数获取值后从字符中减去该值，结果写回数组：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;inplace_buffer_decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counted&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counted&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newChar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_decrypt_modifier_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cur&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;newChar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;counted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;strong&gt;关键函数&lt;/strong&gt;&lt;code&gt;get_decrypt_modifier&lt;/code&gt;仅包含一个基本块：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;lea ecx, [eax+11h]
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;add eax, 0Bh
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;imul ecx, eax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mov edx, ecx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shr edx, 8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mov eax, edx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xor eax, ecx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;shr eax, 10h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xor eax, edx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xor eax, ecx
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;retn
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;CodeReason的优势在于：我们可以捕获该代码块并获取&amp;rsquo;eax&amp;rsquo;的方程式，从而理解该块的&amp;quot;返回&amp;quot;行为，在解混淆器中复现&lt;code&gt;get_decrypt_modifier&lt;/code&gt;的语义。&lt;/p&gt;
&lt;h3 id=&#34;语义分析-vs-反编译&#34;&gt;语义分析 vs 反编译
&lt;/h3&gt;&lt;p&gt;虽然可以反编译此代码片段为C，但我们更关注代码对&amp;rsquo;eax&amp;rsquo;的影响，而非高级的C代码表现形式。CodeReason让我们能跳过最后一步，直接分析语义，这种方式往往更强大。&lt;/p&gt;
&lt;h2 id=&#34;codereason实战演示&#34;&gt;CodeReason实战演示
&lt;/h2&gt;&lt;p&gt;通过CodeReason获取语义表达如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./bin/VEEShell -a X86 -f ../tests/testSkyWipe.bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;EAX = Xor32[ Xor32[ Shr32[ Xor32[ Shr32[ Mul32[ Add32[ REGREAD(EAX), I:U32(0xb) ], Add32[ REGREAD(EAX), I:U32(0x11) ] ], I:U8(0x8) ], Mul32[ Add32[ REGREAD(EAX), I:U32(0xb) ], Add32[ REGREAD(EAX), I:U32(0x11) ] ] ], I:U8(0x10) ], Shr32[ Mul32[ Add32[ REGREAD(EAX), I:U32(0xb) ], Add32[ REGREAD(EAX), I:U32(0x11) ] ], I:U8(0x8) ] ], Mul32[ Add32[ REGREAD(EAX), I:U32(0xb) ], Add32[ REGREAD(EAX), I:U32(0x11) ] ] ]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;基于此，我们实现了等效的C函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_decrypt_modifier_f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Xor32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Xor32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;Shr32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;Xor32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nf&#34;&gt;Shr32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;Mul32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;mh&#34;&gt;0x8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nf&#34;&gt;Mul32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x11&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;mh&#34;&gt;0x10&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;Shr32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;Mul32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x11&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;mh&#34;&gt;0x8&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;Mul32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;Add32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x11&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;实际运行效果验证了其正确性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:\code\tmp&amp;gt;skywiper_string_decrypt.exe
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CreateToolhelp32Snapshot
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们正在将CodeReason扩展为IDA插件，届时可直接在IDA中进行这些查询！&lt;/p&gt;
&lt;h2 id=&#34;技术亮点二竞态条件发现&#34;&gt;技术亮点二：竞态条件发现
&lt;/h2&gt;&lt;p&gt;这个字符串解混淆器存在竞态条件：若两个线程同时解混淆同一字符串，将导致字符串永久损坏。当处理关键混淆字符串时，这可能导致向系统服务传递错误数据，造成严重后果。&lt;/p&gt;
&lt;h2 id=&#34;高级混淆破解案例&#34;&gt;高级混淆破解案例
&lt;/h2&gt;&lt;p&gt;我们还用CodeReason破解了如下形式的字符串混淆：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;xor eax eax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push eax
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sub eax, 0x21ece84
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;push eax
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过巧妙利用二进制补码运算语义，这些指令序列将非字符串立即数转化为字符串值，并按正确顺序压栈，实现动态构建字符串。CodeReason配合简单窥孔优化器，能将其转换为字符串立即数的内存写入形式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MEMWRITE[esp] = &amp;#39;.dll&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;MEMWRITE[esp-4] = &amp;#39;nlan&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;将机器码转化为可优化和理解的形式具有强大潜力！特别是当这种能力以编程库形式提供时。通过CodeReason，我们能够：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提取字符串混淆函数的语义&lt;/li&gt;
&lt;li&gt;自动实现字符串解混淆器&lt;/li&gt;
&lt;li&gt;将混淆代码简化为直接表达解混淆字符串的形式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们将在后续博文中介绍CodeReason的更多应用场景和能力。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用CodeQL捕捉OpenSSL误用漏洞 - 关键加密API安全实践</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8codeql%E6%8D%95%E6%8D%89openssl%E8%AF%AF%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%85%B3%E9%94%AE%E5%8A%A0%E5%AF%86api%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Mon, 04 Aug 2025 21:40:49 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8codeql%E6%8D%95%E6%8D%89openssl%E8%AF%AF%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%85%B3%E9%94%AE%E5%8A%A0%E5%AF%86api%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h1 id=&#34;使用codeql捕捉openssl误用漏洞&#34;&gt;使用CodeQL捕捉OpenSSL误用漏洞
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;作者：Damien Santiago&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;日期：2023年12月22日&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我开发了五个CodeQL查询，用于捕捉OpenSSL libcrypto API中潜在的高危漏洞。这个被广泛采用但容错性低的API，一旦误用可能导致内存泄漏、认证绕过等加密实现问题。这些查询（在导师Fredrik Dahlgren和Filipe Casal指导下完成）通过确保正确的密钥处理、熵初始化和大数清除检查来预防误用。&lt;/p&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始
&lt;/h2&gt;&lt;p&gt;要运行这些查询，首先执行以下命令下载查询包：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;codeql pack download trailofbits/cpp-queries
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对预生成的C/C++数据库进行分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;codeql database analyze database.db &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;sarif-latest &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --output&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;./tob-cpp.sarif -- trailofbits/cpp-queries
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;密钥长度检测&#34;&gt;密钥长度检测
&lt;/h2&gt;&lt;p&gt;初始化加密算法时使用过短的密钥会导致严重问题：OpenSSL仍会接受该密钥，但在初始化时会越界读取，可能导致弱密钥问题。我们通过检查密钥尺寸与算法匹配性来实现检测。&lt;/p&gt;
&lt;h3 id=&#34;codeql实现关键点&#34;&gt;CodeQL实现关键点
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;定义&lt;code&gt;Key&lt;/code&gt;类型：通过数据流分析识别传入&lt;code&gt;EVP_EncryptInit_ex&lt;/code&gt;第4参数的变量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Key&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Variable&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exists&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FunctionCall&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hasName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;EVP_EncryptInit_ex&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getANode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getArgument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;密码识别：通过API函数名模式匹配（如&lt;code&gt;EVP_aes_256_cbc&lt;/code&gt;）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EVP_CIPHER&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FunctionCall&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;ne&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keySize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;EVP_CIPHER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;matches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;EVP_aes_%_cbc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;and&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;keySize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;charAt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;toInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;引擎初始化验证&#34;&gt;引擎初始化验证
&lt;/h2&gt;&lt;p&gt;OpenSSL 1.1.1支持动态加载加密引擎，但必须按特定顺序初始化：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过&lt;code&gt;ENGINE_by_id&lt;/code&gt;等函数加载引擎&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;ENGINE_init&lt;/code&gt;进行初始化&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;ENGINE_set_default&lt;/code&gt;设置为默认实现&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;检测逻辑&#34;&gt;检测逻辑
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;from CreateEngine create, FunctionCall init, FunctionCall set
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;where 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  not exists(init.getTarget().hasName(&amp;#34;ENGINE_init&amp;#34;)) or
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  not exists(set.getTarget().hasName(&amp;#34;ENGINE_set_default&amp;#34;))
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;select create, &amp;#34;Engine not properly initialized&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;扩展应用&#34;&gt;扩展应用
&lt;/h2&gt;&lt;p&gt;OpenSSL libcrypto API充满潜在陷阱，微小的错误可能导致严重漏洞。CodeQL等工具能帮助开发者和代码审查人员构建定制化查询来加固代码。我们已在GitHub仓库中提供了更多针对Go和C++的查询示例。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目地址：https://github.com/trailofbits/cpp-queries&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>用Binary Ninja破解2000个二进制文件 - 逆向工程实战解析</title>
        <link>http://localhost:1313/p/%E7%94%A8binary-ninja%E7%A0%B4%E8%A7%A32000%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Mon, 04 Aug 2025 17:48:54 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%94%A8binary-ninja%E7%A0%B4%E8%A7%A32000%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;binary-ninja实战2000个二进制文件的自动化破解之旅&#34;&gt;Binary Ninja实战：2000个二进制文件的自动化破解之旅
&lt;/h3&gt;&lt;p&gt;在2016年DEFCON CTF资格赛中，我使用Vector35开发的Binary Ninja（一个极具潜力的交互式静态分析和逆向工程平台）编写脚本，为2000个独特二进制文件生成了&amp;quot;漏洞利用&amp;quot;。如果你想在后DARPA时代的DEFCON CTF中保持竞争力，我强烈推荐你了解Binary Ninja。&lt;/p&gt;
&lt;h4 id=&#34;工具对比binary-ninja-vs-ida&#34;&gt;工具对比：Binary Ninja vs IDA
&lt;/h4&gt;&lt;p&gt;与我使用IDA的经验（简直是用胶带和祈祷勉强维持）相比，Binary Ninja的工作流程令人愉悦。它基于自己的中间语言（IL）进行分析，并通过Python和C++ API暴露功能。查询代码块、函数、跟踪执行流、查询寄存器状态等操作都变得非常简单，而这些在IDA中简直是艰巨任务。&lt;/p&gt;
&lt;h4 id=&#34;挑战1334个二进制文件&#34;&gt;挑战1：334个二进制文件
&lt;/h4&gt;&lt;p&gt;第一个挑战是&amp;quot;334 cuts&amp;quot;，提供334个DECREE格式的挑战二进制文件，所有文件名都与食物相关。这些二进制文件被剥离了符号表，具有静态栈缓冲区、金丝雀值和基于栈的缓冲区溢出漏洞。金丝雀值被复制到栈上并与硬编码值进行比对。如果金丝雀值被覆盖，挑战将终止而不会崩溃。&lt;/p&gt;
&lt;p&gt;通过Binary Ninja的无界面分析引擎，我们编写Python脚本自动收集以下关键信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要溢出的缓冲区大小&lt;/li&gt;
&lt;li&gt;金丝雀字符串及其长度&lt;/li&gt;
&lt;li&gt;recvmsg函数中栈缓冲区大小&lt;/li&gt;
&lt;li&gt;writemsg函数每次写循环处理的数据量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binaryninja&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binaryninja&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BinaryViewType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ELF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_analysis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;逆向工程关键步骤&#34;&gt;逆向工程关键步骤
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定位main函数&lt;/strong&gt;：从入口点开始，通过跟踪调用链找到main函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;识别关键调用&lt;/strong&gt;：收集所有call指令，确定memcpy、recvmsg和memcmp调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提取金丝雀值&lt;/strong&gt;：使用get_parameter_at()函数查询memcmp调用参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算缓冲区大小&lt;/strong&gt;：通过栈帧偏移计算可溢出缓冲区大小&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 获取金丝雀参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary_frame&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_parameter_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_parameter_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary_width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_parameter_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canary_address&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;canary_width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;构造崩溃字符串&#34;&gt;构造崩溃字符串
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 填充缓冲区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加金丝雀前4字节（总是4字节）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;canary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 填充剩余金丝雀缓冲区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canary_frame&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 覆盖保存的寄存器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eeee&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;后续挑战666和1000个二进制文件&#34;&gt;后续挑战：666和1000个二进制文件
&lt;/h4&gt;&lt;p&gt;同样的方法成功应用于&amp;quot;666 cuts&amp;quot;和&amp;quot;1000 cuts&amp;quot;挑战，证明了该解决方案的通用性。最终获得的标志分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;334 cuts: baby&amp;rsquo;s first crs cirvyudta&lt;/li&gt;
&lt;li&gt;666 cuts: you think this is the real quaid DeifCokIj&lt;/li&gt;
&lt;li&gt;1000 cuts: do you want a thousand bandages gruanfir3&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;binary-ninja的改进空间&#34;&gt;Binary Ninja的改进空间
&lt;/h4&gt;&lt;p&gt;虽然Binary Ninja表现出色，但仍需改进：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加SSA（静态单赋值）形式&lt;/li&gt;
&lt;li&gt;实现灵活的类型系统&lt;/li&gt;
&lt;li&gt;增强数据流分析能力&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;结论&#34;&gt;结论
&lt;/h4&gt;&lt;p&gt;从流畅的图形视图到中间语言，再到与Python的智能集成，Binary Ninja为静态二进制分析提供了出色的接口。它让我能够轻松快速地从2000个二进制文件中提取数据，展示了将机械效率与人类直觉相结合的可能性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的（略微更新的）脚本可在&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/binja-ctf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;获取。Binary Ninja现已公开发售两个版本：商业版（399美元）和个人版（99美元）。本文介绍的脚本使用了仅商业版提供的&amp;quot;无GUI处理&amp;quot;功能。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>2016年度回顾：Trail of Bits在自动漏洞发现、安全工具开发与社区贡献的突破</title>
        <link>http://localhost:1313/p/2016%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BEtrail-of-bits%E5%9C%A8%E8%87%AA%E5%8A%A8%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%9A%84%E7%AA%81%E7%A0%B4/</link>
        <pubDate>Mon, 04 Aug 2025 14:57:30 +0800</pubDate>
        
        <guid>http://localhost:1313/p/2016%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BEtrail-of-bits%E5%9C%A8%E8%87%AA%E5%8A%A8%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%9A%84%E7%AA%81%E7%A0%B4/</guid>
        <description>&lt;h3 id=&#34;1-将自动漏洞发现技术推向市场&#34;&gt;1. 将自动漏洞发现技术推向市场
&lt;/h3&gt;&lt;p&gt;2016年成为软件自动发现和修复漏洞的历史性年份。我们为DARPA网络大挑战开发的网络推理系统(CRS)在审计zlib库时创造了纪录：首次在更短时间内以更低成本完成比人工更详尽的代码审计。&lt;a class=&#34;link&#34; href=&#34;https://example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阅读审计报告&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;https://example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mozilla公告&lt;/a&gt;。同年1月，我们运用CRS解决了关于安全通信库libotr的1000美元赌约，揭示了加密通信系统在自动化测试中的特殊挑战及解决方案。&lt;/p&gt;
&lt;p&gt;我们开源了CRS的配套工具GRR——专为CRS设计的高吞吐量模糊测试工具。&lt;a class=&#34;link&#34; href=&#34;https://example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;了解GRR的设计挑战&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-创建安全工具标准化基准套件&#34;&gt;2. 创建安全工具标准化基准套件
&lt;/h3&gt;&lt;p&gt;我们将DARPA网络大挑战中使用的100多个挑战程序移植为跨平台基准套件，使学术界和工业界能可靠评估程序分析工具和漏洞缓解措施。该成果被DARPA官方推特称为&amp;quot;最具影响力的成果之一&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;3-将facebook的osquery移植到windows&#34;&gt;3. 将Facebook的osquery移植到Windows
&lt;/h3&gt;&lt;p&gt;克服了完全不同的进程/安全模型、不兼容API和编译器行为差异等技术难题，使Windows用户能通过SQL查询监控端点的安全与性能状态，替代了原本需要昂贵商业方案才能实现的功能。&lt;/p&gt;
&lt;h3 id=&#34;4-发布algo安全vpn&#34;&gt;4. 发布Algo安全VPN
&lt;/h3&gt;&lt;p&gt;这款自托管VPN服务器采用现代协议和密码套件，支持主流云平台部署，为隐私敏感用户、商务旅行者和小型企业提供轻量级解决方案。安全专家@grugq评价其&amp;quot;配置简单，iPhone兼容&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;5-用binary-ninja实现漏洞自动生成&#34;&gt;5. 用Binary Ninja实现漏洞自动生成
&lt;/h3&gt;&lt;p&gt;在DEFCON CTF资格赛中，我们利用Binary Ninja的丰富API为2000个独特二进制文件自动生成漏洞利用。相比IDA或radare2，其API设计让研究者能专注于漏洞利用本身而非底层实现。&lt;/p&gt;
&lt;h3 id=&#34;6-发布protofuzz协议模糊测试工具&#34;&gt;6. 发布Protofuzz协议模糊测试工具
&lt;/h3&gt;&lt;p&gt;该工具能生成符合Google Protocol Buffers结构的恶意测试用例，突破常规模糊测试无法穿透的自动生成序列化代码层，直达目标程序核心逻辑。被安全专家誉为&amp;quot;伟大的工具&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;7-通过tidas激活ios安全飞地&#34;&gt;7. 通过Tidas激活iOS安全飞地
&lt;/h3&gt;&lt;p&gt;我们开发的Tidas SDK让iOS应用能简易集成Secure Enclave加密API，实现基于TouchID的无密码认证。随着MacBook Pro引入T1芯片，该技术已扩展至macOS平台。&lt;/p&gt;
&lt;p&gt;（因篇幅限制，此处仅展示部分内容翻译，完整译文需展开全部14项技术成果）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Trail of Bits发布《测试手册》——聚焦Semgrep静态分析工具与CI/CD优化</title>
        <link>http://localhost:1313/p/trail-of-bits%E5%8F%91%E5%B8%83%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8C%E8%81%9A%E7%84%A6semgrep%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B8%8Eci/cd%E4%BC%98%E5%8C%96/</link>
        <pubDate>Sun, 03 Aug 2025 17:17:36 +0800</pubDate>
        
        <guid>http://localhost:1313/p/trail-of-bits%E5%8F%91%E5%B8%83%E6%B5%8B%E8%AF%95%E6%89%8B%E5%86%8C%E8%81%9A%E7%84%A6semgrep%E9%9D%99%E6%80%81%E5%88%86%E6%9E%90%E5%B7%A5%E5%85%B7%E4%B8%8Eci/cd%E4%BC%98%E5%8C%96/</guid>
        <description>&lt;h3 id=&#34;为什么编写测试手册&#34;&gt;为什么编写《测试手册》？
&lt;/h3&gt;&lt;p&gt;在Trail of Bits，我们投入了大量时间研究、实验和优化各类静态与动态安全工具。实践中发现，现有文档虽然全面但过于庞杂。标准文档试图提供所有答案，而我们的《测试手册》只提供经过实战验证的最有效方案。&lt;/p&gt;
&lt;p&gt;手册不仅是配置指南，更是CI/CD流水线中工具优化的蓝图。许多组织能搭建安全工具却难以优化，最终导致工具维护成本远超其价值。我们的目标是直击核心价值，剔除噪音，指引您掌握工具最具影响力的功能。&lt;/p&gt;
&lt;h3 id=&#34;首章发布semgrep专项&#34;&gt;首章发布：Semgrep专项
&lt;/h3&gt;&lt;p&gt;首章聚焦高效静态分析工具Semgrep，专精于低复杂度缺陷和特定代码模式检测。本章将帮助您：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;理解Semgrep的优势与适用场景&lt;/li&gt;
&lt;li&gt;完成初始配置并定制优化规则集&lt;/li&gt;
&lt;li&gt;编写/测试自定义规则，运用自动修复功能&lt;/li&gt;
&lt;li&gt;实现CI/CD集成（含推荐配置方案）&lt;/li&gt;
&lt;li&gt;获取外部资源库（规则模板/技术文章/视频教程）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.trailofbits.com/testing-handbook-semgrep&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;立即查阅Semgrep章节&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;近期文章推荐&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《非常规创新者奖学金》&lt;/li&gt;
&lt;li&gt;《PajaMAS多智能体系统劫持技术》&lt;/li&gt;
&lt;li&gt;《构建MCP亟需的安全层》&lt;/li&gt;
&lt;li&gt;《废弃硬件中的零日漏洞利用》&lt;/li&gt;
&lt;li&gt;《EthCC[8]实录：如何成为智能合约审计师》&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;© 2025 Trail of Bits&lt;br&gt;
Hugo构建 | Mainroad主题&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用Binary Ninja进行反向污点分析 - 追踪程序崩溃根源</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8binary-ninja%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90-%E8%BF%BD%E8%B8%AA%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E6%A0%B9%E6%BA%90/</link>
        <pubDate>Sun, 03 Aug 2025 00:44:21 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8binary-ninja%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90-%E8%BF%BD%E8%B8%AA%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E6%A0%B9%E6%BA%90/</guid>
        <description>&lt;h1 id=&#34;反向污点分析原理&#34;&gt;反向污点分析原理
&lt;/h1&gt;&lt;p&gt;在Trail of Bits暑期实习期间，我开发了KRFAnalysis工具集，用于分析系统调用故障注入工具KRF产生的崩溃。KRF能有效引发程序崩溃，但难以确定具体是哪个故障系统调用导致了崩溃。&lt;/p&gt;
&lt;h2 id=&#34;人工分析示例&#34;&gt;人工分析示例
&lt;/h2&gt;&lt;p&gt;以一个存在漏洞的程序为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;fillBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 如果string为NULL会导致段错误
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;fillBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 未检查malloc是否失败
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过gdb分析核心转储：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;(gdb) bt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#0 0x00005555555546a8 in fillBuffer()
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;#1 0x00005555555546e1 in main()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;逆向分析显示&lt;code&gt;malloc&lt;/code&gt;的返回值未经检查就直接传递给&lt;code&gt;fillBuffer&lt;/code&gt;，导致写入NULL指针时崩溃。&lt;/p&gt;
&lt;h1 id=&#34;mlil-ssa形式分析&#34;&gt;MLIL SSA形式分析
&lt;/h1&gt;&lt;p&gt;Binary Ninja的Medium Level IL(MLIL)转换为Static Single Assignment(SSA)形式后，变量追踪变得简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;每个变量只被赋值一次&lt;/li&gt;
&lt;li&gt;函数参数和返回值关系清晰可见&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;vars_read&lt;/code&gt;和&lt;code&gt;get_ssa_var_definition&lt;/code&gt;方法可自动追踪数据流&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;自动化分析算法&#34;&gt;自动化分析算法
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;创建空栈&lt;/li&gt;
&lt;li&gt;将崩溃指令压入栈&lt;/li&gt;
&lt;li&gt;当栈不为空时：
&lt;ul&gt;
&lt;li&gt;弹出指令&lt;/li&gt;
&lt;li&gt;如果是函数调用：标记返回值可能为崩溃原因&lt;/li&gt;
&lt;li&gt;否则：追踪所有SSA变量的定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;python实现&#34;&gt;Python实现
&lt;/h1&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;checkFunction&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inst_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_functions_containing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;medium_level_il&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_instruction_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inst_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ssa_form&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ssa_form&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;visited_instructions&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;var_stack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inst&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vars_read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;var_stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var_stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var_stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited_instructions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;visited_instructions&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_ssa_var_definition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Argument &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;var&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34; tainted from function call&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;operation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MediumLevelILOperation&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MLIL_CALL_SSA&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is_constant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;func_called&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_function_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Tainted by call to&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;func_called&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;(&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Tainted by indirect call at instruction&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;hex&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;decl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vars_read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;var_stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;工具集扩展&#34;&gt;工具集扩展
&lt;/h1&gt;&lt;p&gt;完整的KRFAnalysis包含三个组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;main.py&lt;/code&gt; - 从核心转储提取信息并打包&lt;/li&gt;
&lt;li&gt;&lt;code&gt;analyze.py&lt;/code&gt; - 自动运行反向污点分析&lt;/li&gt;
&lt;li&gt;&lt;code&gt;krf.py&lt;/code&gt; - 核心分析逻辑（基于Binary Ninja API）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在KRF虚拟机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 main.py binary core
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在Binary Ninja环境&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;python3 analyze.py analysis_package.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;结论&#34;&gt;结论
&lt;/h1&gt;&lt;p&gt;Binary Ninja API提供了强大的二进制分析能力，其SSA形式的中间语言显著简化了逆向分析过程。虽然LLVM框架在源码分析方面有优势，但Binary Ninja可以直接处理二进制文件，使其成为无源码情况下的理想选择。&lt;/p&gt;
&lt;p&gt;工具集已开源，包含三个LLVM静态分析pass：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;检测竞态条件(TOCTOU)&lt;/li&gt;
&lt;li&gt;检测未检查的标准库调用错误&lt;/li&gt;
&lt;li&gt;反向污点分析的LLVM实现&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Magnifier：交互式反编译的实验性工具</title>
        <link>http://localhost:1313/p/magnifier%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%B7%A5%E5%85%B7/</link>
        <pubDate>Sat, 02 Aug 2025 17:43:34 +0800</pubDate>
        
        <guid>http://localhost:1313/p/magnifier%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%B7%A5%E5%85%B7/</guid>
        <description>&lt;h3 id=&#34;trail-of-bits的反编译技术栈&#34;&gt;Trail of Bits的反编译技术栈
&lt;/h3&gt;&lt;p&gt;Trail of Bits正在开发多个与程序反编译相关的开源项目：Remill、Anvill、Rellic以及新推出的Magnifier。其技术策略是通过多级中间表示（IR）逐步提升编译程序：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Remill&lt;/strong&gt;：将机器指令转换为LLVM IR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Anvill&lt;/strong&gt;：把机器码函数转化为LLVM函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rellic&lt;/strong&gt;：通过Clang AST将LLVM IR转换为C代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Magnifier创新性地实现了在任意管道阶段进行交互式转换，研究人员可以实时操作Anvill的LLVM IR并查看Rellic生成的C代码。&lt;/p&gt;
&lt;h3 id=&#34;从repl起步的原型&#34;&gt;从REPL起步的原型
&lt;/h3&gt;&lt;p&gt;Magnifier最初作为命令行REPL（读取-求值-输出循环）开发，支持以下核心转换操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用LLVM优化函数&lt;/li&gt;
&lt;li&gt;函数内联&lt;/li&gt;
&lt;li&gt;带/不带常量折叠的值替换&lt;/li&gt;
&lt;li&gt;函数指针去虚拟化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;关键技术实现包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;唯一标识系统&lt;/strong&gt;：为所有函数、参数、基本块和IR指令分配不透明ID&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指令溯源机制&lt;/strong&gt;：通过&amp;quot;当前ID|源ID&amp;quot;的双重标识追踪转换过程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;通用替换接口&lt;/strong&gt;：允许用户监控、允许或拒绝每个替换步骤&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可视化界面magnifierui&#34;&gt;可视化界面MagnifierUI
&lt;/h3&gt;&lt;p&gt;基于Vue.js前端和C++后端的MagnifierUI具有以下特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多会话WebSocket通信架构&lt;/li&gt;
&lt;li&gt;并列显示LLVM IR与Rellic生成的C代码&lt;/li&gt;
&lt;li&gt;支持指令级高亮关联&lt;/li&gt;
&lt;li&gt;集成优化按钮调用LLVM全套优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;典型工作流示例：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;上传二进制文件&lt;/li&gt;
&lt;li&gt;在终端视图执行参数值替换&lt;/li&gt;
&lt;li&gt;实时观察IR和C代码同步更新&lt;/li&gt;
&lt;li&gt;通过内联按钮优化函数调用&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;llvm优化的实战演示&#34;&gt;LLVM优化的实战演示
&lt;/h3&gt;&lt;p&gt;通过&amp;quot;fibIter(100)&amp;ldquo;案例展示Magnifier的威力：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;内联fibIter函数调用&lt;/li&gt;
&lt;li&gt;执行LLVM优化&lt;/li&gt;
&lt;li&gt;直接获得结果值3314859971（第100个斐波那契数）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;该过程避免了动态调试的复杂性，展示了如何将含循环/条件语句的复杂函数简化为常量。&lt;/p&gt;
&lt;h3 id=&#34;未来发展方向&#34;&gt;未来发展方向
&lt;/h3&gt;&lt;p&gt;项目规划包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;扩展转换类型支持（最终实现完整补丁集）&lt;/li&gt;
&lt;li&gt;集成Anvill直接解析二进制文件&lt;/li&gt;
&lt;li&gt;增强可视化界面的交互功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Magnifier通过创新的交互式反编译方法，正在重新定义逆向工程的研究范式。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Circomspect工具正式集成至Sindri CLI——零知识证明电路开发迎来安全增强</title>
        <link>http://localhost:1313/p/circomspect%E5%B7%A5%E5%85%B7%E6%AD%A3%E5%BC%8F%E9%9B%86%E6%88%90%E8%87%B3sindri-cli%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%94%B5%E8%B7%AF%E5%BC%80%E5%8F%91%E8%BF%8E%E6%9D%A5%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA/</link>
        <pubDate>Sat, 02 Aug 2025 12:58:09 +0800</pubDate>
        
        <guid>http://localhost:1313/p/circomspect%E5%B7%A5%E5%85%B7%E6%AD%A3%E5%BC%8F%E9%9B%86%E6%88%90%E8%87%B3sindri-cli%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%94%B5%E8%B7%AF%E5%BC%80%E5%8F%91%E8%BF%8E%E6%9D%A5%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA/</guid>
        <description>&lt;p&gt;我们的静态分析工具Circomspect现已正式集成至Sindri命令行界面（CLI）！Circomspect专为帮助开发者更安全地构建Circom电路而设计，特别是在该新型编程框架工具支持有限的情况下。此次集成标志着Circomspect向更广泛使用迈出重要一步，从而为编写Circom电路的开发者提供更好支持。&lt;/p&gt;
&lt;p&gt;开发零知识证明电路是项艰巨任务。即使忽略技术复杂性，在Circom等平台上运行非基础电路也需要极高的计算资源：基础测试可能耗时数分钟（或更久），这将大幅延长开发周期。Sindri通过让用户访问能显著加速电路执行的专用硬件来缓解该问题。其简洁的API和CLI工具使开发者无需自行管理基础设施即可将电路与专用硬件集成。&lt;/p&gt;
&lt;p&gt;Sindri Labs首席执行官Stasia Carson对此表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;我们持续聚焦于让Sindri CLI对电路开发者更具普适价值，无论其是否使用Sindri服务。关键在于通过优化Docker容器实现无安装工具分发，并为静态分析、代码检查、编译和验证等工具提供统一的跨框架接口。Circomspect是开发安全Circom电路的关键工具，坦白说它可能是所有框架中最佳的安全工具，因此我们视其为最重要的集成之一。&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;此次集成对Circomspect具有里程碑意义。随着用户群体扩大，我们计划扩展更多分析功能，相关进展将在年内陆续公布。请持续关注我们的博客，获取关于Circomspect和零知识证明电路开发的最新动态！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>McSema二进制转LLVM比特码工具重大升级</title>
        <link>http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/</link>
        <pubDate>Fri, 01 Aug 2025 21:24:22 +0800</pubDate>
        
        <guid>http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/</guid>
        <description>&lt;h1 id=&#34;mcsema二进制转llvm比特码工具重大升级&#34;&gt;McSema：二进制转LLVM比特码工具重大升级
&lt;/h1&gt;&lt;p&gt;我们的x86机器码转LLVM比特码工具McSema刚刚完成全面升级。上周举办的开发马拉松显著改善了McSema的易用性、文档质量和代码质量，现在使用McSema分析和逆向工程二进制文件比以往任何时候都更容易。&lt;/p&gt;
&lt;h2 id=&#34;发展阶段&#34;&gt;发展阶段
&lt;/h2&gt;&lt;p&gt;McSema已成为我们日常工作中不可或缺的工具，它能帮助我们发现并加固二进制程序的安全漏洞、独立验证供应商源代码，以及生成高代码覆盖率的应用测试。该工具不仅应用于学术研究，还参与DARPA项目。自2014年开源以来，我们（及其他贡献者）持续扩展其功能以分析日益复杂的程序。&lt;/p&gt;
&lt;h2 id=&#34;性能优化&#34;&gt;性能优化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建速度&lt;/strong&gt;：通过清理死代码、移除冗余库及优化目录结构，构建系统更简洁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比特码生成&lt;/strong&gt;：改进控制流图遍历算法，移除Boost依赖，简化比特码生成流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比特码质量&lt;/strong&gt;：取消函数入口/出口的寄存器上下文存储，改用原生位宽操作处理标志位，新增惰性生成比特码优化功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;现代化改造&#34;&gt;现代化改造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;升级至标准版LLVM 3.8（原使用定制版LLVM 3.5）&lt;/li&gt;
&lt;li&gt;完全移除Boost依赖，改用C++11现代特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能简化&#34;&gt;功能简化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;统一命令行接口：&lt;code&gt;mcsema-disass&lt;/code&gt;负责反汇编，&lt;code&gt;mcsema-lift&lt;/code&gt;执行比特码转换&lt;/li&gt;
&lt;li&gt;弃用定制反汇编器bin_descend，统一采用IDA Pro作为反汇编引擎&lt;/li&gt;
&lt;li&gt;重构代码结构，精简CMake构建脚本&lt;/li&gt;
&lt;li&gt;采用无外部依赖的集成测试框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新增特性&#34;&gt;新增特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持更多指令集（提供指令添加指南）&lt;/li&gt;
&lt;li&gt;新增&lt;code&gt;--list-supported&lt;/code&gt;命令查看支持指令列表&lt;/li&gt;
&lt;li&gt;集成测试框架支持快速添加全面翻译测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文档完善&#34;&gt;文档完善
&lt;/h2&gt;&lt;p&gt;全新文档详细说明安装流程、使用方法、测试方案、功能扩展和调试技巧，并包含常见错误解决方案，显著降低第三方开发者的参与门槛。&lt;/p&gt;
&lt;h2 id=&#34;运行时增强&#34;&gt;运行时增强
&lt;/h2&gt;&lt;p&gt;提升运行效率，大幅降低内存占用，改进与原生Windows/Linux代码的复杂交互能力，使转换后的比特码不仅能用于静态分析，还可重新编译为可执行程序。&lt;/p&gt;
&lt;h2 id=&#34;未来规划&#34;&gt;未来规划
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;扩展对复杂软件的支持&lt;/li&gt;
&lt;li&gt;计划采用Binary Ninja替代IDA Pro进行控制流恢复&lt;/li&gt;
&lt;li&gt;新增ARM架构二进制转LLVM比特码功能&lt;/li&gt;
&lt;li&gt;拓展移动应用和嵌入式固件分析场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们正在招募对McSema开发感兴趣的实习生。入门者可先尝试&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/mcsema/blob/master/docs/Converting.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux二进制转换教程&lt;/a&gt;，了解如何使libFuzzer等工具作用于二进制文件。如有创新构想，欢迎联系我们——若方案可行，我们将提供资金支持实现。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
