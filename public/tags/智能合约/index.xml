<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>智能合约 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</link>
        <description>Recent content in 智能合约 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 18:40:45 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>使用Echidna对链上合约进行模糊测试 - 重现Stax Finance漏洞</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8echidna%E5%AF%B9%E9%93%BE%E4%B8%8A%E5%90%88%E7%BA%A6%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95-%E9%87%8D%E7%8E%B0stax-finance%E6%BC%8F%E6%B4%9E/</link>
        <pubDate>Sat, 09 Aug 2025 18:40:45 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8echidna%E5%AF%B9%E9%93%BE%E4%B8%8A%E5%90%88%E7%BA%A6%E8%BF%9B%E8%A1%8C%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95-%E9%87%8D%E7%8E%B0stax-finance%E6%BC%8F%E6%B4%9E/</guid>
        <description>&lt;h1 id=&#34;使用echidna对链上合约进行模糊测试&#34;&gt;使用Echidna对链上合约进行模糊测试
&lt;/h1&gt;&lt;p&gt;随着Echidna 2.1.0版本的发布，我们为这款以太坊智能合约模糊测试工具新增了直接获取链上数据的功能，包括合约代码和存储槽值。这些数据可用于对已部署合约的链上状态进行模糊测试，或测试新代码如何与现有合约集成。&lt;/p&gt;
&lt;p&gt;Echidna现在能够通过模糊测试合约接口和链上代码来重现真实世界的攻击案例。本文将演示如何仅用Echidna复现2022年Stax Finance漏洞（该漏洞由于StaxLPStaking合约缺少验证检查，导致321,154个xLP代币被盗，当时价值约230万美元）。&lt;/p&gt;
&lt;h2 id=&#34;重现stax-finance漏洞&#34;&gt;重现Stax Finance漏洞
&lt;/h2&gt;&lt;p&gt;要使用Echidna复现该漏洞，我们需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个封装目标Stax合约的测试合约（图1）&lt;/li&gt;
&lt;li&gt;包含攻击前区块号和RPC提供商的配置文件（图2）&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StaxExploit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IStaxLP&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StaxLP&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IStaxLP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xBcB8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;IStaxLPStaking&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StaxLPStaking&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IStaxLPStaking&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0xd286&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;hevm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;warp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1665493703&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 设置时间戳
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;hevm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;roll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;15725066&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 设置区块号
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;echidna_optimize_extracted_profit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;returns&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StaxLP&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;balanceOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initialAmount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 其他包装函数...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;图1：攻击者合约&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;配置文件设置优化模式以最大化利润函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;testMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;optimization&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rpcUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://.../&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rpcBlock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;15725066&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;testLimit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;em&gt;图2：Echidna配置文件&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;技术实现细节&#34;&gt;技术实现细节
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用Slither代码生成工具获取目标合约接口&lt;/li&gt;
&lt;li&gt;利用hevm作弊码操纵执行环境&lt;/li&gt;
&lt;li&gt;通过RPC获取链上信息时需注意API速率限制&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;局限性与挑战&#34;&gt;局限性与挑战
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;无法保证发现所有漏洞，需结合静态分析等其他方法&lt;/li&gt;
&lt;li&gt;复杂合约需要更长的测试时间&lt;/li&gt;
&lt;li&gt;网络数据获取可能受速率限制影响&lt;/li&gt;
&lt;li&gt;某些情况需要定制测试配置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;增强合约安全性&#34;&gt;增强合约安全性
&lt;/h2&gt;&lt;p&gt;Echidna的新功能（链上合约检索、数据获取和多核模糊测试）为提升代码安全性提供了新途径。模糊测试能覆盖单元测试可能忽略的边界情况。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://secure-contracts.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;访问&amp;quot;Building Secure Contracts&amp;quot;网站&lt;/a&gt;获取详细指南，或通过&lt;a class=&#34;link&#34; href=&#34;https://youtube.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;YouTube视频&lt;/a&gt;学习实际操作。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>智能合约迁移机制详解：从数据回写到成本分析</title>
        <link>http://localhost:1313/p/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E8%BF%81%E7%A7%BB%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%9B%9E%E5%86%99%E5%88%B0%E6%88%90%E6%9C%AC%E5%88%86%E6%9E%90/</link>
        <pubDate>Sat, 09 Aug 2025 18:07:54 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E8%BF%81%E7%A7%BB%E6%9C%BA%E5%88%B6%E8%AF%A6%E8%A7%A3%E4%BB%8E%E6%95%B0%E6%8D%AE%E5%9B%9E%E5%86%99%E5%88%B0%E6%88%90%E6%9C%AC%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;智能合约迁移机制详解&#34;&gt;智能合约迁移机制详解
&lt;/h1&gt;&lt;h2 id=&#34;为何需要合约迁移能力&#34;&gt;为何需要合约迁移能力
&lt;/h2&gt;&lt;p&gt;即使无漏洞的合约也可能因私钥被盗而被劫持。Bancor和KICKICO攻击事件证明，攻击者可入侵智能合约钱包。此时即便合约具备升级机制，也可能无法修复。必须部署新合约实例并正确初始化才能恢复功能。&lt;/p&gt;
&lt;p&gt;所有智能合约开发者都应在设计阶段集成迁移流程，企业也需做好应急准备。迁移包含两个关键步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;恢复待迁移数据&lt;/li&gt;
&lt;li&gt;将数据写入新合约&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;迁移实施步骤&#34;&gt;迁移实施步骤
&lt;/h2&gt;&lt;h3 id=&#34;第一步数据恢复&#34;&gt;第一步：数据恢复
&lt;/h3&gt;&lt;p&gt;需从区块链特定区块读取数据。建议在事件发生前的区块获取数据，或过滤攻击者操作记录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数据恢复策略：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;公开变量&lt;/strong&gt;：通过getter直接获取uint/address等简单类型值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;私有变量&lt;/strong&gt;：通过事件日志或计算内存偏移后调用getStorageAt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt;：已知元素数量，可采用相同技术&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;映射&lt;/strong&gt;：需主动追踪键值，建议在存储时触发事件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ERC20代币&lt;/strong&gt;：通过Transfer事件追踪持有地址，可使用Google BigTable以太坊存档或自行扫描&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;from_address&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bigquery&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ethereum_blockchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token_transfers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token_address&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x41424344&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNION&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;DISTINCT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;to_address&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bigquery&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ethereum_blockchain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token_transfers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;WHERE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;token_address&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x41424344&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;第二步数据写入&#34;&gt;第二步：数据写入
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;简单变量&lt;/strong&gt;：通过构造函数设置&lt;br&gt;
&lt;strong&gt;大数据量&lt;/strong&gt;：需分多笔交易处理（受GasLimit限制）&lt;/p&gt;
&lt;p&gt;建议为合约添加初始化状态，仅允许所有者修改变量。ERC20代币迁移示例流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署处于初始化状态的合约&lt;/li&gt;
&lt;li&gt;分批迁移余额（示例代码见下方）&lt;/li&gt;
&lt;li&gt;切换合约至生产状态&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;batchTransfer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;destinations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;duringInitialization&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;onlyOwner&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;external&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destinations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;balances&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;destinations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;emit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Transfer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;destinations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;values&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;迁移核心考量&#34;&gt;迁移核心考量
&lt;/h2&gt;&lt;h3 id=&#34;成本分析&#34;&gt;成本分析
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;数据恢复：链下免费（可使用ethereum-etl或Google BigQuery）&lt;/li&gt;
&lt;li&gt;链上写入：200个账户迁移约消耗240万gas（当前约$5.04）&lt;/li&gt;
&lt;li&gt;主流ERC20代币迁移成本估算：
&lt;ul&gt;
&lt;li&gt;BNB(30万 holders): $7,500&lt;/li&gt;
&lt;li&gt;OMG(66万 holders): $16,500&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;交易所协作&#34;&gt;交易所协作
&lt;/h3&gt;&lt;p&gt;需确保交易所配合完成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新合约上架&lt;/li&gt;
&lt;li&gt;旧合约停用
历史案例（Augur/Vechain/Tron）显示交易所普遍配合良好&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迁移-vs-可升级合约&#34;&gt;迁移 vs 可升级合约
&lt;/h2&gt;&lt;p&gt;可升级合约存在六大缺陷：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要精通EVM/Solidity底层&lt;/li&gt;
&lt;li&gt;增加代码复杂性和安全风险&lt;/li&gt;
&lt;li&gt;密钥管理负担加重&lt;/li&gt;
&lt;li&gt;每笔交易gas成本上升&lt;/li&gt;
&lt;li&gt;降低开发者测试严谨性&lt;/li&gt;
&lt;li&gt;损害用户信任度&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;适用升级机制的场景&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要频繁更新&lt;/li&gt;
&lt;li&gt;必须固定合约地址&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;最佳实践建议&#34;&gt;最佳实践建议
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;部署前完成迁移方案设计&lt;/li&gt;
&lt;li&gt;使用事件日志辅助数据追踪&lt;/li&gt;
&lt;li&gt;即使采用可升级合约，仍需准备迁移预案&lt;/li&gt;
&lt;li&gt;与交易所提前建立沟通机制&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;智能合约的不可变性要求开发者彻底重构应用构建方式，需要更严谨的设计流程。如需迁移方案验证帮助，可联系我们的以太坊安全咨询服务。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>以太坊安全技术深度解析：智能合约漏洞挖掘与防御实践</title>
        <link>http://localhost:1313/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Sat, 09 Aug 2025 13:12:41 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%AE%89%E5%85%A8%E6%8A%80%E6%9C%AF%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E4%B8%8E%E9%98%B2%E5%BE%A1%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h3 id=&#34;观看演讲视频回放&#34;&gt;观看演讲视频回放
&lt;/h3&gt;&lt;p&gt;2017年12月12日，超过150名参与者在我们举办的年度最终Empire Hacking聚会上学习了如何编写和攻防智能合约。感谢所有到场人员、优秀演讲者以及Datadog提供的场地支持。&lt;/p&gt;
&lt;h3 id=&#34;智能合约安全简史&#34;&gt;智能合约安全简史
&lt;/h3&gt;&lt;p&gt;Consensys Diligence的Jon Maurelian从安全视角系统回顾了以太坊的过去、现在与未来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以太坊被设计为全球分布式共享计算机，Solidity等高级语言使智能合约开发成为可能&lt;/li&gt;
&lt;li&gt;这种开放执行环境存在委托调用、重入攻击等固有安全问题，已导致多起重大链上盗窃事件&lt;/li&gt;
&lt;li&gt;未来发展方向包括Viper安全语言、zk-SNARKs链上隐私方案，以及Manticore、KEVM等安全工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;智能合约ctf实战指南&#34;&gt;智能合约CTF实战指南
&lt;/h3&gt;&lt;p&gt;Trail of Bits的Sophia D&amp;rsquo;Antoine解析了包含Solidity挑战的CTF竞赛：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考CSAW 2017脚本可搭建以太坊CTF环境&lt;/li&gt;
&lt;li&gt;需掌握Manticore、Ethersplay等工具进行漏洞挖掘&lt;/li&gt;
&lt;li&gt;整数溢出和重入攻击是CTF常见题型，需研究历史赛题Write-up&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区块链自动化漏洞挖掘&#34;&gt;区块链自动化漏洞挖掘
&lt;/h3&gt;&lt;p&gt;Trail of Bits的Mark Mossberg演示了Manticore对EVM字节码的符号执行：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符号执行技术可实现高代码覆盖率，用于构建自动化漏洞发现系统&lt;/li&gt;
&lt;li&gt;在以太坊场景中可自动识别合约函数、生成触发异常状态的交易&lt;/li&gt;
&lt;li&gt;开源工具Manticore通过符号执行分析EVM智能合约&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;区块链解决信息安全需求&#34;&gt;区块链解决信息安全需求
&lt;/h3&gt;&lt;p&gt;Paul Makowski介绍了网络安全代币PolySwarm的创新设计：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当前威胁情报市场存在检测能力重叠、覆盖不足等问题&lt;/li&gt;
&lt;li&gt;以太坊智能合约通过程序化市场设计重构激励体系&lt;/li&gt;
&lt;li&gt;PolySwarm通过降低参与门槛激活安全专家资源，构建集体防御网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;联系我们&#34;&gt;联系我们
&lt;/h3&gt;&lt;p&gt;我们已成为行业领先的智能合约审计服务商，保障过代币发行、DApp及区块链平台的安全。如需帮助请联系我们。&lt;/p&gt;
&lt;p&gt;（原文包含的社交媒体分享链接及页脚信息已省略）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>首届智能合约分析国际研讨会(WoSCA 2020)重磅来袭</title>
        <link>http://localhost:1313/p/%E9%A6%96%E5%B1%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%86%E6%9E%90%E5%9B%BD%E9%99%85%E7%A0%94%E8%AE%A8%E4%BC%9Awosca-2020%E9%87%8D%E7%A3%85%E6%9D%A5%E8%A2%AD/</link>
        <pubDate>Fri, 08 Aug 2025 08:04:30 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E9%A6%96%E5%B1%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%88%86%E6%9E%90%E5%9B%BD%E9%99%85%E7%A0%94%E8%AE%A8%E4%BC%9Awosca-2020%E9%87%8D%E7%A3%85%E6%9D%A5%E8%A2%AD/</guid>
        <description>&lt;p&gt;在Trail of Bits，我们不仅从事安全审计工作：还不断突破漏洞检测工具的研究边界，定期在学术会议上展示成果，并评审其他研究人员的优秀论文（参见我们近期对Real World Crypto和Financial Crypto的综述）。&lt;/p&gt;
&lt;p&gt;秉承这一理念，我们与北亚利桑那大学共同筹办首届智能合约分析国际研讨会(WoSCA 2020)。本次研讨会将与ISSTA 2020同期举行，汇聚全球研究者探讨智能合约的静态与动态分析方法，包括但不限于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于分析的漏洞发现（如启发式静态分析、模糊测试）&lt;/li&gt;
&lt;li&gt;可靠分析（如模型检测、时序逻辑）&lt;/li&gt;
&lt;li&gt;代码优化（如代码精简、Gas成本估算）&lt;/li&gt;
&lt;li&gt;代码理解（如反编译、逆向工程）&lt;/li&gt;
&lt;li&gt;代码监控（如调试、故障检测）&lt;/li&gt;
&lt;li&gt;中间表示（如设计、规范）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;WoSCA 2020积极倡导开放可复现的研究，特别欢迎关于改进现有工具或提出新工具的论文投稿！&lt;/p&gt;
&lt;p&gt;论文提交（最长8页）截止日期延长至2020年6月26日（AoE时区）。另请注意：我们仍在接收&amp;quot;10k Crytic研究奖金&amp;quot;的申请，该奖项专门奖励基于我们区块链工具开发的学术论文。&lt;/p&gt;
&lt;p&gt;（社交媒体分享图标：Twitter/LinkedIn/GitHub/Mastodon/Hacker News）&lt;/p&gt;
&lt;p&gt;© 2025 Trail of Bits.
采用Hugo和Mainroad主题生成。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>以太坊智能合约可复用属性库 - 提升安全测试效率的168个预置属性</title>
        <link>http://localhost:1313/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%AF%E5%A4%8D%E7%94%A8%E5%B1%9E%E6%80%A7%E5%BA%93-%E6%8F%90%E5%8D%87%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E6%95%88%E7%8E%87%E7%9A%84168%E4%B8%AA%E9%A2%84%E7%BD%AE%E5%B1%9E%E6%80%A7/</link>
        <pubDate>Thu, 07 Aug 2025 20:30:43 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%8F%AF%E5%A4%8D%E7%94%A8%E5%B1%9E%E6%80%A7%E5%BA%93-%E6%8F%90%E5%8D%87%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E6%95%88%E7%8E%87%E7%9A%84168%E4%B8%AA%E9%A2%84%E7%BD%AE%E5%B1%9E%E6%80%A7/</guid>
        <description>&lt;h3 id=&#34;可复用的以太坊合约属性库&#34;&gt;可复用的以太坊合约属性库
&lt;/h3&gt;&lt;p&gt;随着智能合约安全技术发展，基于属性的模糊测试（property-based fuzzing）已成为开发者和安全工程师的核心技术。该技术依赖代码属性（通常称为不变量）的创建，这些属性描述代码的预期行为。为帮助社区定义属性，我们发布了包含168个预置属性的集合，可直接用于我们的智能合约模糊测试工具Echidna或通过单元测试调用。这些属性涵盖：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见ERC代币接口的合规性检查&lt;/li&gt;
&lt;li&gt;通用可测试安全属性&lt;/li&gt;
&lt;li&gt;定点数学运算测试属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实战研讨会安排&#34;&gt;实战研讨会安排
&lt;/h3&gt;&lt;p&gt;为帮助掌握这些工具，我们将举办两场直播：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3月7日&lt;/strong&gt;：ERC20属性详解、Echidna作弊码使用（讲师：Guillermo Larregay）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3月14日&lt;/strong&gt;：ERC4626属性解析与高效模糊测试技巧（讲师：Benjamin Samuels）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么需要这些属性&#34;&gt;为什么需要这些属性？
&lt;/h3&gt;&lt;p&gt;该资源库及配套研讨会将展示模糊测试如何提供远超常规单元测试的安全保障。这些属性可轻松集成到使用常见标准或流行库的项目中，当前版本包含对以下标准的测试：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ERC20&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准接口函数属性&lt;/li&gt;
&lt;li&gt;基础逻辑属性（如：用户余额不应大于代币总量）&lt;/li&gt;
&lt;li&gt;可销毁/可铸造/可暂停等扩展功能属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ERC4626&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合规性舍入方向验证&lt;/li&gt;
&lt;li&gt;禁止异常回退的函数属性&lt;/li&gt;
&lt;li&gt;差分测试属性（如deposit()需符合previewDeposit()预期）&lt;/li&gt;
&lt;li&gt;非标准安全属性（如份额通胀攻击检查）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ABDKMath64x64数学库&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交换律/结合律/分配律等数学属性&lt;/li&gt;
&lt;li&gt;差分测试（如2^(-x)应与1/2^x等价）&lt;/li&gt;
&lt;li&gt;输入范围异常检测属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实战案例发现abdkmath64x64库漏洞&#34;&gt;实战案例：发现ABDKMath64x64库漏洞
&lt;/h3&gt;&lt;h3 id=&#34;快速开始指南&#34;&gt;快速开始指南
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;安装Echidna测试工具&lt;/li&gt;
&lt;li&gt;集成属性库：
&lt;ul&gt;
&lt;li&gt;Hardhat项目：&lt;code&gt;npm install https://github.com/crytic/properties.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Foundry项目：&lt;code&gt;forge install crytic/properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;创建测试合约（示例代码见原文）&lt;/li&gt;
&lt;li&gt;配置Echidna参数文件&lt;/li&gt;
&lt;li&gt;运行测试：&lt;code&gt;echidna-test . --contract CryticERC20ExternalHarness --config tests/echidna-external.yaml&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;未来规划&#34;&gt;未来规划
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;扩展对PRBMath等数学库的测试支持&lt;/li&gt;
&lt;li&gt;增加更多ERC标准测试&lt;/li&gt;
&lt;li&gt;开发AMM/流动性池等非标合约的测试集&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>LLAMA：基于LLM引导种子生成的多反馈智能合约模糊测试框架</title>
        <link>http://localhost:1313/p/llama%E5%9F%BA%E4%BA%8Ellm%E5%BC%95%E5%AF%BC%E7%A7%8D%E5%AD%90%E7%94%9F%E6%88%90%E7%9A%84%E5%A4%9A%E5%8F%8D%E9%A6%88%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</link>
        <pubDate>Mon, 04 Aug 2025 22:02:22 +0800</pubDate>
        
        <guid>http://localhost:1313/p/llama%E5%9F%BA%E4%BA%8Ellm%E5%BC%95%E5%AF%BC%E7%A7%8D%E5%AD%90%E7%94%9F%E6%88%90%E7%9A%84%E5%A4%9A%E5%8F%8D%E9%A6%88%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</guid>
        <description>&lt;h1 id=&#34;llama基于llm引导种子生成的多反馈智能合约模糊测试框架&#34;&gt;LLAMA：基于LLM引导种子生成的多反馈智能合约模糊测试框架
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;br&gt;
智能合约在区块链生态系统中发挥着关键作用，而模糊测试仍是保障其安全的重要手段。尽管变异调度是影响模糊测试效果的关键因素，现有模糊测试工具主要关注种子调度和生成，而变异调度却鲜有研究。本文提出基于大语言模型（LLMs）的多反馈智能合约模糊测试框架LLAMA，整合了LLMs、进化变异策略和混合测试技术。&lt;/p&gt;
&lt;p&gt;LLAMA的核心组件包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分层提示策略&lt;/strong&gt;：指导LLMs生成语义有效的初始种子，结合轻量级预模糊测试阶段筛选高潜力输入；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多反馈优化机制&lt;/strong&gt;：利用运行时覆盖率和依赖反馈，同步改进种子生成、种子选择和变异调度；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进化模糊测试引擎&lt;/strong&gt;：根据有效性动态调整变异算子概率，并引入符号执行以突破停滞状态和发现深层漏洞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实验结果表明，LLAMA在覆盖率和漏洞检测方面均优于最先进的模糊测试工具。具体而言，其指令覆盖率达到91%，分支覆盖率达90%，并能检测出跨多个类别的148个已知漏洞中的132个。这些结果证明了LLAMA在实际智能合约安全测试场景中的有效性、适应性和实用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主题分类&lt;/strong&gt;&lt;br&gt;
软件工程（cs.SE）；密码学与安全（cs.CR）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>在Empire Hacking上探讨以太坊安全——Trail of Bits博客</title>
        <link>http://localhost:1313/p/%E5%9C%A8empire-hacking%E4%B8%8A%E6%8E%A2%E8%AE%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%AE%89%E5%85%A8trail-of-bits%E5%8D%9A%E5%AE%A2/</link>
        <pubDate>Mon, 04 Aug 2025 18:05:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%9C%A8empire-hacking%E4%B8%8A%E6%8E%A2%E8%AE%A8%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%AE%89%E5%85%A8trail-of-bits%E5%8D%9A%E5%AE%A2/</guid>
        <description>&lt;h1 id=&#34;在empire-hacking上探讨以太坊安全&#34;&gt;在Empire Hacking上探讨以太坊安全
&lt;/h1&gt;&lt;p&gt;如果你正在使用区块链技术构建实际应用并担心安全问题，这次聚会不容错过。加入我们12月12日的Empire Hacking特别活动，全程聚焦以太坊安全。&lt;/p&gt;
&lt;h2 id=&#34;为什么要参加&#34;&gt;为什么要参加？
&lt;/h2&gt;&lt;p&gt;四位区块链安全专家将分享如何编写安全的智能合约，以及如何攻击它们。其中两位演讲者来自我们的团队。&lt;/p&gt;
&lt;p&gt;我们已成为行业最受信任的审计、工具和最佳实践提供商之一，服务涵盖智能合约及其相关技术。我们保障过代币发行、去中心化应用乃至整个区块链平台的安全。与往届Empire Hacking活动一样，我们期待与开发社区分享前沿技术。&lt;/p&gt;
&lt;h2 id=&#34;演讲嘉宾&#34;&gt;演讲嘉宾
&lt;/h2&gt;&lt;p&gt;Trail of Bits的Sophia D&amp;rsquo;Antoine将讨论近期CTF比赛中Solidity和以太坊的挑战，以及利用这些漏洞所需的工具。&lt;/p&gt;
&lt;p&gt;Consensys Diligence的John Maurelian将分享Devcon3会议上关于以太坊安全最新进展的亮点。&lt;/p&gt;
&lt;p&gt;Mark Mossberg将展示Trail of Bits如何用符号执行引擎Manticore发现EVM字节码中的漏洞。&lt;/p&gt;
&lt;p&gt;Paul Makowski将介绍他即将推出的安全导向型以太坊代币PolySwarm，该代币利用区块链技术解决威胁情报行业的缺陷。&lt;/p&gt;
&lt;p&gt;企业以太坊联盟的Amber Baldet和Brian Schroeder将探讨Quorum区块链中应用的威胁建模、保密交易和零知识证明技术。&lt;/p&gt;
&lt;h2 id=&#34;时间地点&#34;&gt;时间地点
&lt;/h2&gt;&lt;p&gt;活动将于12月12日下午6点举行，地点在纽约时报大厦的DataDog办公室。需提前报名。照例提供简餐和啤酒。&lt;/p&gt;
&lt;p&gt;了解更多Empire Hacking信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问官网&lt;/li&gt;
&lt;li&gt;Meetup报名&lt;/li&gt;
&lt;li&gt;加入Slack社区&lt;/li&gt;
&lt;li&gt;关注Twitter @EmpireHacking&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>区块链制裁下的规避策略与技术对抗</title>
        <link>http://localhost:1313/p/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%B6%E8%A3%81%E4%B8%8B%E7%9A%84%E8%A7%84%E9%81%BF%E7%AD%96%E7%95%A5%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%8A%97/</link>
        <pubDate>Mon, 04 Aug 2025 12:28:37 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%88%B6%E8%A3%81%E4%B8%8B%E7%9A%84%E8%A7%84%E9%81%BF%E7%AD%96%E7%95%A5%E4%B8%8E%E6%8A%80%E6%9C%AF%E5%AF%B9%E6%8A%97/</guid>
        <description>&lt;h1 id=&#34;区块链制裁下的规避研究&#34;&gt;区块链制裁下的规避研究
&lt;/h1&gt;&lt;h2 id=&#34;摘要&#34;&gt;摘要
&lt;/h2&gt;&lt;p&gt;区块链地址制裁已成为应对恶意活动的常见监管手段。但由于复杂的交易流和资金混淆技术，无许可链上的执法仍面临挑战。本文以加密货币混币工具Tornado Cash为案例，定量评估了美国外国资产控制办公室（OFAC）在957天内对6.79百万个以太坊区块（涉及10.7亿笔交易）的制裁效果。研究发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OFAC制裁使Tornado Cash总存款量下降71.03%（约20亿美元）&lt;/li&gt;
&lt;li&gt;但78.33%的以太坊安全事件仍在使用该工具&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术限制分析&#34;&gt;技术限制分析
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;二元制裁分类易受粉尘攻击&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区块链生产者的碎片化审查&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;用户对混淆服务的复杂利用&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;解决方案&#34;&gt;解决方案
&lt;/h2&gt;&lt;p&gt;提出基于&lt;strong&gt;量化不纯度&lt;/strong&gt;的实用算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平均处理时间：0.07±0.03秒/区块&lt;/li&gt;
&lt;li&gt;在Bybit漏洞测试中达到：
&lt;ul&gt;
&lt;li&gt;97.61%精确率&lt;/li&gt;
&lt;li&gt;74.08%召回率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术贡献&#34;&gt;技术贡献
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;为DeFi监管讨论提供实证数据&lt;/li&gt;
&lt;li&gt;阐明执法挑战的技术根源&lt;/li&gt;
&lt;li&gt;提出应对制裁与安全风险的合规策略框架&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>使用符号执行与区块链尸检——Trail of Bits在Devcon IV的技术实践</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%B0%B8%E6%A3%80trail-of-bits%E5%9C%A8devcon-iv%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Mon, 04 Aug 2025 11:55:58 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E4%B8%8E%E5%8C%BA%E5%9D%97%E9%93%BE%E5%B0%B8%E6%A3%80trail-of-bits%E5%9C%A8devcon-iv%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h3 id=&#34;使用manticore和符号执行发现智能合约漏洞&#34;&gt;使用Manticore和符号执行发现智能合约漏洞
&lt;/h3&gt;&lt;p&gt;在该工作坊中，Josselin Feist演示了如何运用开源符号执行引擎Manticore。该工具不仅能即时发现代码缺陷，还可验证代码正确性。120名参与者通过实践掌握了形式化验证方法，这些技术能确保智能合约严格遵循设计规范。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;获取工作坊幻灯片与练习材料&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;区块链尸检&#34;&gt;区块链尸检
&lt;/h3&gt;&lt;p&gt;Jay Little通过闪电演讲展示了其团队对3万份自毁合约的复原与分析技术。针对以太坊主网200万合约中极少有价值合约被销毁的现象，Jay开发了新型工具链：重新处理区块链账本数据、重建带状态的合约，并利用调用轨迹和启发式方法分析可疑交易。&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;&#34; &gt;查看可疑自毁交易的筛选技术&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;安全现状专家讨论&#34;&gt;安全现状专家讨论
&lt;/h3&gt;&lt;p&gt;Kevin Seagraves主持的专题讨论聚焦以太坊安全态势：过去一年的重大安全变化、智能合约与传统系统安全差异、漏洞赏金机制效用评估等核心议题。&lt;/p&gt;
&lt;h3 id=&#34;安全审计深度培训&#34;&gt;安全审计深度培训
&lt;/h3&gt;&lt;p&gt;JP在为期全天的培训中分享了Trail of Bits的安全评审方法论，强调审计不仅应输出漏洞列表，更需提供项目整体风险评估、架构与开发生命周期指导等完整解决方案。该培训将于12月11日在纽约再次举办。&lt;/p&gt;
&lt;h3 id=&#34;devcon特别彩蛋&#34;&gt;Devcon特别彩蛋
&lt;/h3&gt;&lt;p&gt;Evan Sultanik未参会期间开发了以太坊客户端模糊测试工具Etheno。该工具可自动检测各以太坊客户端间的行为差异，仅用2分钟便复现了10月Ropsten测试网出现的共识漏洞。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;© 2025 Trail of Bits&lt;br&gt;
采用Hugo与Mainroad主题生成&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Trail of Bits 2020冬季实习项目亮点：从反编译器到智能合约安全</title>
        <link>http://localhost:1313/p/trail-of-bits-2020%E5%86%AC%E5%AD%A3%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E4%BB%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/</link>
        <pubDate>Sun, 03 Aug 2025 04:42:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/trail-of-bits-2020%E5%86%AC%E5%AD%A3%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E4%BB%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/</guid>
        <description>&lt;h3 id=&#34;aaron-yoo--anvill反编译器&#34;&gt;Aaron Yoo — Anvill反编译器
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;加州大学洛杉矶分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在Anvill反编译器中添加了一个生成LLVM位码函数&amp;quot;JSON规范&amp;quot;的工具。这些规范告知Anvill函数参数和返回值等重要值的物理位置（寄存器或内存）。典型规范示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;arch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;demangled_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;test(long, long)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_Z4testll&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;param1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;register&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RDI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过该项目，我深入了解了ABI规范，并解决了高级参数分散在多个机器寄存器中的技术难题。&lt;/p&gt;
&lt;h3 id=&#34;paweł-płatek--deepstate与python&#34;&gt;Paweł Płatek — DeepState与Python
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AGH科技大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我主要修复了DeepState Python部分的构建问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;：修正构建选项，增加仅构建示例的选项&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;：采用多阶段构建，支持Honggfuzz和Angora&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模糊测试执行器&lt;/strong&gt;：统一参数处理，重新实现日志系统和运行时统计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试体系&lt;/strong&gt;：创建基础测试用例验证执行器功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt;：拆分文档结构，新增模糊测试使用指南&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;philip-zhengyuan-wang--manticore&#34;&gt;Philip Zhengyuan Wang — Manticore
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;马里兰大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我开发了&amp;quot;mcorepv&amp;quot;工具实现Manticore的云化部署：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过Ansible自动配置DigitalOcean云主机&lt;/li&gt;
&lt;li&gt;使用Protobuf协议实时传输分析状态&lt;/li&gt;
&lt;li&gt;开发终端用户界面(TUI)监控运行状态&lt;/li&gt;
&lt;li&gt;实现工作目录自动同步和日志回传&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前待解决问题包括SSH端口转发优化和TUI信息展示改进。&lt;/p&gt;
&lt;h3 id=&#34;samuel-caccavale--go代码分析&#34;&gt;Samuel Caccavale — Go代码分析
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;东北大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发基于AST和SSA的Go代码扫描器，可检测以下模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 危险的类型断言使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;相比GoSec等工具，能更精确识别类型断言值的上下文使用安全。&lt;/p&gt;
&lt;h3 id=&#34;taylor-pothast--mishegos&#34;&gt;Taylor Pothast — Mishegos
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;范德堡大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将x86_64解码器模糊测试工具Mishegos的输出格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从JSON改为紧凑二进制格式&lt;/li&gt;
&lt;li&gt;开发mish2jsonl转换工具保持向后兼容&lt;/li&gt;
&lt;li&gt;更新分析工具处理新增的符号字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thomas-quig--crytic与slither&#34;&gt;Thomas Quig — Crytic与Slither
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;伊利诺伊大学香槟分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将Slither的智能合约升级检查集成到Crytic CI服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现合约版本选择界面&lt;/li&gt;
&lt;li&gt;检查代理合约模式的风险点（如存储变量对齐）&lt;/li&gt;
&lt;li&gt;输出标准化JSON格式的检测结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;william-wang--openssl与anselm&#34;&gt;William Wang — OpenSSL与Anselm
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;加州大学洛杉矶分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发OpenSSL API误用检测工具Anselm：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写LLVM Pass构建API调用图&lt;/li&gt;
&lt;li&gt;实现基础启发式规则（如密码上下文初始化检查）&lt;/li&gt;
&lt;li&gt;支持跨语言OpenSSL绑定分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来计划增强参数/返回值分析能力，完善开发者接口。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>以太坊智能合约的可复用属性测试指南</title>
        <link>http://localhost:1313/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sat, 02 Aug 2025 21:15:46 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BB%A5%E5%A4%AA%E5%9D%8A%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E7%9A%84%E5%8F%AF%E5%A4%8D%E7%94%A8%E5%B1%9E%E6%80%A7%E6%B5%8B%E8%AF%95%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h3 id=&#34;可复用的以太坊合约属性测试&#34;&gt;可复用的以太坊合约属性测试
&lt;/h3&gt;&lt;p&gt;随着智能合约安全技术的演进，基于属性的模糊测试已成为开发者和安全工程师的核心技术。该技术依赖代码属性（通常称为不变量）的创建，这些属性描述了代码的预期行为。为帮助社区定义属性，我们发布了168个预构建属性集，可用于指导我们的智能合约模糊测试工具Echidna，或直接通过单元测试使用。覆盖范围包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常见ERC代币接口合规性&lt;/li&gt;
&lt;li&gt;通用可测试安全属性&lt;/li&gt;
&lt;li&gt;定点数学运算测试属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;实战直播安排&#34;&gt;实战直播安排
&lt;/h4&gt;&lt;p&gt;为帮助掌握这些工具，我们将举办两场直播：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3月7日&lt;/strong&gt;：ERC20属性、示例用法和Echidna作弊码（Guillermo Larregay主讲）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3月14日&lt;/strong&gt;：ERC4626属性、示例用法及高效模糊测试技巧（Benjamin Samuels主讲）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;为什么需要使用&#34;&gt;为什么需要使用？
&lt;/h3&gt;&lt;p&gt;该资源库及配套研讨会将展示模糊测试如何提供比单元测试更高级别的安全保障。这些属性集可轻松集成到使用知名标准或常用库的项目中，当前包含：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ABDKMath64x64库&lt;/strong&gt;测试&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ERC-20代币标准&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ERC-4626代币化金库标准&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;核心测试内容&#34;&gt;核心测试内容
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;ERC20&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;标准接口函数属性&lt;/li&gt;
&lt;li&gt;基础合理性属性（如：用户余额不应超过代币供应量）&lt;/li&gt;
&lt;li&gt;可销毁、可铸造、可暂停等扩展功能属性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ERC4626&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;符合规范的舍入方向验证&lt;/li&gt;
&lt;li&gt;禁止回退函数的属性&lt;/li&gt;
&lt;li&gt;差分测试属性（如deposit()必须与previewDeposit()预测功能匹配）&lt;/li&gt;
&lt;li&gt;非规范安全属性（份额通胀攻击、代币授权检查等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;ABDKMath64x64&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;交换律、结合律、分配律和恒等属性&lt;/li&gt;
&lt;li&gt;差分测试属性（如2^(-x) == 1/2^(x)）&lt;/li&gt;
&lt;li&gt;输入范围回退验证&lt;/li&gt;
&lt;li&gt;区间属性（如min(x,y) &amp;lt;= avg(x,y) &amp;lt;= max(x,y)）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3 id=&#34;快速开始指南&#34;&gt;快速开始指南
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;安装Echidna&lt;/li&gt;
&lt;li&gt;导入属性库：
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hardhat项目&lt;/strong&gt;：&lt;code&gt;npm install https://github.com/crytic/properties.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Foundry项目&lt;/strong&gt;：&lt;code&gt;forge install crytic/properties&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按文档创建测试合约&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;erc20测试合约示例&#34;&gt;ERC20测试合约示例
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;pragma solidity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;^&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;./YetAnotherCashEquivalentToken.sol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ICryticTokenMock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;@crytic/properties/contracts/ERC20/external/util/ITokenMock.sol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;contract&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CryticERC20ExternalHarness&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CryticERC20ExternalBasicProperties&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;token&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ICryticTokenMock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CryticTokenMock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;echidna配置文件&#34;&gt;Echidna配置文件
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;corpusDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;tests/erc20/echidna-corpus&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;testMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;assertion&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;testLimit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0x10000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0x20000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;0x30000&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;运行命令：&lt;code&gt;echidna-test . --contract CryticERC20ExternalHarness --config echidna.yaml&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;未来计划&#34;&gt;未来计划
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;扩展数学库测试（如PRBMath）&lt;/li&gt;
&lt;li&gt;增加更多ERC标准测试&lt;/li&gt;
&lt;li&gt;构建AMM/流动性池等通用合约测试集&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;本文档所有技术内容均基于Trail of Bits官方发布材料，无AI虚构内容。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>揭秘Aave可升级合约漏洞 - 代理模式下的致命缺陷</title>
        <link>http://localhost:1313/p/%E6%8F%AD%E7%A7%98aave%E5%8F%AF%E5%8D%87%E7%BA%A7%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7/</link>
        <pubDate>Sat, 02 Aug 2025 21:04:25 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%8F%AD%E7%A7%98aave%E5%8F%AF%E5%8D%87%E7%BA%A7%E5%90%88%E7%BA%A6%E6%BC%8F%E6%B4%9E-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F%E4%B8%8B%E7%9A%84%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7/</guid>
        <description>&lt;h1 id=&#34;breaking-aave-upgradeability&#34;&gt;Breaking Aave Upgradeability
&lt;/h1&gt;&lt;p&gt;2020年12月3日，Aave部署了其代码库的V2版本。虽然我们未被雇佣进行代码审计，但在次日我们对其进行了简要检查。我们迅速发现了一个同时影响V1和V2线上合约的漏洞并立即报告。Aave团队在收到分析报告后一小时内就修复了该漏洞。若被利用，该漏洞将摧毁Aave系统并影响外部DeFi合约中的资金。&lt;/p&gt;
&lt;p&gt;尽管有五家安全公司（包括使用形式化验证的机构）审计过Aave代码库，但此漏洞仍被遗漏。本文将详述该漏洞原理、为何未被发现以及经验教训。同时我们开源了新的Slither检测器以提升以太坊生态安全性。&lt;/p&gt;
&lt;h2 id=&#34;漏洞原理&#34;&gt;漏洞原理
&lt;/h2&gt;&lt;p&gt;Aave使用了我们此前多次讨论的delegatecall代理模式。该模式将组件分为：1)包含实现逻辑的逻辑合约；2)包含数据并通过delegatecall与逻辑合约交互的代理合约。用户与代理合约交互，而代码在逻辑合约执行。以下是简化示意图：&lt;/p&gt;
&lt;p&gt;在Aave中，LendingPool(LendingPool.sol)是采用delegatecall代理的可升级组件。该漏洞依赖两个关键特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;逻辑合约的函数（包括初始化函数）可直接调用&lt;/li&gt;
&lt;li&gt;借贷池自身具有delegatecall能力&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;可升级合约初始化&#34;&gt;可升级合约初始化
&lt;/h2&gt;&lt;p&gt;这种升级模式的限制在于代理合约无法依赖逻辑合约的构造函数进行初始化。因此状态变量和初始设置必须在公开的初始化函数中完成，这些函数无法享受构造函数的保护机制。&lt;/p&gt;
&lt;p&gt;在LendingPool中，initialize函数设置provider地址(_addressesProvider)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ILendingPoolAddressesProvider&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initializer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;_addressesProvider&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;provider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;initializer修饰符防止多次调用initialize，要求满足以下条件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;initializing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;isConstructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;revision&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lastInitializedRevision&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s&#34;&gt;&amp;#39;Contract instance has already been initialized&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;initializing允许同一交易内多次调用&lt;/li&gt;
&lt;li&gt;isConstructor()供代理合约执行代码所需&lt;/li&gt;
&lt;li&gt;revision &amp;gt; lastInitializedRevision允许合约升级时再次调用初始化函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;通过代理调用时工作正常，但第三条也允许任何人直接调用逻辑合约的initialize函数。当逻辑合约部署后：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;revision为0x2&lt;/li&gt;
&lt;li&gt;lastInitializedRevision为0x0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;漏洞本质&lt;/strong&gt;：任何人都能设置LendingPool逻辑合约的_addressesProvider。&lt;/p&gt;
&lt;h2 id=&#34;任意delegatecall&#34;&gt;任意delegatecall
&lt;/h2&gt;&lt;p&gt;LendingPool.liquidationCall直接delegatecall到_addressProvider返回的地址：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collateralManager&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_addressesProvider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getLendingPoolCollateralManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bytes&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;memory&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;collateralManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;delegatecall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;abi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;encodeWithSignature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;s&#34;&gt;&amp;#39;liquidationCall(address,address,address,uint256,bool)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;collateralAsset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;debtAsset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;debtToCover&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;receiveAToken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这使得攻击者可：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化LendingPool逻辑合约&lt;/li&gt;
&lt;li&gt;设置受控的addresses provider&lt;/li&gt;
&lt;li&gt;执行任意代码（包括selfdestruct）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;攻击场景&lt;/strong&gt;：任何人都能销毁借贷池逻辑合约。简化示意图如下：&lt;/p&gt;
&lt;h2 id=&#34;存在性检查缺失&#34;&gt;存在性检查缺失
&lt;/h2&gt;&lt;p&gt;该漏洞本身已足够严重（可类比Parity事件）。但OpenZeppelin代理合约的使用放大了危害。我们2018年的博文曾指出：对空合约的delegatecall会返回success但不会执行任何代码。尽管有此警告，OpenZeppelin仍未修复其代理合约的回退函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-solidity&#34; data-lang=&#34;solidity&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;_delegate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;address&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;assembly&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;calldatacopy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;calldatasize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;ow&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delegatecall&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;gas&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;implementation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;calldatasize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;若代理合约delegatecall到已被销毁的逻辑合约，代理将返回success但实际未执行任何代码。虽然Aave可通过更新代理指向新逻辑合约来修复，但在漏洞存在期间，任何第三方合约调用借贷池时都会误认为代码已执行。&lt;/p&gt;
&lt;h2 id=&#34;受影响合约&#34;&gt;受影响合约
&lt;/h2&gt;&lt;p&gt;所有AToken：用户燃烧AToken但无法取回底层资产
WETHGateway：存款会存储在网关中导致资产被盗
基于Aave Credit Delegation v2的所有代码库
其他受影响的外部合约包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DefiSaver v1/v2&lt;/li&gt;
&lt;li&gt;PieDao等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这凸显了DeFi可组合性的潜在风险。&lt;/p&gt;
&lt;h2 id=&#34;修复建议&#34;&gt;修复建议
&lt;/h2&gt;&lt;p&gt;幸运的是漏洞在被利用前就被修复。Aave调用了两个版本借贷池的initialize函数进行加固：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;V1修复时间：2020-12-04 19:34:26 UTC&lt;/li&gt;
&lt;li&gt;V2修复时间：2020-12-04 19:53:00 UTC&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;长期建议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在所有逻辑合约中添加构造函数禁用initialize函数&lt;/li&gt;
&lt;li&gt;在代理合约的回退函数中添加合约存在性检查&lt;/li&gt;
&lt;li&gt;仔细审查delegatecall陷阱并使用slither-check-upgradeability&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;形式化验证非万能&#34;&gt;形式化验证非万能
&lt;/h2&gt;&lt;p&gt;Aave代码库经过&amp;quot;形式化验证&amp;quot;，但该漏洞证明安全属性并非绝对。验证报告中的属性（如操作成功时返回true不回滚）在逻辑合约被销毁时就会失效。可能原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;验证未考虑可升级性&lt;/li&gt;
&lt;li&gt;验证工具不支持复杂合约交互&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;形式化技术虽好，但需注意其覆盖范围有限。相比之下，自动化工具（如Slither）和人工审计能以较少资源实现更高安全保证。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;Aave反应迅速值得肯定，但其他项目就没这么幸运。我们建议开发者在部署前：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;参考我们的安全清单和培训材料&lt;/li&gt;
&lt;li&gt;将Slither加入CI流程并检查所有报告&lt;/li&gt;
&lt;li&gt;给予安全团队充足的审计时间&lt;/li&gt;
&lt;li&gt;谨慎处理可升级性，至少阅读相关反模式文档&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们通过公开此漏洞和Slither检测器希望预防类似错误。安全是持续过程，建议项目启动前联系我们进行安全审计。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>超越私钥风险：智能合约安全成熟度进阶指南</title>
        <link>http://localhost:1313/p/%E8%B6%85%E8%B6%8A%E7%A7%81%E9%92%A5%E9%A3%8E%E9%99%A9%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8%E6%88%90%E7%86%9F%E5%BA%A6%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sat, 02 Aug 2025 20:14:41 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%B6%85%E8%B6%8A%E7%A7%81%E9%92%A5%E9%A3%8E%E9%99%A9%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8%E6%88%90%E7%86%9F%E5%BA%A6%E8%BF%9B%E9%98%B6%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h1 id=&#34;超越私钥风险智能合约安全成熟度进阶&#34;&gt;超越私钥风险：智能合约安全成熟度进阶
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;&amp;ldquo;找出所有漏洞！&amp;rdquo;&lt;/strong&gt;&lt;br&gt;
这是大多数协议在部署智能合约前的安全口号。团队投入巨资进行审计、竞赛、模糊测试和形式化验证，试图发现每个潜在漏洞。但去年加密货币被盗的最大原因并非智能合约漏洞——而是私钥泄露！&lt;/p&gt;
&lt;h2 id=&#34;私钥攻击已成头号威胁&#34;&gt;私钥攻击已成头号威胁
&lt;/h2&gt;&lt;p&gt;根据Chainalysis 2024年报告，43.8%的被盗资金源于私钥泄露，是其他攻击类型的五倍之多。私钥泄露已成为每个工程师设计新智能合约时必须考虑的新兴威胁。&lt;/p&gt;
&lt;p&gt;传统区块链安全审计往往忽视架构层面的访问控制风险。与其他行业不同，区块链安全评估很少将权限升级和访问控制设计作为核心关注点。Trail of Bits通过代码库成熟度评估标记架构问题，但多数协议直到开发生命周期末期才寻求外部审查。&lt;/p&gt;
&lt;h2 id=&#34;案例研究超额抵押借贷平台&#34;&gt;案例研究：超额抵押借贷平台
&lt;/h2&gt;&lt;p&gt;我们以理论上的超额抵押借贷平台为例，展示不同成熟度的访问控制设计：&lt;/p&gt;
&lt;h3 id=&#34;等级1高风险暴露---单一eoa控制器&#34;&gt;等级1：高风险暴露 - 单一EOA控制器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;单个外部账户(EOA)控制所有管理功能&lt;/li&gt;
&lt;li&gt;私钥可能存储在联网的软件钱包中&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度等级1&lt;/strong&gt;：单点故障，一旦私钥泄露即导致协议完全沦陷&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;等级2基础缓解---中心化多签&#34;&gt;等级2：基础缓解 - 中心化多签
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;管理权转移至多签钱包（如M-of-N Safe Wallet）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度等级2&lt;/strong&gt;：需要多个签名，但仍存在单一控制点&lt;/li&gt;
&lt;li&gt;改进：单个签名者密钥泄露不足以致命&lt;/li&gt;
&lt;li&gt;风险：足够多签名者被攻陷仍可立即执行恶意操作&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;等级3增强控制---时间锁与角色分离&#34;&gt;等级3：增强控制 - 时间锁与角色分离
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实施时间锁合约（执行延迟）和最小权限原则(PoLP)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度等级3&lt;/strong&gt;：深度防御体系&lt;/li&gt;
&lt;li&gt;典型协议：Aave、Compound Finance、Lido&lt;/li&gt;
&lt;li&gt;关键角色：
&lt;ul&gt;
&lt;li&gt;核心系统角色（合约升级）：高门槛多签+长时间锁&lt;/li&gt;
&lt;li&gt;运营角色（日常配置）：中等时间锁和签名门槛&lt;/li&gt;
&lt;li&gt;暂停监护角色（紧急暂停）：无时间锁+低门槛&lt;/li&gt;
&lt;li&gt;取消监护角色（中止交易）：安全团队控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;等级4终极形态---彻底不可变与用户主权&#34;&gt;等级4：终极形态 - 彻底不可变与用户主权
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;完全消除管理操作需求&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;成熟度等级4&lt;/strong&gt;：近乎无控制点的不可变系统&lt;/li&gt;
&lt;li&gt;典型协议：Uniswap、Liquity&lt;/li&gt;
&lt;li&gt;设计挑战：
&lt;ul&gt;
&lt;li&gt;合约完全不可升级（需部署新系统）&lt;/li&gt;
&lt;li&gt;资产上架需独立部署新市场&lt;/li&gt;
&lt;li&gt;风险参数永久固定或算法决定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;优势：彻底消除访问控制风险&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;设计韧性而非被动应对&#34;&gt;设计韧性而非被动应对
&lt;/h2&gt;&lt;p&gt;2024年43.8%的被盗资金证明，忽视架构级访问控制已不可接受。建议立即行动：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对照成熟度框架评估当前协议&lt;/li&gt;
&lt;li&gt;为高风险功能实施时间锁并确保监控&lt;/li&gt;
&lt;li&gt;按最小权限原则划分特权功能&lt;/li&gt;
&lt;li&gt;考虑部分组件采用等级4不可变模式&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在Trail of Bits，我们提倡这种安全整体观。通过设计审查和早期咨询等服务，帮助团队主动解决这些基础问题。构建安全的去中心化系统不仅需要漏洞狩猎，更需从第一天就开始设计运营韧性。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
