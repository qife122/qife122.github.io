<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>模糊测试 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/</link>
        <description>Recent content in 模糊测试 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Mon, 04 Aug 2025 22:02:22 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>LLAMA：基于LLM引导种子生成的多反馈智能合约模糊测试框架</title>
        <link>http://localhost:1313/p/llama%E5%9F%BA%E4%BA%8Ellm%E5%BC%95%E5%AF%BC%E7%A7%8D%E5%AD%90%E7%94%9F%E6%88%90%E7%9A%84%E5%A4%9A%E5%8F%8D%E9%A6%88%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</link>
        <pubDate>Mon, 04 Aug 2025 22:02:22 +0800</pubDate>
        
        <guid>http://localhost:1313/p/llama%E5%9F%BA%E4%BA%8Ellm%E5%BC%95%E5%AF%BC%E7%A7%8D%E5%AD%90%E7%94%9F%E6%88%90%E7%9A%84%E5%A4%9A%E5%8F%8D%E9%A6%88%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</guid>
        <description>&lt;h1 id=&#34;llama基于llm引导种子生成的多反馈智能合约模糊测试框架&#34;&gt;LLAMA：基于LLM引导种子生成的多反馈智能合约模糊测试框架
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;摘要&lt;/strong&gt;&lt;br&gt;
智能合约在区块链生态系统中发挥着关键作用，而模糊测试仍是保障其安全的重要手段。尽管变异调度是影响模糊测试效果的关键因素，现有模糊测试工具主要关注种子调度和生成，而变异调度却鲜有研究。本文提出基于大语言模型（LLMs）的多反馈智能合约模糊测试框架LLAMA，整合了LLMs、进化变异策略和混合测试技术。&lt;/p&gt;
&lt;p&gt;LLAMA的核心组件包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;分层提示策略&lt;/strong&gt;：指导LLMs生成语义有效的初始种子，结合轻量级预模糊测试阶段筛选高潜力输入；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;多反馈优化机制&lt;/strong&gt;：利用运行时覆盖率和依赖反馈，同步改进种子生成、种子选择和变异调度；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;进化模糊测试引擎&lt;/strong&gt;：根据有效性动态调整变异算子概率，并引入符号执行以突破停滞状态和发现深层漏洞。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;实验结果表明，LLAMA在覆盖率和漏洞检测方面均优于最先进的模糊测试工具。具体而言，其指令覆盖率达到91%，分支覆盖率达90%，并能检测出跨多个类别的148个已知漏洞中的132个。这些结果证明了LLAMA在实际智能合约安全测试场景中的有效性、适应性和实用性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主题分类&lt;/strong&gt;&lt;br&gt;
软件工程（cs.SE）；密码学与安全（cs.CR）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>智能模糊测试革命 - 自动化漏洞挖掘的技术演进</title>
        <link>http://localhost:1313/p/%E6%99%BA%E8%83%BD%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E9%9D%A9%E5%91%BD-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E7%9A%84%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/</link>
        <pubDate>Sun, 03 Aug 2025 15:17:11 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%99%BA%E8%83%BD%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E9%9D%A9%E5%91%BD-%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E7%9A%84%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B/</guid>
        <description>&lt;h2 id=&#34;智能模糊测试革命&#34;&gt;智能模糊测试革命
&lt;/h2&gt;&lt;p&gt;我最近有幸在BSidesLisbon大会上发表主题演讲。会议非常精彩，特别感谢Bruno Morisson的邀请。如果你喜欢波特酒，这个会议绝对不容错过！我建议附近地区的人明年都来参加。&lt;/p&gt;
&lt;p&gt;我认为有必要将自动化漏洞发现的最新进展置于更广阔的背景下审视。如果你没有密切关注，可能会错过网络大挑战（Cyber Grand Challenge）、AFL和libFuzzer等重要进展，但它们对我们行业的潜在影响是巨大的。&lt;/p&gt;
&lt;p&gt;在IT Defense会议上再次演讲后，我现在想与互联网分享这个主题。你可以通过下方视频了解我对该研究领域发展历程、现状和未来方向的见解。请欣赏！&lt;/p&gt;
&lt;h3 id=&#34;技术突破&#34;&gt;技术突破
&lt;/h3&gt;&lt;p&gt;过去两年在自动化安全测试领域取得的进步，超过了之前十年的总和。AFL将业界最佳实践集成到一个易用工具中，DARPA网络大挑战提供了可靠的竞争基准和新研究资金，而Project Springfield（即SAGE）现已向公众开放。这些新技术的普及可能对我们行业产生巨大影响。&lt;/p&gt;
&lt;p&gt;这些工具如何工作？与过去的方法有何不同？它们的优势和局限在哪里？现在如何使用这些工具？这些技术将如何发展？还需要哪些进一步开发？最后，人类在安全开发生命周期中还能主导多久？&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;%e9%93%be%e6%8e%a5&#34; &gt;点击此处查看完整幻灯片&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;威斯康星大学模糊测试课程项目(1988)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://pages.cs.wisc.edu/~bart/fuzz/CS736-Projects-f1988.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PROTOS - 消除软件漏洞的系统方法(2002)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.ee.oulu.fi/roles/ouspg/PROTOS_MSR2002-protos&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.ee.oulu.fi/roles/ouspg/PROTOS_MSR2002-protos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;基于块的协议分析在安全测试中的优势(2002)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://www.immunitysec.com/downloads/advantages_of_block_based_analysis.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.immunitysec.com/downloads/advantages_of_block_based_analysis.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DART: 定向自动化随机测试(2005)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://wkr.io/public/ref/godefroid2005dart.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://wkr.io/public/ref/godefroid2005dart.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EXE: 自动生成致命输入(2006)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://web.stanford.edu/~engler/exe-ccs-06.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://web.stanford.edu/~engler/exe-ccs-06.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;EXE: 十年后(2016)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://ccadar.blogspot.com/2016/11/exe-10-years-later.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ccadar.blogspot.com/2016/11/exe-10-years-later.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;自动化白盒模糊测试(2008)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://patricegodefroid.github.io/public_psfiles/ndss2008.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://patricegodefroid.github.io/public_psfiles/ndss2008.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;American Fuzzy Lop (AFL)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://lcamtuf.coredump.cx/afl/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://lcamtuf.coredump.cx/afl/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DARPA网络大挑战参赛者门户(2013)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://archive.darpa.mil/CyberGrandChallenge_CompetitorSite/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://archive.darpa.mil/CyberGrandChallenge_CompetitorSite/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;漏洞利用与状态机(2011)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://archives.scovetta.com/pub/conferences/infiltrate_2011/Fundamentals_of_exploitation_revisited.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://archives.scovetta.com/pub/conferences/infiltrate_2011/Fundamentals_of_exploitation_revisited.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;你的工具比我的好？证明它(2016)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.trailofbits.com/2016/08/01/your-tool-works-better-than-mine-prove-it/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.trailofbits.com/2016/08/01/your-tool-works-better-than-mine-prove-it/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;微软Springfield(2016)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/en-us/springfield/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.microsoft.com/en-us/springfield/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google OSS-Fuzz(2016)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/google/oss-fuzz&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/google/oss-fuzz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;LLVM libFuzzer&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://llvm.org/docs/LibFuzzer.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://llvm.org/docs/LibFuzzer.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GRR - DECREE二进制文件的高通量模糊测试器和模拟器&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/grr&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/trailofbits/grr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Manticore - Python符号执行平台&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/manticore&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/trailofbits/manticore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;McSema - x86到机器码翻译框架&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/mcsema&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/trailofbits/mcsema&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DARPA多操作系统挑战集&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/trailofbits/cb-multios&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/trailofbits/cb-multios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Trail of Bits关于网络大挑战的出版物&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://blog.trailofbits.com/category/cyber-grand-challenge/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://blog.trailofbits.com/category/cyber-grand-challenge/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;勘误&#34;&gt;勘误
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;奥卢大学位于芬兰&lt;/li&gt;
&lt;li&gt;威斯康星大学在1988年就布置了模糊测试作业&lt;/li&gt;
&lt;li&gt;SV-Comp用于软件验证，也存在机器学习竞赛&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你喜欢这篇文章，请分享至：
[Twitter] [LinkedIn] [GitHub] [Mastodon] [Hacker News]&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Trail of Bits 2020冬季实习项目亮点：从反编译器到智能合约安全</title>
        <link>http://localhost:1313/p/trail-of-bits-2020%E5%86%AC%E5%AD%A3%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E4%BB%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/</link>
        <pubDate>Sun, 03 Aug 2025 04:42:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/trail-of-bits-2020%E5%86%AC%E5%AD%A3%E5%AE%9E%E4%B9%A0%E9%A1%B9%E7%9B%AE%E4%BA%AE%E7%82%B9%E4%BB%8E%E5%8F%8D%E7%BC%96%E8%AF%91%E5%99%A8%E5%88%B0%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6%E5%AE%89%E5%85%A8/</guid>
        <description>&lt;h3 id=&#34;aaron-yoo--anvill反编译器&#34;&gt;Aaron Yoo — Anvill反编译器
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;加州大学洛杉矶分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在Anvill反编译器中添加了一个生成LLVM位码函数&amp;quot;JSON规范&amp;quot;的工具。这些规范告知Anvill函数参数和返回值等重要值的物理位置（寄存器或内存）。典型规范示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;arch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;amd64&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;functions&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;demangled_name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;test(long, long)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;_Z4testll&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;parameters&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;param1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;register&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;RDI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;l&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过该项目，我深入了解了ABI规范，并解决了高级参数分散在多个机器寄存器中的技术难题。&lt;/p&gt;
&lt;h3 id=&#34;paweł-płatek--deepstate与python&#34;&gt;Paweł Płatek — DeepState与Python
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;AGH科技大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我主要修复了DeepState Python部分的构建问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;CMake&lt;/strong&gt;：修正构建选项，增加仅构建示例的选项&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Docker&lt;/strong&gt;：采用多阶段构建，支持Honggfuzz和Angora&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模糊测试执行器&lt;/strong&gt;：统一参数处理，重新实现日志系统和运行时统计&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试体系&lt;/strong&gt;：创建基础测试用例验证执行器功能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文档&lt;/strong&gt;：拆分文档结构，新增模糊测试使用指南&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;philip-zhengyuan-wang--manticore&#34;&gt;Philip Zhengyuan Wang — Manticore
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;马里兰大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我开发了&amp;quot;mcorepv&amp;quot;工具实现Manticore的云化部署：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过Ansible自动配置DigitalOcean云主机&lt;/li&gt;
&lt;li&gt;使用Protobuf协议实时传输分析状态&lt;/li&gt;
&lt;li&gt;开发终端用户界面(TUI)监控运行状态&lt;/li&gt;
&lt;li&gt;实现工作目录自动同步和日志回传&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当前待解决问题包括SSH端口转发优化和TUI信息展示改进。&lt;/p&gt;
&lt;h3 id=&#34;samuel-caccavale--go代码分析&#34;&gt;Samuel Caccavale — Go代码分析
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;东北大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发基于AST和SSA的Go代码扫描器，可检测以下模式：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Println&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;unsafe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 危险的类型断言使用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;相比GoSec等工具，能更精确识别类型断言值的上下文使用安全。&lt;/p&gt;
&lt;h3 id=&#34;taylor-pothast--mishegos&#34;&gt;Taylor Pothast — Mishegos
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;范德堡大学&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将x86_64解码器模糊测试工具Mishegos的输出格式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从JSON改为紧凑二进制格式&lt;/li&gt;
&lt;li&gt;开发mish2jsonl转换工具保持向后兼容&lt;/li&gt;
&lt;li&gt;更新分析工具处理新增的符号字段&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;thomas-quig--crytic与slither&#34;&gt;Thomas Quig — Crytic与Slither
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;伊利诺伊大学香槟分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;将Slither的智能合约升级检查集成到Crytic CI服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现合约版本选择界面&lt;/li&gt;
&lt;li&gt;检查代理合约模式的风险点（如存储变量对齐）&lt;/li&gt;
&lt;li&gt;输出标准化JSON格式的检测结果&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;william-wang--openssl与anselm&#34;&gt;William Wang — OpenSSL与Anselm
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;加州大学洛杉矶分校&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;开发OpenSSL API误用检测工具Anselm：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写LLVM Pass构建API调用图&lt;/li&gt;
&lt;li&gt;实现基础启发式规则（如密码上下文初始化检查）&lt;/li&gt;
&lt;li&gt;支持跨语言OpenSSL绑定分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;未来计划增强参数/返回值分析能力，完善开发者接口。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>使用AFL模糊测试《反恐精英：全球攻势》地图文件的技术实践</title>
        <link>http://localhost:1313/p/%E4%BD%BF%E7%94%A8afl%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E5%8F%8D%E6%81%90%E7%B2%BE%E8%8B%B1%E5%85%A8%E7%90%83%E6%94%BB%E5%8A%BF%E5%9C%B0%E5%9B%BE%E6%96%87%E4%BB%B6%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Sat, 02 Aug 2025 06:54:57 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BD%BF%E7%94%A8afl%E6%A8%A1%E7%B3%8A%E6%B5%8B%E8%AF%95%E5%8F%8D%E6%81%90%E7%B2%BE%E8%8B%B1%E5%85%A8%E7%90%83%E6%94%BB%E5%8A%BF%E5%9C%B0%E5%9B%BE%E6%96%87%E4%BB%B6%E7%9A%84%E6%8A%80%E6%9C%AF%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h1 id=&#34;使用afl模糊测试反恐精英全球攻势地图文件&#34;&gt;使用AFL模糊测试《反恐精英：全球攻势》地图文件
&lt;/h1&gt;&lt;p&gt;RealWorldCTF 2018有一个非常有趣的挑战叫做&amp;quot;P90 Rush B&amp;quot;，这是对Valve游戏《反恐精英：全球攻势》中一种战术的影射。该挑战要求发现并利用CS:GO服务器使用的地图文件加载器中的漏洞。&lt;/p&gt;
&lt;p&gt;在CTF期间，我利用了一个栈缓冲区溢出漏洞，后来另一个团队在他们的报告中很好地描述了这个漏洞。由于这个漏洞也影响了官方的CS:GO Windows客户端，符合Valve的漏洞赏金计划条件，实际上它只是一个旧报告的小变种，所以我在CTF结束后很快报告了它，并迅速得到了修复。&lt;/p&gt;
&lt;h2 id=&#34;bsp文件格式与攻击面&#34;&gt;BSP文件格式与攻击面
&lt;/h2&gt;&lt;p&gt;CS:GO（可能所有Source引擎游戏）使用的地图文件格式称为BSP，是二进制空间分割的缩写，这是一种方便的n维空间对象表示方法。然而，这种格式支持的远不止3D信息。BSP文件由服务器和客户端共同处理，因为两者都需要地图信息的某个子集来执行各自的任务。这是一个远程攻击面，因为客户端会在服务器发起的地图变更时从服务器下载未知地图。&lt;/p&gt;
&lt;h2 id=&#34;模糊测试设置&#34;&gt;模糊测试设置
&lt;/h2&gt;&lt;p&gt;为了简单起见，我决定模糊测试Linux服务器二进制文件，而不是实际的客户端（也可以在Linux上运行）。用这种方法显然无法发现客户端特有的问题，但我希望能找到共享代码中的低悬果实。&lt;/p&gt;
&lt;p&gt;我编写了一个简单的包装器来处理服务器二进制文件使用的共享库，最重要的几个是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;engine.so - 主要Source引擎代码（包含BSP解析器）&lt;/li&gt;
&lt;li&gt;dedicated.so - 专用服务器实现（包含应用程序入口点）&lt;/li&gt;
&lt;li&gt;libtier0.so - 可能与Steam/应用程序管理相关&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;afl修改&#34;&gt;AFL修改
&lt;/h2&gt;&lt;p&gt;我对AFL做了一些简单的修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入文件必须以.bsp结尾才能被GetModelForName正确解析&lt;/li&gt;
&lt;li&gt;需要能够指定自定义的fork服务器启动点&lt;/li&gt;
&lt;li&gt;增加等待fork时的超时乘数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;漏洞分类与根因分析&#34;&gt;漏洞分类与根因分析
&lt;/h2&gt;&lt;p&gt;我们需要将&amp;quot;好&amp;quot;的漏洞与不感兴趣的漏洞（如纯越界读取）分开。我基于调用栈进行了简单的去重，然后在Valgrind中运行每个独特样本。&lt;/p&gt;
&lt;h2 id=&#34;经验总结&#34;&gt;经验总结
&lt;/h2&gt;&lt;p&gt;从这个小型项目中我学到了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AFL在QEMU模式下非常灵活，可以攻击特定代码段&lt;/li&gt;
&lt;li&gt;输入文件大小非常重要，从300KB降到16KB后性能至少提高了5倍&lt;/li&gt;
&lt;li&gt;分类对于筛选以前未经过模糊测试的代码库非常重要&lt;/li&gt;
&lt;li&gt;堆上的内存损坏不是一个安全问题 :)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;示例漏洞cvirtualterrainlevelinit中的堆缓冲区溢出&#34;&gt;示例漏洞：CVirtualTerrain::LevelInit中的堆缓冲区溢出
&lt;/h2&gt;&lt;p&gt;在CVirtualTerrain::LevelInit中发生堆缓冲区溢出，因为dphysdisp_t::numDisplacements变量可能大于g_DispCollTreeCount，而检查这种情况的断言在发布版本中不存在。攻击者可以很大程度上控制堆内容，因此很可能被利用，特别是在Windows 7上许多模块没有启用ASLR的情况下。&lt;/p&gt;
&lt;p&gt;[附上一个BSP文件，其中numDisplacements = 0xffff且g_DispCollTreeCount = 2，可以可靠地使csgo.exe崩溃]&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
