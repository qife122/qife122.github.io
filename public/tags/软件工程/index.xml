<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>软件工程 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</link>
        <description>Recent content in 软件工程 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 20:29:16 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>代码与善意：软件工程中的人文关怀</title>
        <link>http://localhost:1313/p/%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%96%84%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BA%BA%E6%96%87%E5%85%B3%E6%80%80/</link>
        <pubDate>Sat, 09 Aug 2025 20:29:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%96%84%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BA%BA%E6%96%87%E5%85%B3%E6%80%80/</guid>
        <description>&lt;h2 id=&#34;代码与善意&#34;&gt;代码与善意
&lt;/h2&gt;&lt;p&gt;人们很容易将软件开发视为纯粹的技术活动，认为人类因素无关紧要，一切只关乎计算机。然而事实恰恰相反——软件工程本质上是关于人的学科。&lt;/p&gt;
&lt;p&gt;多年来，许多试图修复软件开发问题的尝试之所以失败，正是因为只关注系统技术层面，而忽略了编写代码的是人类这一事实。当你看到有人更关心优化而非代码可读性，当你遇到拒绝写注释却花整天时间压缩shell脚本行数的人，当你遇见不善沟通却崇拜小体积二进制文件的同事——这些都是这个问题的不同症状。&lt;/p&gt;
&lt;h3 id=&#34;代码即思想&#34;&gt;代码即思想
&lt;/h3&gt;&lt;p&gt;软件系统由人编写，被人阅读，被人修改，被人理解（或不被理解）。它们是开发者思维的直接体现，是我们地球上最接近原始思想表达的形式。软件本身不具备人性、生命、智能、情感、善恶——这些特质属于人类。软件完全且仅用于服务人类。&lt;/p&gt;
&lt;h3 id=&#34;评审的艺术&#34;&gt;评审的艺术
&lt;/h3&gt;&lt;p&gt;假设有人写了段糟糕代码，你有两种反馈方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;难以置信你觉得这是个好主意。你读过软件设计书籍吗？显然你不该这么做&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;这行代码难以理解，而且存在重复。能否重构得更清晰？&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键区别在于：第一种是对开发者的攻击，第二种是对代码的改进建议。更重要的是——不要做个混蛋。第一种回应显然粗鲁，它不会让人愿意与你合作、贡献更多代码或寻求进步。而第二种方式既指出了问题，又维护了协作关系。&lt;/p&gt;
&lt;h3 id=&#34;善意的价值&#34;&gt;善意的价值
&lt;/h3&gt;&lt;p&gt;阻止提交糟糕代码的根本原因本就与人相关：或是为了终端用户，或是为了其他需要阅读系统的开发者。通常两者兼有，因为构建可维护系统完全是为了持续有效地帮助用户。&lt;/p&gt;
&lt;p&gt;虽然阅读代码和使用程序的人很多，而被评审者只是个体，但为何要在非必要时刻薄？为何要制造让团队成员害怕犯错而非乐于做对事情的环境？&lt;/p&gt;
&lt;h3 id=&#34;超越代码评审&#34;&gt;超越代码评审
&lt;/h3&gt;&lt;p&gt;这延伸到代码评审之外：其他工程师的意见值得倾听，无论你是否同意。礼貌回应他们的陈述，以建设性方式交流想法。有时人们会愤怒——请理解。有时你也会愤怒，那时你同样希望队友的理解。&lt;/p&gt;
&lt;p&gt;这不是说&amp;quot;所有人永远正确&amp;quot;或&amp;quot;永不指正错误&amp;quot;。世界上和软件工程中确实存在许多需要拒绝的错误事物。但即使面对真正的错误，粗鲁也无济于事——他们不需要你的仇恨，而需要你的理解和帮助。&lt;/p&gt;
&lt;p&gt;与人为善，协作共进，方能铸就更优秀的软件。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>软件设计方程：量化开发决策的数学之美</title>
        <link>http://localhost:1313/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E7%A8%8B%E9%87%8F%E5%8C%96%E5%BC%80%E5%8F%91%E5%86%B3%E7%AD%96%E7%9A%84%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/</link>
        <pubDate>Fri, 08 Aug 2025 07:05:19 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1%E6%96%B9%E7%A8%8B%E9%87%8F%E5%8C%96%E5%BC%80%E5%8F%91%E5%86%B3%E7%AD%96%E7%9A%84%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/</guid>
        <description>&lt;h3 id=&#34;软件设计方程&#34;&gt;软件设计方程
&lt;/h3&gt;&lt;p&gt;2010年1月6日 by Max Kanat-Alexander&lt;/p&gt;
&lt;p&gt;今天我在研究一个可能解释几乎所有软件设计原则的方程。虽然它可能无法用具体数字求解，但清晰地展示了软件开发决策中各因素的相互关系。&lt;/p&gt;
&lt;h4 id=&#34;核心变量定义&#34;&gt;核心变量定义
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现潜在价值(Vi)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;衡量实现某功能的&amp;quot;价值&amp;quot;量级&lt;/li&gt;
&lt;li&gt;示例：防止用户死亡的功能价值极高，修正拼写错误的价值极低&lt;/li&gt;
&lt;li&gt;对程序员而言，灵活性是主要价值维度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;价值实现概率(Pv)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该价值被终端用户（功能需求）或其他开发者（设计决策）实际触发的概率&lt;/li&gt;
&lt;li&gt;如支持外星猿类交互的代码概率趋近0，而全员可用的功能概率为100%&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;实现成本(Ei)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一次性投入的工作量（通常以人时计）&lt;/li&gt;
&lt;li&gt;包括首次实现所需的所有开发成本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;维护成本(Em)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随时间累积的维护工作量&lt;/li&gt;
&lt;li&gt;需考虑对系统整体维护复杂度的增量影响&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;基本方程&#34;&gt;基本方程
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;实现合意度 D = (Pv × Vi) / (Ei + Em)&lt;/strong&gt;&lt;br&gt;
即：决策合意度与价值概率和潜在价值成正比，与总成本（实现+维护）成反比。&lt;/p&gt;
&lt;h4 id=&#34;时间维度修正&#34;&gt;时间维度修正
&lt;/h4&gt;&lt;p&gt;原始方程缺失关键时间因子，修正后的逻辑关系：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;实现成本(Ei)&lt;/strong&gt;：一次性固定成本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;潜在价值(Vi)&lt;/strong&gt;：假设为静态值（或通过维护保持恒定）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;价值概率(Pv)&lt;/strong&gt;：随时间趋向100%&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维护成本(Em)&lt;/strong&gt;：随时间趋向无限大&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;关键洞见&#34;&gt;关键洞见
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;维护系数&lt;/strong&gt;：不同设计的维护成本增长率差异巨大，简单代码的维护系数极低&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;技术杠杆效应&lt;/strong&gt;：编程语言/框架的微小改进能显著降低Em，从而指数级提升D值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;简洁性本质&lt;/strong&gt;：代码简洁性实质是控制维护系数的核心手段&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;实践启示&#34;&gt;实践启示
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;当Pv高且Em低时，决策简化为Vi与Ei的权衡&lt;/li&gt;
&lt;li&gt;当Pv低且Em高时，需接近无限的Vi才值得实现&lt;/li&gt;
&lt;li&gt;解释为何Ruby on Rails等框架能改变行业：通过降低Em释放创新潜力&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;方程演进&#34;&gt;方程演进
&lt;/h4&gt;&lt;p&gt;作者后续提出优化版本：&lt;br&gt;
&lt;strong&gt;D = (Vn + Vf) / (Ei + Em)&lt;/strong&gt;&lt;br&gt;
其中Vn=当前价值，Vf=未来价值，随时间推移简化为D = Vf/Em&lt;/p&gt;
&lt;p&gt;（评论区包含27条技术讨论，涉及概率单位、时间导数、创业公司策略等技术性对话）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>软件公司如何应对代码复杂性：从个体贡献者到管理层的实践指南</title>
        <link>http://localhost:1313/p/%E8%BD%AF%E4%BB%B6%E5%85%AC%E5%8F%B8%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E4%BB%A3%E7%A0%81%E5%A4%8D%E6%9D%82%E6%80%A7%E4%BB%8E%E4%B8%AA%E4%BD%93%E8%B4%A1%E7%8C%AE%E8%80%85%E5%88%B0%E7%AE%A1%E7%90%86%E5%B1%82%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sat, 02 Aug 2025 20:47:42 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%BD%AF%E4%BB%B6%E5%85%AC%E5%8F%B8%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E4%BB%A3%E7%A0%81%E5%A4%8D%E6%9D%82%E6%80%A7%E4%BB%8E%E4%B8%AA%E4%BD%93%E8%B4%A1%E7%8C%AE%E8%80%85%E5%88%B0%E7%AE%A1%E7%90%86%E5%B1%82%E7%9A%84%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h3 id=&#34;代码复杂性的解决本质&#34;&gt;代码复杂性的解决本质
&lt;/h3&gt;&lt;p&gt;一个看似简单却蕴含深意的观点：&lt;strong&gt;只有个体程序员能真正解决代码复杂性&lt;/strong&gt;。这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;需要开发者对代码投入专注力&lt;/li&gt;
&lt;li&gt;工具只是辅助，最终依赖人类智能的运用&lt;/li&gt;
&lt;li&gt;本质上是需要个体贡献者层面的细致工作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当管理者仅笼统要求&amp;quot;简化代码&amp;quot;时往往无效，因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指令缺乏具体性&lt;/li&gt;
&lt;li&gt;管理者缺乏对每段代码的深入了解&lt;/li&gt;
&lt;li&gt;问题理解过程本身就是解决方案的一部分&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;管理层的常见误区&#34;&gt;管理层的常见误区
&lt;/h3&gt;&lt;p&gt;高层管理者（如CTO/技术副总）若只给出&amp;quot;提高代码质量&amp;quot;这类宽泛指令，往往导致：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;团队产生大量无效动作&lt;/li&gt;
&lt;li&gt;代码库质量未见实质提升&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常见错误模式包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;试图用统一方案解决所有复杂性问题&lt;/li&gt;
&lt;li&gt;忽视问题由多个需要精细处理的小项目组成&lt;/li&gt;
&lt;li&gt;最终导致工程师感觉付出努力却未产出可维护代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可操作的解决框架&#34;&gt;可操作的解决框架
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题收集阶段&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;让每位团队成员列出代码中最令人沮丧的部分&lt;/li&gt;
&lt;li&gt;关注症状而非原因：如&amp;quot;修改时令人紧张的模块&amp;quot;&lt;/li&gt;
&lt;li&gt;给予数天时间自由记录，不强制格式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题定位会议&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6-7人规模的小组会议&lt;/li&gt;
&lt;li&gt;将每个症状关联到具体代码单元（文件/类/方法）&lt;/li&gt;
&lt;li&gt;示例：将&amp;quot;缺乏单元测试&amp;quot;转化为&amp;quot;X模块重构时无法验证兼容性&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题跟踪与优先级&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为每个确认的问题创建工单（仅描述问题）&lt;/li&gt;
&lt;li&gt;优先级考量：
&lt;ul&gt;
&lt;li&gt;影响开发者数量与严重程度&lt;/li&gt;
&lt;li&gt;问题间的依赖关系（关键排序常被忽视）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;技术负责人应主导依赖关系分析&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;任务分配与执行&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常规功能开发中持续穿插代码清理&lt;/li&gt;
&lt;li&gt;每个开发周期（如季度）包含相关清理任务&lt;/li&gt;
&lt;li&gt;理想顺序：先清理阻碍当前功能开发的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;技术债务的真相&#34;&gt;技术债务的真相
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;即时成本&lt;/strong&gt;：拙劣决策在数小时/天/周内就会产生影响&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;时间假象&lt;/strong&gt;：正确实现与错误实现耗时通常相当&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合效应&lt;/strong&gt;：持续优化保持系统弹性，临时捷径会产生&amp;quot;无法移动的巨石&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;持续改进的关键&#34;&gt;持续改进的关键
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免完全停止功能开发来&amp;quot;大扫除&amp;quot;&lt;/li&gt;
&lt;li&gt;保持代码质量工作的持续投入&lt;/li&gt;
&lt;li&gt;建立&amp;quot;边开发边优化&amp;quot;的文化节奏&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;作者后记：这套方法需要结合常识与经验灵活运用，但已足够显著改善代码库质量。如需深度指导，可联系作者进行企业内训。&lt;/p&gt;&lt;/blockquote&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
