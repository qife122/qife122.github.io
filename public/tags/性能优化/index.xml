<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>性能优化 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
        <description>Recent content in 性能优化 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Thu, 07 Aug 2025 12:48:01 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Microsoft Office将于2022年8月起公开符号文件以提升安全与性能</title>
        <link>http://localhost:1313/p/microsoft-office%E5%B0%86%E4%BA%8E2022%E5%B9%B48%E6%9C%88%E8%B5%B7%E5%85%AC%E5%BC%80%E7%AC%A6%E5%8F%B7%E6%96%87%E4%BB%B6%E4%BB%A5%E6%8F%90%E5%8D%87%E5%AE%89%E5%85%A8%E4%B8%8E%E6%80%A7%E8%83%BD/</link>
        <pubDate>Thu, 07 Aug 2025 12:48:01 +0800</pubDate>
        
        <guid>http://localhost:1313/p/microsoft-office%E5%B0%86%E4%BA%8E2022%E5%B9%B48%E6%9C%88%E8%B5%B7%E5%85%AC%E5%BC%80%E7%AC%A6%E5%8F%B7%E6%96%87%E4%BB%B6%E4%BB%A5%E6%8F%90%E5%8D%87%E5%AE%89%E5%85%A8%E4%B8%8E%E6%80%A7%E8%83%BD/</guid>
        <description>&lt;h1 id=&#34;microsoft-office2022年8月からシンボルを公開&#34;&gt;Microsoft Office、2022年8月からシンボルを公開
&lt;/h1&gt;&lt;p&gt;本博客是《Microsoft Office to publish symbols starting August 2022》的摘要版本。最新信息请参考原文。&lt;/p&gt;
&lt;p&gt;我们很高兴地宣布，Microsoft Office将于2022年8月9日通过Microsoft Public Symbol Server开始公开Windows版Office的符号文件。这是微软为提升客户和合作伙伴的安全性与性能而进行的持续投资的一部分。&lt;/p&gt;
&lt;h2 id=&#34;主要优势&#34;&gt;主要优势
&lt;/h2&gt;&lt;h3 id=&#34;安全性助力安全社区保护客户&#34;&gt;安全性：助力安全社区保护客户
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;符号文件为安全研究人员提供额外信息，帮助他们检测和报告Office产品的安全问题&lt;/li&gt;
&lt;li&gt;使用符号文件后，研究人员能通过Process Monitor、WinDbg、Visual Studio等工具生成更详细、可操作的堆栈跟踪报告，从而加速工程师的问题解决流程&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;性能加速诊断与测试&#34;&gt;性能：加速诊断与测试
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;符号文件帮助客户和合作伙伴更好地理解和诊断问题&lt;/li&gt;
&lt;li&gt;为开发更高级的性能工具和洞察开启新可能&lt;/li&gt;
&lt;li&gt;硬件供应商可将Office公共符号用于设备性能测试与调优&lt;/li&gt;
&lt;li&gt;软件供应商可将其用于依赖Office的软件性能测试&lt;/li&gt;
&lt;li&gt;性能测试套件可利用符号提供更定制化的性能报告&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;什么是符号文件&#34;&gt;什么是符号文件？
&lt;/h2&gt;&lt;p&gt;符号文件由编译器在项目构建时生成，包含调试器分析程序时使用的信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公共符号：包含函数名、全局变量等基础信息（Office将提供此类剥离符号文件）&lt;/li&gt;
&lt;li&gt;私有符号：额外包含局部变量和行号等信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;microsoft-symbol-server&#34;&gt;Microsoft Symbol Server
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过Microsoft Public Symbol Server访问Office符号&lt;/li&gt;
&lt;li&gt;微软仅允许将符号用于微软软件相关的调试和测试（详见《Microsoft License Terms – Microsoft Symbol Server》）&lt;/li&gt;
&lt;li&gt;将持续公开以下版本及未来新版本的符号：
&lt;ul&gt;
&lt;li&gt;当前通道/Fork Build 16.0.15601.20037/版本2208&lt;/li&gt;
&lt;li&gt;Beta通道/DevMain Build 16.0.15606.20000/版本2209&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为微软整体安全防御策略的一部分，我们很高兴通过公开Office符号来改善诊断能力并增强安全研究。&lt;/p&gt;
&lt;p&gt;Sparsh Saxena | Office产品经理&lt;br&gt;
Shane Guthrie | Office高级产品经理&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Arm64架构内存页大小配置指南：提升性能的关键技巧</title>
        <link>http://localhost:1313/p/arm64%E6%9E%B6%E6%9E%84%E5%86%85%E5%AD%98%E9%A1%B5%E5%A4%A7%E5%B0%8F%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E5%B7%A7/</link>
        <pubDate>Wed, 06 Aug 2025 22:20:09 +0800</pubDate>
        
        <guid>http://localhost:1313/p/arm64%E6%9E%B6%E6%9E%84%E5%86%85%E5%AD%98%E9%A1%B5%E5%A4%A7%E5%B0%8F%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E5%B7%A7/</guid>
        <description>&lt;h1 id=&#34;理解arm64架构的内存页大小&#34;&gt;理解Arm64架构的内存页大小
&lt;/h1&gt;&lt;p&gt;Arm64架构与x86的主要区别之一，是可以在CPU的内存管理单元(MMU)中配置4K、16K或64K的内存页大小。本文总结了内存页大小的概念、在Linux系统上的配置方法，以及何时应该为应用程序使用不同的页大小。&lt;/p&gt;
&lt;h2 id=&#34;内存页大小介绍&#34;&gt;内存页大小介绍
&lt;/h2&gt;&lt;p&gt;正如我们在&lt;a class=&#34;link&#34; href=&#34;%e5%8e%9f%e9%93%be%e6%8e%a5&#34; &gt;诊断和修复Arm64原子操作的页错误性能问题&lt;/a&gt;中讨论过的，操作系统为应用程序提供虚拟内存地址空间，并通过页表将物理内存页映射到虚拟内存地址。CPU随后提供名为转译后备缓冲器(TLB)的机制，确保最近访问的内存页可以通过L1或L2 CPU缓存更快地被识别和读取。&lt;/p&gt;
&lt;p&gt;x86架构的物理内存页(称为granules)大小固定为4KB。而在Ampere Altra®或AmpereOne®等ARM64系统上，开发者可以配置物理内存页大小为4KB、16KB或64KB。&lt;/p&gt;
&lt;h2 id=&#34;何时使用更大的页大小&#34;&gt;何时使用更大的页大小？
&lt;/h2&gt;&lt;p&gt;由于改变页大小会影响系统的内存效率和性能，理解何时使用更大的页大小以及涉及的权衡非常重要。更大的页大小可能导致内存使用效率降低，因为页面可能未被完全利用。&lt;/p&gt;
&lt;p&gt;例如，如果我们在内存中存储7KB数据：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在4KB页系统中会使用两个4KB页面(共8KB)，效率为87.5%&lt;/li&gt;
&lt;li&gt;在64KB页系统中会使用一个64KB页面，效率仅为11%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但MMU和操作系统内核足够智能，会利用之前分配但未满的连续内存块进行后续分配。如果同一进程后续分配32KB内存：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;64KB页系统仍只使用一个页面(共39KB占用)&lt;/li&gt;
&lt;li&gt;4KB页系统则需要管理10个4KB页面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第二个权衡是页表查找缓存未命中导致的性能问题。每级缓存(L1、L2、系统级缓存)的TLB中只存储相对少量的页表项。更大的页大小意味着这些TLB项能覆盖更大的物理内存范围。&lt;/p&gt;
&lt;p&gt;以Ampere Altra和Altra Max处理器为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;L1数据TLB有48个条目&lt;/li&gt;
&lt;li&gt;L2 TLB有1280个条目&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;4KB粒度时：L1 TLB可缓存192KB物理内存地址，L2 TLB可覆盖5MB&lt;/li&gt;
&lt;li&gt;64KB页大小时：L1数据TLB增至3MB，L2 TLB增至80MB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每次TLB缓存未命中都会增加页遍历时间，导致CPU流水线停顿。更大的页大小意味着更少的缓存未命中，从而提升内存密集型工作负载的性能。同时，更大的连续内存区域也能改善I/O性能。&lt;/p&gt;
&lt;p&gt;适合使用大内存页的应用包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;数据库系统&lt;/strong&gt;：大量内存缓存和磁盘I/O&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;虚拟化基础设施&lt;/strong&gt;：虚拟机镜像通常占用数百MB到数百GB内存&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持续集成构建服务器&lt;/strong&gt;：如Linux内核编译等高吞吐量工作负载&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;网络/I/O密集型应用&lt;/strong&gt;：对象缓存、负载均衡器、防火墙等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AI推理&lt;/strong&gt;：执行训练模型时的内存和CPU密集型工作负载&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议通过&amp;quot;perf&amp;quot;工具测量TLB停顿(stall_backend_tlb和stall_frontend_tlb)来评估大页面的潜在收益。计算公式：(stall_frontend_tlb + stall_backend_tlb)/cycles可作为可能节省时间的上限估计。&lt;/p&gt;
&lt;h2 id=&#34;在ampere-cpu上配置大页大小&#34;&gt;在Ampere CPU上配置大页大小
&lt;/h2&gt;&lt;p&gt;更改内存页大小需要运行支持所需大小的内核。主流云操作系统(如RHEL、Oracle Linux、SUSE、Ubuntu)都提供预编译的4KB和64KB页大小内核。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RHEL 9配置步骤&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装64K内核包：&lt;code&gt;dnf –y install kernel-64k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置为默认启动内核：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; /boot/vmlinuz*64k&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;grubby --set-default&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt; --update-kernel&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$k&lt;/span&gt; --args&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;crashkernel=2G-:640M&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Ubuntu 22.04配置&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装arm64+largemem ISO或&lt;code&gt;sudo apt install linux-generic-64K&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置64K内核为默认：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GRUB_FLAVOUR_ORDER=generic-64k&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee /etc/default/grub.d/local-order.cfg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Oracle Linux配置&lt;/strong&gt;：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装内核包：&lt;code&gt;sudo dnf install -y kernel-uek64k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;设置为默认：&lt;code&gt;sudo grubby --set-default=$(echo /boot/vmlinuz*64k)&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;自定义编译内核时，可通过&lt;code&gt;make menuconfig&lt;/code&gt;在&amp;quot;Processor type and features&amp;quot;子菜单中修改ARM64 CPU特性寄存器配置，或直接修改.config文件中的&lt;code&gt;CONFIG_ARM_PAGE_SHIFT&lt;/code&gt;值(12对应4K，14对应16K，16对应64K)。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;getconf PAGESIZE&lt;/code&gt;命令可验证当前内核的页大小设置，64K系统将显示65536。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;调整云系统的内核内存页大小可显著提升许多常见云工作负载的应用性能。对于包含大量磁盘、内存或网络I/O的应用程序，在ARM主机上使用16K或64K页内核可能带来显著改进。&lt;/p&gt;
&lt;p&gt;但这不是万能方案，实际效果可能因应用而异。建议同时使用合成基准测试和真实场景测试来验证页大小改变的影响。多数支持Arm64的Linux发行版已在其仓库中包含多种内核，安装这些内核包并启动测试的成本相对较低。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>深入解析Vultr内容分发网络(CDN)技术架构与应用实践</title>
        <link>http://localhost:1313/p/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90vultr%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Wed, 06 Aug 2025 20:02:44 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90vultr%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%BA%94%E7%94%A8%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h1 id=&#34;理解vultr内容分发网络cdn&#34;&gt;理解Vultr内容分发网络(CDN)
&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;内容分发网络(CDN)通过全球分布的服务器节点网络，有效降低延迟、提升网站性能并保障用户体验。随着对快速可靠在线服务需求的增长，CDN在数字生态中的重要性日益凸显。&lt;/p&gt;
&lt;h2 id=&#34;vultr-cdn技术架构&#34;&gt;Vultr CDN技术架构
&lt;/h2&gt;&lt;p&gt;专为高性能企业设计的Vultr CDN具备以下核心技术特性：&lt;/p&gt;
&lt;h3 id=&#34;跨域资源共享cors&#34;&gt;跨域资源共享(CORS)
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;通过验证文件访问权限防止静态资源盗链&lt;/li&gt;
&lt;li&gt;仅接受来自源URL的请求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;gzip压缩&#34;&gt;Gzip压缩
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;减小静态内容体积&lt;/li&gt;
&lt;li&gt;加速内容传输&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ai机器人拦截&#34;&gt;AI机器人拦截
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;阻止已知AI工具爬取CDN端点&lt;/li&gt;
&lt;li&gt;防止内容被复制和未授权访问&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;安全合规体系&#34;&gt;安全合规体系
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;AI和恶意机器人拦截机制&lt;/li&gt;
&lt;li&gt;符合行业领先安全标准&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;cms深度集成&#34;&gt;CMS深度集成
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;与主流内容管理系统无缝对接&lt;/li&gt;
&lt;li&gt;通过CDN缓存降低延迟&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;push-zone与pull-zone技术解析&#34;&gt;Push Zone与Pull Zone技术解析
&lt;/h2&gt;&lt;h3 id=&#34;push-zone技术实现&#34;&gt;Push Zone技术实现
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;需手动上传文件至Vultr CDN&lt;/li&gt;
&lt;li&gt;内容被缓存至全球战略位置服务器&lt;/li&gt;
&lt;li&gt;特别适合需要全球快速分发静态资源的场景&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pull-zone工作机制&#34;&gt;Pull Zone工作机制
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;根据用户请求自动从源服务器拉取内容&lt;/li&gt;
&lt;li&gt;自动缓存机制减轻源站压力&lt;/li&gt;
&lt;li&gt;适合内容频繁更新的动态网站&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;典型应用场景&#34;&gt;典型应用场景
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;电子商务平台：全球快速加载商品图片&lt;/li&gt;
&lt;li&gt;流媒体服务：高效分发大体积媒体文件&lt;/li&gt;
&lt;li&gt;SaaS应用：全球快速交付软件更新和API&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;进阶技术集成&#34;&gt;进阶技术集成
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在Nginx/Apache服务器部署CDN&lt;/li&gt;
&lt;li&gt;WordPress四大缓存插件配置方案&lt;/li&gt;
&lt;li&gt;对象存储全局缓存实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术总结&#34;&gt;技术总结
&lt;/h2&gt;&lt;p&gt;Vultr CDN通过其创新的双区架构和智能缓存策略，为各类数字化场景提供高性能内容分发解决方案。从技术实现角度看，其安全防护机制与深度集成能力尤其值得开发者关注。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Ampere 2024开发者峰会视频回顾：云原生处理器与架构迁移实战</title>
        <link>http://localhost:1313/p/ampere-2024%E5%BC%80%E5%8F%91%E8%80%85%E5%B3%B0%E4%BC%9A%E8%A7%86%E9%A2%91%E5%9B%9E%E9%A1%BE%E4%BA%91%E5%8E%9F%E7%94%9F%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%8E%E6%9E%B6%E6%9E%84%E8%BF%81%E7%A7%BB%E5%AE%9E%E6%88%98/</link>
        <pubDate>Mon, 04 Aug 2025 07:46:53 +0800</pubDate>
        
        <guid>http://localhost:1313/p/ampere-2024%E5%BC%80%E5%8F%91%E8%80%85%E5%B3%B0%E4%BC%9A%E8%A7%86%E9%A2%91%E5%9B%9E%E9%A1%BE%E4%BA%91%E5%8E%9F%E7%94%9F%E5%A4%84%E7%90%86%E5%99%A8%E4%B8%8E%E6%9E%B6%E6%9E%84%E8%BF%81%E7%A7%BB%E5%AE%9E%E6%88%98/</guid>
        <description>&lt;h3 id=&#34;峰会概览&#34;&gt;峰会概览
&lt;/h3&gt;&lt;p&gt;Uber云基础设施工程师Vikrant Soman的发言道出峰会主旨：&amp;ldquo;Ampere CPU的主机性能足以提供与现有方案相当或更高的吞吐量，请勿轻信基准测试，务必运行自身工作负载进行总成本分析。&amp;ldquo;这场于2024年9月26日举办的半日虚拟峰会，聚集了全球开发者共同探讨云架构迁移与Ampere®云原生处理器如何重塑计算未来。&lt;/p&gt;
&lt;h3 id=&#34;核心技术议程&#34;&gt;核心技术议程
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;混合架构构建的挑战与机遇&lt;/strong&gt;&lt;br&gt;
Ampere公司Pete Baker的主题演讲揭示了使用Ampere平台迁移时优化工具与方法的关键见解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;云原生处理器的三重优势&lt;/strong&gt;&lt;br&gt;
首席技术推广官Sean Varley联合Fermyon的Kate Goldenring与ScyllaDB CEO Dor Laor，论证了Ampere高核心密度处理器对Kubernetes及分布式数据库等现代应用的适配性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;蔡司公司通过转向WebAssembly并增加Ampere Arm节点，在保持性能同时实现60%成本削减&amp;rdquo; —— Kate Goldenring&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;最佳工作负载匹配实践&lt;/strong&gt;&lt;br&gt;
Ampere客户工程副总裁Naren Nayak与Uber/Oracle专家共同解析AI、无状态云负载等场景的性能增益：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Arm生态已与x86指令集并肩发展&amp;rdquo; —— Vikrant Soman&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AI推理成本优化方案&lt;/strong&gt;&lt;br&gt;
Oracle产品经理Amar Gowda与Wallaroo.AI团队展示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;在OCI A1机器上部署量化模型，推理速度达x.86方案两倍&amp;rdquo; —— Steve Notley&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;混合架构迁移实战&lt;/strong&gt;&lt;br&gt;
Uber工程师Andreas Winther Lykke分享：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;3000个服务在数周内完成架构迁移与问题修复&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;可持续计算价值&#34;&gt;可持续计算价值
&lt;/h3&gt;&lt;p&gt;Ampere云原生处理器以可预测的高性能、弹性扩展和能效设计，实现开发效率、成本节约与环保的三重收益。&lt;/p&gt;
&lt;h3 id=&#34;开发者资源&#34;&gt;开发者资源
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;与Ampere销售团队洽谈合作&lt;/li&gt;
&lt;li&gt;通过开发者计划申请系统试用&lt;/li&gt;
&lt;li&gt;订阅开发者通讯&lt;/li&gt;
&lt;li&gt;加入技术社区讨论&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GDB Python API的冬季优化：增强消息提示与类型支持</title>
        <link>http://localhost:1313/p/gdb-python-api%E7%9A%84%E5%86%AC%E5%AD%A3%E4%BC%98%E5%8C%96%E5%A2%9E%E5%BC%BA%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E4%B8%8E%E7%B1%BB%E5%9E%8B%E6%94%AF%E6%8C%81/</link>
        <pubDate>Sun, 03 Aug 2025 17:01:19 +0800</pubDate>
        
        <guid>http://localhost:1313/p/gdb-python-api%E7%9A%84%E5%86%AC%E5%AD%A3%E4%BC%98%E5%8C%96%E5%A2%9E%E5%BC%BA%E6%B6%88%E6%81%AF%E6%8F%90%E7%A4%BA%E4%B8%8E%E7%B1%BB%E5%9E%8B%E6%94%AF%E6%8C%81/</guid>
        <description>&lt;h1 id=&#34;gdb-python-api的冬季优化增强消息提示与类型支持&#34;&gt;GDB Python API的冬季优化：增强消息提示与类型支持
&lt;/h1&gt;&lt;p&gt;作为Trail of Bits的冬季实习生，我的目标是改进GNU调试器(GDB)的两方面性能：提升运行速度并增强其Python API，以更好地支持Pwndbg等依赖工具。主要工作包括实现符号解析的并行处理，最终完成了三项核心改进。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要加速gdb&#34;&gt;为什么需要加速GDB？
&lt;/h2&gt;&lt;p&gt;GDB加载DWARF符号有三种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;部分符号表加载器&lt;/strong&gt;：仅加载符号名称并关联到编译单元(CU)，延迟解析完整符号表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完整符号表加载器&lt;/strong&gt;：完成CU解析并构建完整符号表&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;索引解析器&lt;/strong&gt;：利用ELF文件的.gdb_index节跳过索引构建阶段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初计划将Meta开源调试器drgn的并行解析方案移植到GDB。由于索引加载器已实现并行化，接下来重点优化完整加载器和索引解析器。&lt;/p&gt;
&lt;h2 id=&#34;什么是obstack&#34;&gt;什么是obstack？
&lt;/h2&gt;&lt;p&gt;通用内存分配器(如malloc())效率不高，GDB大量使用GNU Obstack这种栈式分配器。每个长生命周期容器对象(如objfile)都拥有自己的obstack，用于集中管理内存分配与释放。&lt;/p&gt;
&lt;h2 id=&#34;gdb对象的__repr__方法&#34;&gt;GDB对象的__repr__方法
&lt;/h2&gt;&lt;p&gt;第一个改进是为GDB Python API中的多个类型添加&lt;code&gt;__repr__()&lt;/code&gt;实现，使Python REPL中的类型信息更直观：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lookup_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;char&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TYPE_CODE_INT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该改进覆盖了gdb.Architecture、gdb.Block等多个核心类型。&lt;/p&gt;
&lt;h2 id=&#34;动态类型创建&#34;&gt;动态类型创建
&lt;/h2&gt;&lt;p&gt;第二个改进允许通过Python API直接创建类型（原先只能查询现有类型）。新增功能包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;gdb.init_type&lt;/code&gt;基础类型创建&lt;/li&gt;
&lt;li&gt;专用类型创建函数如&lt;code&gt;gdb.init_float_type&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配套的&lt;code&gt;gdb.FloatFormat&lt;/code&gt;类型定义浮点内存布局&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例创建24位整型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;init_type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;objfile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gdb&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TYPE_CODE_INT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;24&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;long short int&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;符号注册机制&#34;&gt;符号注册机制
&lt;/h2&gt;&lt;p&gt;第三个改进实现了三种符号的动态注册：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类型符号&lt;/li&gt;
&lt;li&gt;goto标签&lt;/li&gt;
&lt;li&gt;静态变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过构建新的符号表并追加到现有列表的方式实现，虽然效率不高但满足了基本功能需求。示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;objfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;add_type_symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;long short int&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;代码合并过程&#34;&gt;代码合并过程
&lt;/h2&gt;&lt;p&gt;GDB采用邮件列表的传统代码审查方式。初期提交方式不当导致问题，后改用&lt;code&gt;git send-email&lt;/code&gt;规范提交。目前三项改进中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__repr__()&lt;/code&gt;实现已进入合并流程&lt;/li&gt;
&lt;li&gt;类型创建和符号注册功能仍在审查中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些改进显著增强了无符号代码的调试能力，为逆向工程等场景提供了更灵活的工具支持。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
