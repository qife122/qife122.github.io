<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>反病毒规避 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E5%8F%8D%E7%97%85%E6%AF%92%E8%A7%84%E9%81%BF/</link>
        <description>Recent content in 反病毒规避 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Thu, 07 Aug 2025 18:08:23 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E5%8F%8D%E7%97%85%E6%AF%92%E8%A7%84%E9%81%BF/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>修改Metasploit x64模板实现反病毒规避技术</title>
        <link>http://localhost:1313/p/%E4%BF%AE%E6%94%B9metasploit-x64%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E5%8F%8D%E7%97%85%E6%AF%92%E8%A7%84%E9%81%BF%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Thu, 07 Aug 2025 18:08:23 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BF%AE%E6%94%B9metasploit-x64%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E5%8F%8D%E7%97%85%E6%AF%92%E8%A7%84%E9%81%BF%E6%8A%80%E6%9C%AF/</guid>
        <description>&lt;h1 id=&#34;修改metasploit-x64模板实现反病毒规避&#34;&gt;修改Metasploit x64模板实现反病毒规避
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Joff Thyer&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;免责声明：本文所述技术可能已过时，但仍可作为学习参考，并可能整合到现代工具中。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在针对Windows桌面的渗透测试中，测试人员常使用Veil&amp;rsquo;s Powershell Empire等工具将shellcode直接注入内存。这种方法虽能避免磁盘写入和端点防护的检测，但有时我们需要使用实际恶意软件可执行文件进行更全面的测试。&lt;/p&gt;
&lt;h2 id=&#34;反病毒软件的检测机制&#34;&gt;反病毒软件的检测机制
&lt;/h2&gt;&lt;p&gt;反病毒引擎对Metasploit生成的32位恶意软件检测效果显著，但对64位payload的检测能力较弱。研究发现，AV引擎不仅检测shellcode，还会匹配msfvenom生成的可执行文件中存根加载器的汇编代码模式。&lt;/p&gt;
&lt;h2 id=&#34;metasploit模板分析&#34;&gt;Metasploit模板分析
&lt;/h2&gt;&lt;p&gt;Metasploit的payload生成使用预编译的32位（C语言）和64位（汇编语言）模板，位于KALI系统的&lt;code&gt;/usr/share/metasploit-framework/data/templates/src/pe/exe&lt;/code&gt;目录。模板功能包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分配4096字节内存缓冲区&lt;/li&gt;
&lt;li&gt;写入&amp;quot;PAYLOAD:&amp;ldquo;标记字符串&lt;/li&gt;
&lt;li&gt;保留缓冲区空间供msfvenom插入shellcode&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;64位模板修改实验&#34;&gt;64位模板修改实验
&lt;/h2&gt;&lt;p&gt;通过修改64位汇编模板进行三项测试：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;直接重编译原代码&lt;/strong&gt;：Avast立即报警&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;仅将缓冲区扩大至8192字节&lt;/strong&gt;：成功绕过检测&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全面修改汇编值+生成payload&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;使用XOR编码和无编码两种shellcode&lt;/li&gt;
&lt;li&gt;均成功通过Avast的深度扫描&lt;/li&gt;
&lt;li&gt;最终获得shell访问权限&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;技术验证截图&#34;&gt;技术验证截图
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;修改后的汇编源代码（8192字节缓冲区）&lt;/li&gt;
&lt;li&gt;使用新模板生成的64位payload文件&lt;/li&gt;
&lt;li&gt;Avast扫描结果显示&amp;quot;安全&amp;rdquo;&lt;/li&gt;
&lt;li&gt;成功获取shell的终端界面&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结论与启示&#34;&gt;结论与启示
&lt;/h2&gt;&lt;p&gt;反病毒厂商主要检测模板特征而非shellcode本身。本实验证明，仅通过简单的汇编代码修改（如调整缓冲区大小）即可有效绕过AV检测。该方法对其他AV引擎的适用性有待进一步验证。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;延伸学习：&lt;/em&gt;&lt;br&gt;
作者相关课程：《正则表达式实战》《企业攻击模拟与C2植入开发》《Python入门》等&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>修改Metasploit x64模板实现反病毒规避技术</title>
        <link>http://localhost:1313/p/%E4%BF%AE%E6%94%B9metasploit-x64%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E5%8F%8D%E7%97%85%E6%AF%92%E8%A7%84%E9%81%BF%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Tue, 05 Aug 2025 23:18:51 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BF%AE%E6%94%B9metasploit-x64%E6%A8%A1%E6%9D%BF%E5%AE%9E%E7%8E%B0%E5%8F%8D%E7%97%85%E6%AF%92%E8%A7%84%E9%81%BF%E6%8A%80%E6%9C%AF/</guid>
        <description>&lt;h1 id=&#34;修改metasploit-x64模板实现反病毒规避&#34;&gt;修改Metasploit x64模板实现反病毒规避
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Joff Thyer&lt;/strong&gt;&lt;br&gt;
&lt;em&gt;注意：本文所述技术可能已过时，但仍可作为学习现代工具技术演进的参考案例。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在针对Windows桌面的渗透测试中，测试人员常使用Veil&amp;rsquo;s Powershell Empire等工具将shellcode直接注入内存。这种技术能有效规避磁盘写入和端点防护软件的检测。但有时我们需要使用实际恶意软件可执行文件进行更全面的测试，以评估防御技术的检测阈值。&lt;/p&gt;
&lt;h2 id=&#34;现状分析&#34;&gt;现状分析
&lt;/h2&gt;&lt;p&gt;反病毒引擎对Metasploit框架生成的32位恶意软件检测效果显著，但对64位变种检测能力较弱。研究发现，AV引擎不仅检测shellcode，还会匹配msfvenom生成的可执行文件中存根加载器的汇编代码特征。&lt;/p&gt;
&lt;h2 id=&#34;技术原理&#34;&gt;技术原理
&lt;/h2&gt;&lt;p&gt;Metasploit生成payload时使用预编译的模板可执行文件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;32位模板：C语言源码（位于&lt;code&gt;/usr/share/metasploit-framework/data/templates/src/pe/exe&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;64位模板：汇编语言源码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;模板功能均为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;分配4096字节内存缓冲区&lt;/li&gt;
&lt;li&gt;写入&amp;quot;PAYLOAD:&amp;ldquo;标记字符串&lt;/li&gt;
&lt;li&gt;msfvenom将选定payload（经编码处理后）注入该缓冲区&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;实验过程&#34;&gt;实验过程
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;原始模板测试&lt;/strong&gt;：Avast立即触发警报（基于汇编指令特征匹配）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缓冲区扩容测试&lt;/strong&gt;：将缓冲区改为8192字节后，Avast完全漏报&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完整修改测试&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;修改全部汇编代码数值为8192&lt;/li&gt;
&lt;li&gt;生成两种payload（含XOR编码/无编码）&lt;/li&gt;
&lt;li&gt;成功绕过Avast的&amp;quot;深度扫描&amp;quot;并获取shell&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;技术验证&#34;&gt;技术验证
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-gdscript3&#34; data-lang=&#34;gdscript3&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;修改后的&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x64汇编代码片段&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;字节缓冲区）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;section&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;VirtualAlloc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rsi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;payload_start&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rdi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mov&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rcx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8192&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;rep&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movsb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rax&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;实验证实AV厂商主要检测模板特征而非shellcode本身。仅通过简单修改汇编代码（如调整缓冲区大小）即可有效绕过64位payload检测。该方法对其他AV引擎的适用性有待进一步验证。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;提示：完整技术细节和编译说明请参考原文中的汇编源码注释。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
