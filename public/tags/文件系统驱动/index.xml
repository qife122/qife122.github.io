<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>文件系统驱动 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A9%B1%E5%8A%A8/</link>
        <description>Recent content in 文件系统驱动 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Mon, 04 Aug 2025 23:59:00 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A9%B1%E5%8A%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>编写Windows文件系统驱动之难：NTFS安全描述符继承漏洞分析</title>
        <link>http://localhost:1313/p/%E7%BC%96%E5%86%99windows%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A9%B1%E5%8A%A8%E4%B9%8B%E9%9A%BEntfs%E5%AE%89%E5%85%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%BB%A7%E6%89%BF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
        <pubDate>Mon, 04 Aug 2025 23:59:00 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%BC%96%E5%86%99windows%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E9%A9%B1%E5%8A%A8%E4%B9%8B%E9%9A%BEntfs%E5%AE%89%E5%85%A8%E6%8F%8F%E8%BF%B0%E7%AC%A6%E7%BB%A7%E6%89%BF%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
        <description>&lt;p&gt;@jonasLyk的一条推文让我想起几个月前在NTFS中发现的一个漏洞，经核实该漏洞在Windows 10 2004版本中依然存在。虽然无法直接用于突破安全限制，但在攻击链中可能具有利用价值。NTFS的复杂性充分证明了编写Windows文件系统驱动的难度，因此出现各种边缘案例也就不足为奇了。&lt;/p&gt;
&lt;p&gt;这个漏洞涉及创建新目录时的默认安全描述符(SD)分配机制。熟悉Windows SD的人都知道，可以通过&lt;code&gt;CONTAINER_INHERIT_ACE&lt;/code&gt;和/或&lt;code&gt;OBJECT_INHERIT_ACE&lt;/code&gt;标志来指定继承规则，这些标志决定了当新条目是目录或文件时是否应从父目录继承ACE。让我们看看NTFS用于为新文件分配安全性的代码，你能发现其中的问题吗？&lt;/p&gt;
&lt;p&gt;代码使用&lt;code&gt;SeAssignSecurityEx&lt;/code&gt;基于父SD和调用者提供的显式SD来创建新SD。要使继承生效就不能指定显式SD。&lt;code&gt;SeAssignSecurityEx&lt;/code&gt;是否应用目录或文件的继承规则取决于IsDirectoryObject参数的值，该参数在调用NtCreateFile时传递了FILE_DIRECTORY_FILE选项标志时会被设为TRUE。看起来没问题——如果不指定FILE_DIRECTORY_FILE标志就无法创建目录，默认情况下会创建文件。&lt;/p&gt;
&lt;p&gt;但等等，事实并非如此。如果指定形如ABC::$INDEX_ALLOCATION的名称，无论传递什么标志NTFS都会创建目录。因此漏洞在于：当使用$INDEX_ALLOCATION技巧创建目录时，新SD会像文件而非目录那样继承权限。我们可以在命令提示符中验证这个行为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&amp;gt; mkdir ABC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&amp;gt; icacls ABC /grant &amp;#34;INTERACTIVE&amp;#34;:(CI)(IO)(F)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&amp;gt; icacls ABC /grant &amp;#34;NETWORK&amp;#34;:(OI)(IO)(F)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;首先创建目录ABC并授予两个ACE：一个针对INTERACTIVE组的ACE将继承到目录，另一个针对NETWORK的ACE将继承到文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&amp;gt; echo &amp;#34;Hello&amp;#34; &amp;gt; ABC\XYZ::$INDEX_ALLOCATION&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Incorrect function.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;接着用$INDEX_ALLOCATION技巧创建子目录XYZ。当CMD尝试向目录对象写入&amp;quot;Hello&amp;quot;时输出的&amp;quot;Incorrect function&amp;quot;证明操作已生效。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&amp;gt; icacls ABC\XYZ&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ABC\XYZ NT AUTHORITY\NETWORK:(I)(F)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        NT AUTHORITY\SYSTEM:(I)(F)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        BUILTIN\Administrators:(I)(F)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;查看XYZ子目录的SD可以发现ACE是基于文件而非目录继承的，我们看到了NETWORK而非INTERACTIVE的ACE。最后用dir命令确认ABC确实是目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&amp;gt; dir ABC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Volume in drive C has no label.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Volume Serial Number is 9A7B-865C
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; Directory of C:\ABC
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2020-05-20  19:09    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;DIR&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;          .
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2020-05-20  19:09    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;DIR&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;          ..
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;2020-05-20  19:05    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;DIR&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;          XYZ
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这个漏洞有用吗？老实说可能用处不大。唯一能想到的场景是：当某个系统服务在继承文件访问会授予权限而继承目录访问不会的位置创建文件时，可以通过指定路径来创建可控目录。但这确实有些牵强。如果有人能想到更好的利用方式，请联系我或微软:-)&lt;/p&gt;
&lt;p&gt;有趣的是，这再次证明了$INDEX_ALLOCATION在确定对象是目录还是文件时没有得到正确验证。另一个典型案例是CVE-2018-1036，该漏洞允许仅用FILE_ADD_FILE权限创建新目录。为何设计上会在使用流类型时自动创建目录的原因尚不清楚，我们可能永远无法得知。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
