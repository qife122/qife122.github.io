<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>哈希函数 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/</link>
        <description>Recent content in 哈希函数 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sun, 03 Aug 2025 16:06:32 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>YOLO哈希构造的致命缺陷：密码学安全实践指南</title>
        <link>http://localhost:1313/p/yolo%E5%93%88%E5%B8%8C%E6%9E%84%E9%80%A0%E7%9A%84%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</link>
        <pubDate>Sun, 03 Aug 2025 16:06:32 +0800</pubDate>
        
        <guid>http://localhost:1313/p/yolo%E5%93%88%E5%B8%8C%E6%9E%84%E9%80%A0%E7%9A%84%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</guid>
        <description>&lt;h2 id=&#34;yolomultihash&#34;&gt;YoloMultiHash
&lt;/h2&gt;&lt;p&gt;在Trail of Bits的审计工作中，YoloMultiHash是最常见的危险构造。当客户需要处理复杂数据结构或值数组时，常误用这种构造来实现Fiat-Shamir转录。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;错误构造&lt;/strong&gt;&lt;br&gt;
给定哈希函数H和消息集合M̂ = {M1,M2,…,Mn}，选择分隔符S，计算YoloMultiHash(M̂) = H(M1‖S‖M2‖S‖…‖S‖Mn)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;致命缺陷&lt;/strong&gt;&lt;br&gt;
核心问题在于编码模糊性。若消息Mi包含分隔符S，可将Mi拆分为M′i‖S‖M′′i，此时不同语义的输入M̂和M̃会产生相同哈希值，直接破坏哈希函数的抗碰撞性。该漏洞已被实际利用攻陷多个主流库。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正确方案&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;采用专为多值哈希设计的TupleHash（SP800-185标准）&lt;/li&gt;
&lt;li&gt;或使用BLAKE3的&amp;quot;状态化哈希对象&amp;quot;特性&lt;/li&gt;
&lt;li&gt;结构化数据推荐Protocol Buffers/CBOR/BCS等无损序列化格式（注意JSON可能因空格/元素顺序导致哈希不一致）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yolomac&#34;&gt;YoloMAC
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;错误构造&lt;/strong&gt;&lt;br&gt;
给定密钥K和消息M，计算YoloMAC(K,M) = H(K‖M)，有时会加入盐值S变为H(K‖S‖M)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;双重漏洞&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;长度扩展攻击&lt;/strong&gt;：对于SHA256等Merkle-Damgård结构哈希，攻击者可在未知K的情况下构造有效YoloMAC(K,M‖X)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;编码模糊性&lt;/strong&gt;：即使使用SHA3/BLAKE3仍存在风险。例如256位密钥K=K1‖K2时，YoloMAC(K1,K2‖M)会与YoloMAC(K,M)产生相同MAC值，导致密钥/消息对的可否认性攻击（类似AES-GCM标签漏洞）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;特别警告&lt;/strong&gt;&lt;br&gt;
Keccak官网虽声明&amp;quot;可直接将密钥前置作为MAC&amp;quot;，但未明确密钥长度/格式要求，实际应用中仍存在风险。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;正确方案&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SHA2家族：必须使用HMAC（Python标准库已内置）&lt;/li&gt;
&lt;li&gt;SHA3家族：优先选择KMAC（支持XOF模式、输出长度绑定等特性）&lt;/li&gt;
&lt;li&gt;BLAKE2/3：直接使用内置密钥哈希模式&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;yolopbkdf&#34;&gt;YoloPBKDF
&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;错误构造&lt;/strong&gt;&lt;br&gt;
给定密码P和盐值S，计算K = H(S‖P)或迭代版本Ki = H(S‖Ki-1)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;灾难性缺陷&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GPU集群可实现每秒千亿次破解尝试&lt;/li&gt;
&lt;li&gt;防御成本呈线性增长：用户若将迭代次数增加10倍，攻击者仅需多投入10倍资源&lt;/li&gt;
&lt;li&gt;完全无法抵抗彩虹表、时空权衡等经典攻击手段&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;内存硬函数优势&lt;/strong&gt;&lt;br&gt;
以Argon2d的64MB内存需求为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;合法用户仅消耗0.8%内存（8GB设备）&lt;/li&gt;
&lt;li&gt;攻击者若想实现每秒百万次尝试，需每秒处理64TB数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;正确方案&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首选Argon2/scrypt等内存硬函数&lt;/li&gt;
&lt;li&gt;FIPS合规场景可采用PBKDF2+HKDF组合方案（需注意PBKDF2非内存硬特性）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心建议&#34;&gt;核心建议
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;拒绝重复造轮子&lt;/strong&gt;：BLAKE3原生支持密钥哈希/MAC，SHA3库普遍实现KMAC/TupleHash&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数化设计&lt;/strong&gt;：密钥长度、消息格式等细节必须严格规范&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;资源权衡&lt;/strong&gt;：密码学方案选择应使合法用户操作成本远低于攻击成本&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;密码学领域有句名言：&amp;ldquo;设计自己的加密协议就像设计自己的降落伞——你尽可以尝试，但千万别在第一次试跳时就用它。&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
