<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>API安全 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/api%E5%AE%89%E5%85%A8/</link>
        <description>Recent content in API安全 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Fri, 08 Aug 2025 22:06:25 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/api%E5%AE%89%E5%85%A8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>我是如何操纵Bugcrowd平台排名的 - 漏洞挖掘技术解析</title>
        <link>http://localhost:1313/p/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E6%93%8D%E7%BA%B5bugcrowd%E5%B9%B3%E5%8F%B0%E6%8E%92%E5%90%8D%E7%9A%84-%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Fri, 08 Aug 2025 22:06:25 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%88%91%E6%98%AF%E5%A6%82%E4%BD%95%E6%93%8D%E7%BA%B5bugcrowd%E5%B9%B3%E5%8F%B0%E6%8E%92%E5%90%8D%E7%9A%84-%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;如何操纵我在bugcrowd平台的排名&#34;&gt;如何操纵我在Bugcrowd平台的排名
&lt;/h1&gt;&lt;p&gt;近年来，随着越来越多的公司依赖众包平台来识别系统漏洞，漏洞赏金计划获得了极大的普及。因此，这些平台的安全性变得愈发关键。去年我发现了一个可以操纵Bugcrowd平台排名的方法，本文将分享具体实现方式及其潜在影响。&lt;/p&gt;
&lt;h2 id=&#34;漏洞背景&#34;&gt;漏洞背景
&lt;/h2&gt;&lt;p&gt;在测试Bugcrowd平台时，我发现可以通过API导入大量报告并给自己奖励积分来操纵平台排名。虽然这些是演示积分不会显示在个人公开主页，但它们会出现在提交页面的积分总计中——而这些演示积分会被计入平台的排名算法。通过此漏洞，我仅凭3205分就位列平台第10名，而原本第11名的研究者拥有13789分。&lt;/p&gt;
&lt;h2 id=&#34;技术实现细节&#34;&gt;技术实现细节
&lt;/h2&gt;&lt;p&gt;该漏洞需要以下操作步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在Bugcrowd创建两个账户：研究员账户和公司账户&lt;/li&gt;
&lt;li&gt;从跟踪账户创建演示程序并获取API凭证&lt;/li&gt;
&lt;li&gt;按照官方文档构造API请求，为研究员账户创建可认领的提交&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例API请求代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;requests&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;accept&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/vnd.bugcrowd+json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;authorization&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Token &amp;lt;ADD-YOUR-API-TOKEN&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;s1&#34;&gt;&amp;#39;content-type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;submission&amp;#34;:{&amp;#34;source&amp;#34;:&amp;#34;platform&amp;#34;,&amp;#34;title&amp;#34;:&amp;#34;Security Breached&amp;#34;,&amp;#34;submitted_at&amp;#34;:&amp;#34;2022-06-07T00:00:00.181Z&amp;#34;,&amp;#34;substate&amp;#34;:&amp;#34;resolved&amp;#34;,&amp;#34;vrt_id&amp;#34;:&amp;#34;server_side_injection.remote_code_execution_rce&amp;#34;,&amp;#34;priority&amp;#34;:&amp;#34;1&amp;#34;,&amp;#34;researcher_email&amp;#34;:&amp;#34;muhammadkhizerjaved@bugcrowdninja.com&amp;#34;}}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;requests&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https://api.bugcrowd.com/bounties/&amp;lt;YOUR-BOUNTY-UUID&amp;gt;/submissions&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;请求成功后，研究员邮箱会收到可认领提交的链接，认领后即可获得演示积分。当积累足够积分后，平台排名就会发生变化。&lt;/p&gt;
&lt;h2 id=&#34;漏洞影响&#34;&gt;漏洞影响
&lt;/h2&gt;&lt;p&gt;该漏洞主要影响Bugcrowd的商业信誉及其关联方，因为排名系统是平台用户信任体系的重要组成部分。攻击者可能通过操纵排名获取间接经济利益，例如在公开平台展示虚假排名，导致企业声誉受损和客户信任流失。&lt;/p&gt;
&lt;h2 id=&#34;负责任的披露&#34;&gt;负责任的披露
&lt;/h2&gt;&lt;p&gt;我及时向Bugcrowd报告了该问题，他们迅速进行了修复。这次经历让我深刻认识到负责任的漏洞披露的重要性，以及漏洞赏金计划对保障数字世界安全的关键作用。&lt;/p&gt;
&lt;p&gt;随着漏洞赏金计划的普及，保持警惕并识别潜在可利用漏洞显得尤为重要。我呼吁研究者和企业共同重视安全问题，携手打造更安全的互联网环境。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>用NIST SP 800-228解决API安全问题的技术解析</title>
        <link>http://localhost:1313/p/%E7%94%A8nist-sp-800-228%E8%A7%A3%E5%86%B3api%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Tue, 05 Aug 2025 10:15:50 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%94%A8nist-sp-800-228%E8%A7%A3%E5%86%B3api%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;p&gt;根据Wallarm 2025年Q1威胁统计报告，70%的应用攻击针对API。行业不能再将API安全视为次要问题，而应将其作为核心议题。NIST似乎也认同这一观点，发布了NIST SP 800-228的初稿，这是一套关于API安全的建议规范。&lt;/p&gt;
&lt;h3 id=&#34;背景api自动化与攻击速度&#34;&gt;背景：API、自动化与攻击速度
&lt;/h3&gt;&lt;p&gt;API不仅是应用架构的演进，更是服务构建、消费和安全方式的根本转变。与Web应用不同，API专为程序化访问设计。正是这种特性——状态保持、结构化、机器可读性——使其成为攻击者的理想目标。&lt;/p&gt;
&lt;p&gt;AJ Debole（甲骨文现场CISO）指出：API降低了攻击的技术门槛。无需操纵浏览器流量或掌握代理工具，简单的curl命令或Python脚本就足以对API进行模糊测试。随着API与AI系统（特别是GenAI代理）的集成加深，API流量、复杂性和暴露风险呈指数级增长。&lt;/p&gt;
&lt;h3 id=&#34;nist-sp-800-228的技术要点&#34;&gt;NIST SP 800-228的技术要点
&lt;/h3&gt;&lt;p&gt;NIST提出了22项推荐控制措施，可归纳为7个技术主题组：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API规范与资产管理&lt;/strong&gt;&lt;br&gt;
基础原则：无法保护未知资产。必须建立实时API清单和规范定义，防止影子API成为易攻击目标。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模式验证与输入处理&lt;/strong&gt;&lt;br&gt;
需在运行时强制实施请求/响应模式验证。典型案例：某加密交易所因未验证令牌类型而被攻破。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;认证与授权&lt;/strong&gt;&lt;br&gt;
虽然OAuth等改进了认证(authN)，但授权(authZ)仍是重灾区。许多API仍存在&amp;quot;自称管理员即可提权&amp;quot;的漏洞，NIST要求实现字段和方法级的精细访问控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;敏感数据识别与保护&lt;/strong&gt;&lt;br&gt;
敏感数据不仅限于PII。某公司意外暴露网络安全保险单（含勒索软件赔付上限）的案例表明，需要超越简单关键词的数据分类策略。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;访问控制与请求流管理&lt;/strong&gt;&lt;br&gt;
重点强化令牌泄露等异常场景下的API行为。需建立实时响应能力，例如按需阻断特定密钥或用户。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;速率限制与滥用防护&lt;/strong&gt;&lt;br&gt;
NIST建议实施方法/用户/字段级的细粒度限速，防止云计算资源或LLM API被恶意消耗造成经济损失。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;日志与可观测性&lt;/strong&gt;&lt;br&gt;
关键不在于日志收集，而在于响应能力。需建立日志分析与安全操作的联动机制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;wallarm的技术实现&#34;&gt;Wallarm的技术实现
&lt;/h3&gt;&lt;p&gt;Wallarm平台与NIST标准深度契合，提供以下技术能力：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动发现API并生成OpenAPI规范&lt;/li&gt;
&lt;li&gt;实时模式验证和异常请求检测&lt;/li&gt;
&lt;li&gt;识别身份验证漏洞、敏感数据暴露和BOLA等风险&lt;/li&gt;
&lt;li&gt;细粒度速率限制&lt;/li&gt;
&lt;li&gt;完整流量上下文分析&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;平台通过机器学习分析API流量模式，可识别90%以上的影子API，并将安全事件响应时间缩短至分钟级。对于金融科技客户，Wallarm特别强化了支付API的序列化攻击防护，成功拦截了83%的业务逻辑滥用尝试。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;案例：某零售企业部署Wallarm后，API攻击面减少62%，误报率降低至0.2%，安全团队效率提升4倍。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>超越传统威胁：AI驱动的API漏洞崛起</title>
        <link>http://localhost:1313/p/%E8%B6%85%E8%B6%8A%E4%BC%A0%E7%BB%9F%E5%A8%81%E8%83%81ai%E9%A9%B1%E5%8A%A8%E7%9A%84api%E6%BC%8F%E6%B4%9E%E5%B4%9B%E8%B5%B7/</link>
        <pubDate>Mon, 04 Aug 2025 02:03:21 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%B6%85%E8%B6%8A%E4%BC%A0%E7%BB%9F%E5%A8%81%E8%83%81ai%E9%A9%B1%E5%8A%A8%E7%9A%84api%E6%BC%8F%E6%B4%9E%E5%B4%9B%E8%B5%B7/</guid>
        <description>&lt;h3 id=&#34;ai对api安全格局的颠覆性影响&#34;&gt;AI对API安全格局的颠覆性影响
&lt;/h3&gt;&lt;p&gt;人工智能已深刻改变各行业，API安全领域亦不例外。传统防御手段主要针对已知威胁，但随着AI技术普及，自动化攻击工具、AI生成的漏洞利用代码以及业务逻辑滥用等问题使安全形势复杂化。根据Wallarm《2025年API威胁统计报告》，2024年AI相关CVE漏洞数量激增，其中98.9%直接关联API系统。&lt;/p&gt;
&lt;h3 id=&#34;ai加剧的api风险特征&#34;&gt;AI加剧的API风险特征
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;弱认证机制&lt;/strong&gt;：89%的AI驱动API仍使用静态密钥&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;暴露端点问题&lt;/strong&gt;：57%的AI相关API存在未受控的公开访问&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;新型漏洞类别&lt;/strong&gt;：二进制API和硬件级处理导致内存损坏漏洞激增&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ai驱动的自适应攻击技术解析&#34;&gt;AI驱动的自适应攻击技术解析
&lt;/h3&gt;&lt;p&gt;攻击者利用AI实现四阶段攻击链：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;API行为自动化分析&lt;/strong&gt;：通过监控响应模式识别业务逻辑弱点&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;业务逻辑逆向工程&lt;/strong&gt;：定位授权漏洞如BOLA（对象级授权缺陷）和BFLA（功能级授权缺陷）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实时规避检测&lt;/strong&gt;：攻击机器人可动态修改请求参数，绕过传统签名检测机制&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行为伪装&lt;/strong&gt;：模拟正常用户流量，需上下文感知技术才能识别&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;构建ai弹性防御体系&#34;&gt;构建AI弹性防御体系
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;实时异常检测&lt;/strong&gt;：采用Wallarm等具备行为分析能力的平台，通过持续学习应对新型威胁&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;强化认证体系&lt;/strong&gt;：识别未受保护的API端点，发现权限控制漏洞&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;全量API资产治理&lt;/strong&gt;：通过自动化发现工具管理影子API和僵尸API&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOC即服务&lt;/strong&gt;：结合专利AI/ML技术提供实时阻断和威胁狩猎能力&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;案例显示，采用AI增强防御方案的企业可将API攻击响应时间缩短83%。建议通过&lt;a class=&#34;link&#34; href=&#34;https://www.wallarm.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Wallarm演示&lt;/a&gt;了解具体实施方案。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>通过Swagger UI进行钓鱼攻击——利用错误配置获取漏洞赏金</title>
        <link>http://localhost:1313/p/%E9%80%9A%E8%BF%87swagger-ui%E8%BF%9B%E8%A1%8C%E9%92%93%E9%B1%BC%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8%E9%94%99%E8%AF%AF%E9%85%8D%E7%BD%AE%E8%8E%B7%E5%8F%96%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91/</link>
        <pubDate>Sun, 03 Aug 2025 13:55:41 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E9%80%9A%E8%BF%87swagger-ui%E8%BF%9B%E8%A1%8C%E9%92%93%E9%B1%BC%E6%94%BB%E5%87%BB%E5%88%A9%E7%94%A8%E9%94%99%E8%AF%AF%E9%85%8D%E7%BD%AE%E8%8E%B7%E5%8F%96%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91/</guid>
        <description>&lt;h1 id=&#34;通过swagger-ui进行钓鱼攻击利用错误配置获取漏洞赏金&#34;&gt;通过Swagger UI进行钓鱼攻击——利用错误配置获取漏洞赏金
&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;Swagger UI是一个开源工具，帮助开发者可视化和交互由OpenAPI规范定义的API端点。虽然它对测试和文档非常有用，但暴露或错误配置的Swagger实例可能导致严重的安全问题，如DOM XSS、HTML注入和开放重定向。随着漏洞赏金平台对此类漏洞的奖励，保护Swagger UI不仅至关重要，也是道德黑客的宝贵目标。&lt;/p&gt;
&lt;h2 id=&#34;为什么swagger-ui可能很危险&#34;&gt;为什么Swagger UI可能很危险
&lt;/h2&gt;&lt;p&gt;问题不在于Swagger本身，而在于开发者部署它的方式——有时公开部署，有时包含敏感端点，并且经常没有身份验证和输入清理。常见问题包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在互联网上暴露Swagger UI，包含生产端点。&lt;/li&gt;
&lt;li&gt;文档缺乏访问控制。&lt;/li&gt;
&lt;li&gt;输入清理不当，允许XSS和HTML注入。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;侦察阶段寻找swagger-ui&#34;&gt;侦察阶段——寻找Swagger UI
&lt;/h2&gt;&lt;p&gt;使用Subfinder收集所有子域名。关键技巧如下：&lt;/p&gt;
&lt;p&gt;命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;subfinder -d example&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;.&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;com --all &amp;gt;&amp;gt; subs.txt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;总是寻找类似&lt;code&gt;grafana.example.com&lt;/code&gt;的子域名，如果你找到这样的子域名，那么你就走运了！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Bykea漏洞报告：绕过青铜合作伙伴钱包限制接受负余额行程的技术分析</title>
        <link>http://localhost:1313/p/bykea%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A%E7%BB%95%E8%BF%87%E9%9D%92%E9%93%9C%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%E9%92%B1%E5%8C%85%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%97%E8%B4%9F%E4%BD%99%E9%A2%9D%E8%A1%8C%E7%A8%8B%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
        <pubDate>Sun, 03 Aug 2025 07:38:37 +0800</pubDate>
        
        <guid>http://localhost:1313/p/bykea%E6%BC%8F%E6%B4%9E%E6%8A%A5%E5%91%8A%E7%BB%95%E8%BF%87%E9%9D%92%E9%93%9C%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%E9%92%B1%E5%8C%85%E9%99%90%E5%88%B6%E6%8E%A5%E5%8F%97%E8%B4%9F%E4%BD%99%E9%A2%9D%E8%A1%8C%E7%A8%8B%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;漏洞技术细节&#34;&gt;漏洞技术细节
&lt;/h3&gt;&lt;p&gt;安全研究员&lt;code&gt;@bugbountywithmarco&lt;/code&gt;发现Bykea平台存在业务逻辑缺陷，允许钱包余额为负的青铜级合作伙伴绕过平台限制接受行程订单。通过串联调用三个后端API端点实现漏洞利用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;初始请求&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;GET /v2/:city_id/bookings&lt;/code&gt; 获取城市预订信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;位置更新&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;PUT /api/v2/driver/update/location&lt;/code&gt; 携带任意&lt;code&gt;trip_id&lt;/code&gt;更新司机位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;报价提交&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;POST /api/v2/offer/bid&lt;/code&gt; 提交行程报价&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;通过这种调用链，负余额司机可重置其可用状态并成功提交报价，从而绕过钱包余额限制非法获取行程订单。&lt;/p&gt;
&lt;h3 id=&#34;时间线摘要&#34;&gt;时间线摘要
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;2024-11-27 17:43 UTC 漏洞提交&lt;/li&gt;
&lt;li&gt;2024-11-28 07:19 UTC 获得赏金&lt;/li&gt;
&lt;li&gt;初始评级8.6（高危）后调整为6.5（中危）&lt;/li&gt;
&lt;li&gt;2025-06-13 漏洞报告公开&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;技术影响&#34;&gt;技术影响
&lt;/h3&gt;&lt;p&gt;该漏洞属于&lt;strong&gt;业务逻辑错误&lt;/strong&gt;类别，暴露了三个关键问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;端点权限校验不完善&lt;/li&gt;
&lt;li&gt;状态管理机制存在缺陷&lt;/li&gt;
&lt;li&gt;负余额检测逻辑可被绕过&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;平台最终通过增强钱包状态校验机制修复该漏洞。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>API安全测试清单：7个关键步骤</title>
        <link>http://localhost:1313/p/api%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E6%B8%85%E5%8D%957%E4%B8%AA%E5%85%B3%E9%94%AE%E6%AD%A5%E9%AA%A4/</link>
        <pubDate>Sun, 03 Aug 2025 03:42:17 +0800</pubDate>
        
        <guid>http://localhost:1313/p/api%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E6%B8%85%E5%8D%957%E4%B8%AA%E5%85%B3%E9%94%AE%E6%AD%A5%E9%AA%A4/</guid>
        <description>&lt;h1 id=&#34;api安全测试清单7个关键步骤&#34;&gt;API安全测试清单：7个关键步骤
&lt;/h1&gt;&lt;p&gt;API是恶意攻击者的常见攻击载体。使用我们的API安全测试清单和最佳实践来保护您的组织及其数据。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;作者&lt;/strong&gt;：Dave Shackleford（Voodoo Security）、Michael Cobb&lt;br&gt;
&lt;strong&gt;发布日期&lt;/strong&gt;：2024年11月1日&lt;/p&gt;
&lt;p&gt;API使应用程序能够交换和消费数据及服务。由于其能够访问组织的敏感数据，API成为恶意黑客和威胁行为者的诱人目标。组织必须保护其API，以保护企业资源以及使用API的其他应用程序和组织。&lt;/p&gt;
&lt;p&gt;团队应进行API安全测试，以确保API在负载下保持可用。测试还必须确定API暴露的数据和资源的机密性、完整性和可用性。API安全测试应全面且持续，以便解决漏洞发现和修复问题，并增强对攻击者的抵御能力。测试应证明安全控制的有效性，并在必要时提供需要修复的领域的见解。组织应将API测试与OpenAPI规范对齐，以确保其完整和彻底。&lt;/p&gt;
&lt;h2 id=&#34;api安全测试清单&#34;&gt;API安全测试清单
&lt;/h2&gt;&lt;p&gt;以下最佳实践可帮助确保API安全测试计划足够彻底，以有效防范API安全风险。&lt;/p&gt;
&lt;h3 id=&#34;1-确定谁对测试和维护api安全负总责&#34;&gt;1. 确定谁对测试和维护API安全负总责
&lt;/h3&gt;&lt;p&gt;许多团队参与API生命周期，项目在进展过程中会经历大量快速变化和迭代。重要的是指定一个人记录所有API，确保所有测试完成并采取行动。&lt;/p&gt;
&lt;p&gt;随着对云服务和Web应用程序环境的日益重视，与过去相比，可能有更多的业务部门和其他应用程序所有者参与API安全治理。这使得有一个中央联系点变得更加重要。&lt;/p&gt;
&lt;h3 id=&#34;2-为安全测试预算时间和资源&#34;&gt;2. 为安全测试预算时间和资源
&lt;/h3&gt;&lt;p&gt;安全测试需要时间和金钱，因此组织在启动新项目时需要考虑这些因素。威胁建模突出了需要缓解的潜在API风险和常见漏洞，但请注意，项目上线后维护和更新API测试的预算也是必要的。&lt;/p&gt;
&lt;p&gt;请注意，由第三方提供商开发和维护的任何API可能随时更改。安全和应用程序团队应确保在规划和项目周期中考虑动态API测试。&lt;/p&gt;
&lt;h3 id=&#34;3-注册分类并记录每个api的用途及其功能&#34;&gt;3. 注册、分类并记录每个API的用途及其功能
&lt;/h3&gt;&lt;p&gt;记录API及其用途。这些信息有助于测试评估API是否可以处理可接受的操作和有效数据，以及不可接受的操作或无效数据。诸如OpenAPI规范、AsyncAPI和GraphQL Introspection等标准使人类和机器能够发现和理解API的响应和能力。许多API工具使用这些规范来加速API的开发生命周期。&lt;/p&gt;
&lt;h3 id=&#34;4-尽早运行测试并尽可能自动化&#34;&gt;4. 尽早运行测试并尽可能自动化
&lt;/h3&gt;&lt;p&gt;如果在开发生命周期的早期发现安全问题，每个人都可以节省时间和金钱。有许多API安全工具可用，无论是开源还是许可的，都可以集成到现有的工作流程和持续集成/持续交付管道中。具有模拟服务的工具消除了构建生产系统全规模复制的需要。&lt;/p&gt;
&lt;p&gt;此外，确定谁将执行测试——开发人员、安全团队或外部渗透测试人员（如果内部缺乏技能）——以及何时运行测试。理想情况下，应在应用程序的每个构建上运行测试。许多API测试工具现在可以完全集成，以便按需进行持续或触发的测试。&lt;/p&gt;
&lt;h3 id=&#34;5-定义要运行的测试类型&#34;&gt;5. 定义要运行的测试类型
&lt;/h3&gt;&lt;p&gt;对API安全评估进行以下测试：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;无效输入&lt;/strong&gt;：API的输入应被视为来自不受信任的源，并相应地进行清理和验证。模糊测试可用于向API发送随机数据，以查看其是否可以在不崩溃的情况下处理意外数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注入攻击&lt;/strong&gt;：使用这些测试攻击来确保API拒绝尝试操纵后端数据库或在服务器上执行OS命令的请求，而不暴露任何敏感信息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参数篡改&lt;/strong&gt;：通过API请求发送的参数（如购物车中商品的价格）容易被攻击者更改。参数篡改检查API在处理参数之前是否验证和检查参数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未处理的HTTP方法&lt;/strong&gt;：使用所有八种HTTP方法发送请求，以确保不必要的&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>GraphQL API漏洞挖掘实战：漏洞赏金案例分析</title>
        <link>http://localhost:1313/p/graphql-api%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E6%88%98%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</link>
        <pubDate>Sat, 02 Aug 2025 18:15:58 +0800</pubDate>
        
        <guid>http://localhost:1313/p/graphql-api%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98%E5%AE%9E%E6%88%98%E6%BC%8F%E6%B4%9E%E8%B5%8F%E9%87%91%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h3 id=&#34;graphql与未授权数据访问漏洞&#34;&gt;GraphQL与未授权数据访问漏洞
&lt;/h3&gt;&lt;p&gt;0:19 章节探讨攻击者如何绕过权限控制获取敏感数据，包含HackerOne案例#343464分析&lt;/p&gt;
&lt;h3 id=&#34;graphql与未授权数据创建修改漏洞&#34;&gt;GraphQL与未授权数据创建/修改漏洞
&lt;/h3&gt;&lt;p&gt;2:15 演示通过GraphQL突变(Mutation)实现未授权数据操作的漏洞模式，引用HackerOne报告#2233480&lt;/p&gt;
&lt;h3 id=&#34;graphql与未授权数据删除漏洞&#34;&gt;GraphQL与未授权数据删除漏洞
&lt;/h3&gt;&lt;p&gt;3:27 分析危险的数据删除操作漏洞，涉及HackerOne案例#858671&lt;/p&gt;
&lt;h3 id=&#34;graphql如何导致dos攻击&#34;&gt;GraphQL如何导致DoS攻击
&lt;/h3&gt;&lt;p&gt;6:11 解析复杂查询嵌套导致的服务器资源耗尽问题，引用LANDH技术博客2024年3月分析报告&lt;/p&gt;
&lt;h3 id=&#34;graphql中的sql注入漏洞&#34;&gt;GraphQL中的SQL注入漏洞
&lt;/h3&gt;&lt;p&gt;7:29 展示GraphQL参数如何传导至后端数据库，包含HackerOne案例#435066的注入技术细节&lt;/p&gt;
&lt;h3 id=&#34;graphql模式泄露是否算漏洞&#34;&gt;GraphQL模式泄露是否算漏洞？
&lt;/h3&gt;&lt;p&gt;10:09 讨论introspection查询暴露API结构的风险，分析敏感信息泄露场景&lt;/p&gt;
&lt;h3 id=&#34;graphql的csrf攻击面&#34;&gt;GraphQL的CSRF攻击面
&lt;/h3&gt;&lt;p&gt;11:28 讲解跨站请求伪造在GraphQL中的特殊表现形式，引用Doyensec安全研究报告&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://bbre.dev/gql&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;获取完整案例研究&lt;/a&gt; | &lt;a class=&#34;link&#34; href=&#34;https://bbre.dev/nl&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;订阅邮件列表&lt;/a&gt; | &lt;a class=&#34;link&#34; href=&#34;https://bbre.dev/tw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关注Twitter&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关键资源链接已内嵌在时间轴章节中，包含DEF CON 32会议资料和GitHub OAuth CSRF绕过技术博客等专业参考内容。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
