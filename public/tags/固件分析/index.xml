<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>固件分析 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/</link>
        <description>Recent content in 固件分析 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 07:13:29 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E5%9B%BA%E4%BB%B6%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>路由器固件漏洞自动化挖掘：基于污点分析的规模化漏洞检测</title>
        <link>http://localhost:1313/p/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%96%E6%8E%98%E5%9F%BA%E4%BA%8E%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%84%E6%A8%A1%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</link>
        <pubDate>Sat, 09 Aug 2025 07:13:29 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%96%E6%8E%98%E5%9F%BA%E4%BA%8E%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%84%E6%A8%A1%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</guid>
        <description>&lt;h1 id=&#34;基于污点分析的路由器固件漏洞规模化挖掘&#34;&gt;基于污点分析的路由器固件漏洞规模化挖掘
&lt;/h1&gt;&lt;p&gt;在最近几个月的工作中，我们开发了一套基于污点分析的自动化工具，用于检测路由器中的安全漏洞。该工具针对D-Link DIR-878路由器1.12A1固件中的CVE-2019-8312至CVE-2019-8319等命令注入漏洞进行了优化设计，目标是实现比人工分析更快的漏洞发现速度。&lt;/p&gt;
&lt;h2 id=&#34;技术方案&#34;&gt;技术方案
&lt;/h2&gt;&lt;h3 id=&#34;现有工具局限性&#34;&gt;现有工具局限性
&lt;/h3&gt;&lt;p&gt;虽然Triton和bincat等成熟污点分析工具存在，但它们不支持目标设备使用的MIPS架构，因此我们选择基于angr框架开发定制方案。&lt;/p&gt;
&lt;h3 id=&#34;angr符号执行的瓶颈&#34;&gt;angr符号执行的瓶颈
&lt;/h3&gt;&lt;p&gt;初始方案使用angr的符号执行功能进行动态污点跟踪，但面临状态爆炸问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单个函数分析超时设置为2分钟&lt;/li&gt;
&lt;li&gt;实际分析耗时超过2小时&lt;/li&gt;
&lt;li&gt;存在内存泄漏导致内存耗尽&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;改进方案到达定义分析&#34;&gt;改进方案：到达定义分析
&lt;/h3&gt;&lt;p&gt;最终采用angr的Reaching Definitions静态分析技术：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构建函数内的use-def关系图&lt;/li&gt;
&lt;li&gt;将原子操作（寄存器/栈变量/堆变量）建模为图节点&lt;/li&gt;
&lt;li&gt;通过图遍历分析用户输入（source）是否影响危险函数（sink）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;示例漏洞代码分析：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;vuln&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;querystring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get_querystring_value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;querystring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;echo %s &amp;gt;&amp;gt; /tmp/log&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nf&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;对应的use-def关系图清晰地展示了从&lt;code&gt;get_querystring_value&lt;/code&gt;到&lt;code&gt;system&lt;/code&gt;的污染传播路径。&lt;/p&gt;
&lt;h2 id=&#34;漏洞发现成果&#34;&gt;漏洞发现成果
&lt;/h2&gt;&lt;h3 id=&#34;prolink-prc2402m路由器&#34;&gt;PROLiNK PRC2402M路由器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;发现20个命令注入漏洞（10个可通过WAN接口未授权访问）&lt;/li&gt;
&lt;li&gt;典型漏洞模式：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;qos_sta_settings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cli_list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;web_get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cli_list&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/sbin/sta_qos.sh setup %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cli_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;system&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;额外发现：
&lt;ul&gt;
&lt;li&gt;硬编码后门密码&lt;code&gt;user&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;栈溢出漏洞（未检查边界的sprintf）&lt;/li&gt;
&lt;li&gt;拒绝服务漏洞（通过超大循环值导致无限循环）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;d-link-dir系列路由器&#34;&gt;D-Link DIR系列路由器
&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;DIR-1960：发现4个需认证的HNAP API命令注入&lt;/li&gt;
&lt;li&gt;DIR-X1560（ARM架构）：
&lt;ul&gt;
&lt;li&gt;逆向分析复杂的分层架构（DAL/RCL/RUT）&lt;/li&gt;
&lt;li&gt;通过MDMOID映射表定位漏洞链&lt;/li&gt;
&lt;li&gt;最终发现4个深层命令注入漏洞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术演示&#34;&gt;技术演示
&lt;/h2&gt;&lt;p&gt;工具将分析时间从2小时缩短至2分钟，效率提升60倍。目前主要支持命令注入检测，未来计划扩展缓冲区溢出、UAF等漏洞类型的检测能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完整漏洞细节和厂商修复时间线请参阅原文技术分析部分。&lt;/p&gt;&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
