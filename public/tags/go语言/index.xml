<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Go语言 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/go%E8%AF%AD%E8%A8%80/</link>
        <description>Recent content in Go语言 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 11:01:26 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/go%E8%AF%AD%E8%A8%80/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>利用WebAssembly和Go进行本地端口扫描：浏览器如何成为攻击本地服务的入口</title>
        <link>http://localhost:1313/p/%E5%88%A9%E7%94%A8webassembly%E5%92%8Cgo%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%94%BB%E5%87%BB%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%A5%E5%8F%A3/</link>
        <pubDate>Sat, 09 Aug 2025 11:01:26 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%88%A9%E7%94%A8webassembly%E5%92%8Cgo%E8%BF%9B%E8%A1%8C%E6%9C%AC%E5%9C%B0%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%94%BB%E5%87%BB%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%85%A5%E5%8F%A3/</guid>
        <description>&lt;h1 id=&#34;浏览器是本地主机的网关使用webassembly和go进行客户端端口扫描&#34;&gt;浏览器是本地主机的网关：使用WebAssembly和Go进行客户端端口扫描
&lt;/h1&gt;&lt;p&gt;网站倾向于通过浏览器扫描用户的开放端口，以更好地识别新用户或回访用户。浏览器能否滥用“localhost”？能否通过WebAssembly实现这一点？本文将通过实际演示（http://ports.sh）和代码示例（https://github.com/avilum/portsscan）展示浏览器如何被滥用来攻击本地服务，甚至穿透组织或从浏览器运行远程代码。&lt;/p&gt;
&lt;h2 id=&#34;客户端指纹与代码执行&#34;&gt;客户端指纹与代码执行
&lt;/h2&gt;&lt;p&gt;每个用户在访问网页时都有独特的指纹。客户端指纹帮助网站在多个网站间跟踪用户活动。指纹由设备、浏览器、屏幕大小、IP地址等多种因素组合而成。网站（如eBay）通过JavaScript等前端技术在用户计算机上运行代码。随着技术的发展，JavaScript、TypeScript、Deno等语言逐渐普及，而WebAssembly（WASM）的出现使得下一代恶意软件更加复杂。&lt;/p&gt;
&lt;p&gt;WebAssembly运行时允许将语言编译为二进制代码，由浏览器的WebAssembly运行时执行。WASM不仅速度更快，还解耦了编程语言，专注于“做什么”。尽管WASM带来了许多新API和功能，但它也成为安全研究者和黑客的目标。目前，Rust、Go等语言已提供对WebAssembly的现成支持。&lt;/p&gt;
&lt;h2 id=&#34;研究webassembly运行时使用go&#34;&gt;研究WebAssembly运行时（使用Go）
&lt;/h2&gt;&lt;p&gt;本文探讨了如何通过浏览器上下文映射主机的开放端口，并使用低级语言实现。端口扫描技术用于发现资产和服务器，许多操作系统在启动时会在localhost上运行服务（如IPC、SSH、SMTP等）。通过WASM，可以轻松发现易受攻击的服务。&lt;/p&gt;
&lt;p&gt;作者选择Go语言，因其易于使用的Net/Socket和HTTP标准库API。以下是实现流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户访问网页。&lt;/li&gt;
&lt;li&gt;浏览器初始化WebAssembly运行时。&lt;/li&gt;
&lt;li&gt;自动运行编译为WebAssembly二进制的Go端口扫描器。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;编写端口扫描器&#34;&gt;编写端口扫描器
&lt;/h2&gt;&lt;p&gt;作者尝试了多种方法，发现浏览器代理（有时会阻止）WebAssembly请求和响应。最终选择使用Go的“http”包，因为浏览器主要处理应用层协议（如HTTP）。以下是关键发现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;响应分类&lt;/strong&gt;：连接拒绝（端口关闭）、超时（端口可能开放或关闭）、HTTP响应（端口开放且有HTTP服务）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CORS问题&lt;/strong&gt;：localhost的HTTP服务通常缺少跨域头，浏览器会阻止请求。通过添加特定HTTP头，作者成功绕过了这一问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TLS/SSL服务&lt;/strong&gt;：跳过SSL握手可以扫描任何TCP开放端口，而不仅是支持SSL的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实际演示&#34;&gt;实际演示
&lt;/h2&gt;&lt;p&gt;作者通过Python启动本地服务器（&lt;code&gt;python3 -m http.server 5000&lt;/code&gt;），并在浏览器中运行端口扫描。扫描结果通过netstat和nmap验证，确认了WASM扫描器的准确性。&lt;/p&gt;
&lt;h2 id=&#34;安全风险与攻击场景&#34;&gt;安全风险与攻击场景
&lt;/h2&gt;&lt;p&gt;localhost通常被视为“安全”环境，但本文展示了如何通过浏览器轻易扫描和攻击本地服务。以下是两个攻击场景：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Linux RPC漏洞（CVE-2017-8779）&lt;/strong&gt;：通过访问网页触发拒绝服务攻击。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows打印后台程序远程代码执行漏洞（CVE-2021-34527）&lt;/strong&gt;：利用浏览器访问本地服务，以SYSTEM权限运行任意代码。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;本文展示了网页如何通过WebAssembly与用户的本地主机服务通信，并映射其网络。尽管目前无法使用原始TCP/UDP会话，但随着WASI标准的推进，浏览器的攻击面将进一步扩大。WebAssembly和WASI是强大的技术，但浏览器作为操作系统的发展趋势也带来了严重的安全风险。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;演示地址&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP服务扫描：http://ports.sh&lt;/li&gt;
&lt;li&gt;HTTPS服务扫描：https://ports.sh&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;代码仓库&lt;/strong&gt;：https://github.com/avilum/portsscan（欢迎贡献！）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go语言访问控制指南：Java开发者必读</title>
        <link>http://localhost:1313/p/go%E8%AF%AD%E8%A8%80%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%8C%87%E5%8D%97java%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%85%E8%AF%BB/</link>
        <pubDate>Sun, 03 Aug 2025 21:41:56 +0800</pubDate>
        
        <guid>http://localhost:1313/p/go%E8%AF%AD%E8%A8%80%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%8C%87%E5%8D%97java%E5%BC%80%E5%8F%91%E8%80%85%E5%BF%85%E8%AF%BB/</guid>
        <description>&lt;h1 id=&#34;go语言访问控制指南java开发者必读&#34;&gt;Go语言访问控制指南：Java开发者必读
&lt;/h1&gt;&lt;p&gt;Go支持多种编程范式，包括面向对象编程。但如果你从Java转向Go，可能会感到些许&amp;hellip;呃&amp;hellip;不适应。最明显的差异之一是Go完全没有访问修饰符。你可能会疑惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我的&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;和&lt;code&gt;private&lt;/code&gt;关键字去哪了？&lt;/li&gt;
&lt;li&gt;Go提供了哪些访问控制机制？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;别担心！Go的访问控制比Java更简单。完全不需要访问修饰符！&lt;/p&gt;
&lt;h2 id=&#34;为什么go只需要两种访问级别&#34;&gt;为什么Go只需要两种访问级别
&lt;/h2&gt;&lt;p&gt;Java提供了四种访问级别，从最严格到最宽松依次是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：仅限同一类内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-private&lt;/code&gt;：仅限同一包内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;：允许同一包及(直接或间接)子类访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：完全开放访问&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;现在让我们砍掉其中两个！&lt;/p&gt;
&lt;h3 id=&#34;以包为封装单元&#34;&gt;以包为封装单元
&lt;/h3&gt;&lt;p&gt;Go允许定义具体类型（相当于Java的类），但：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;封装的基本单位是包，而不是像其他语言中的类型。
（来源：《Go编程语言》，Donovan &amp;amp; Kernighan，第6.6节）&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;结构体类型的字段对同一包内的所有代码可见。
（同上）&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;因此Go不需要区分&lt;code&gt;private&lt;/code&gt;和&lt;code&gt;package-private&lt;/code&gt;。现在剩下三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：仅限同一类内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-private&lt;/code&gt;：仅限同一包内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;：允许同一包及子类访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：完全开放访问&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;没有继承机制&#34;&gt;没有继承机制
&lt;/h3&gt;&lt;p&gt;最重要的是，Go不提供继承机制。因此Go不需要区分&lt;code&gt;package-private&lt;/code&gt;和&lt;code&gt;protected&lt;/code&gt;。最终只剩下两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：仅限同一类内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;package-private&lt;/code&gt;：仅限同一包内访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;：允许同一包及子类访问&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：完全开放访问&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;go的访问控制机制&#34;&gt;Go的访问控制机制
&lt;/h2&gt;&lt;p&gt;最终Go只需要两种访问级别：公开和包私有。不过Go的术语与Java不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;导出(exported)：相当于public&lt;/li&gt;
&lt;li&gt;非导出(non-exported)：相当于package-private&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（&amp;ldquo;unexported&amp;quot;是非正式的同义词，但建议使用更正式的&amp;quot;non-exported&amp;rdquo;）&lt;/p&gt;
&lt;p&gt;Go设计者选择用命名约定而非冗长的关键字来控制访问：&lt;/p&gt;
&lt;p&gt;标识符被导出的条件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;标识符名称首字母是大写的Unicode字符（Unicode类别&amp;quot;Lu&amp;quot;）&lt;/li&gt;
&lt;li&gt;标识符在包块中声明，或是字段名/方法名&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（强调部分）&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;Bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Bar&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 导出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;baz&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 不导出&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;Go的设计追求易读性，其访问控制设计显著提升了代码可读性：不仅摆脱了繁琐的访问修饰符，通过标识符首字母大小写就能判断是否导出。这是阅读Go代码比Java更轻松的原因之一——当然这只是我的个人观点。你怎么看？&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Go语言解析器中的意外安全陷阱</title>
        <link>http://localhost:1313/p/go%E8%AF%AD%E8%A8%80%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E7%9A%84%E6%84%8F%E5%A4%96%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/</link>
        <pubDate>Fri, 01 Aug 2025 22:04:53 +0800</pubDate>
        
        <guid>http://localhost:1313/p/go%E8%AF%AD%E8%A8%80%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E7%9A%84%E6%84%8F%E5%A4%96%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/</guid>
        <description>&lt;h1 id=&#34;go语言解析器中的意外安全陷阱&#34;&gt;Go语言解析器中的意外安全陷阱
&lt;/h1&gt;&lt;p&gt;在Go应用程序中，解析不可信数据会形成危险的攻击面。通过三个真实攻击场景，我们揭示了Go标准库解析器中的安全隐患：&lt;/p&gt;
&lt;h2 id=&#34;攻击场景1意外反序列化数据&#34;&gt;攻击场景1：意外(反)序列化数据
&lt;/h2&gt;&lt;p&gt;当开发者使用&lt;code&gt;json:&amp;quot;-&amp;quot;&lt;/code&gt;标记试图阻止字段被反序列化时，错误添加的逗号后缀会导致该字段仍可通过&lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt;键被修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;IsAdmin&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`json:&amp;#34;-,omitempty&amp;#34;`&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 错误配置：仍可通过{&amp;#34;-&amp;#34;:true}注入&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;我们创建的Semgrep规则可检测此类问题：&lt;code&gt;semgrep -c r/trailofbits.go.unmarshal-tag-is-dash&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;攻击场景2解析器差异&#34;&gt;攻击场景2：解析器差异
&lt;/h2&gt;&lt;p&gt;Go的JSON解析器存在两项危险特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;重复键处理&lt;/strong&gt;：总是取最后出现的键值&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大小写不敏感匹配&lt;/strong&gt;：&lt;code&gt;&amp;quot;action&amp;quot;&lt;/code&gt;、&lt;code&gt;&amp;quot;ACTION&amp;quot;&lt;/code&gt;甚至Unicode变体(&lt;code&gt;aKtionſ&lt;/code&gt;)都会被匹配&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当微服务架构中不同组件使用不同解析器时，这种差异会导致权限绕过：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;graph TD
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    A[恶意请求] --&amp;gt; B{&amp;#34;授权服务:解析为UserAction&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    A --&amp;gt; C{&amp;#34;业务服务:解析为AdminAction&amp;#34;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;攻击场景3数据格式混淆&#34;&gt;攻击场景3：数据格式混淆
&lt;/h2&gt;&lt;p&gt;通过构造特殊的多格式混合文件(Polyglot)，可使JSON/XML/YAML解析器解析同一文件时产生不同结果：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;action&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Action_1&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;aCtIoN&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Action_2&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;comment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;lt;action&amp;gt;Action_3&amp;lt;/action&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该payload会：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON解析为&lt;code&gt;Action_2&lt;/code&gt;（取最后匹配+大小写不敏感）&lt;/li&gt;
&lt;li&gt;YAML解析为&lt;code&gt;Action_1&lt;/code&gt;（精确匹配）&lt;/li&gt;
&lt;li&gt;XML解析为&lt;code&gt;Action_3&lt;/code&gt;（提取XML片段）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;防护建议&#34;&gt;防护建议
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;启用严格模式&lt;/strong&gt;：
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;decoder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;NewDecoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;decoder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;DisallowUnknownFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;期待JSON v2&lt;/strong&gt;：将默认禁止重复键并启用大小写敏感匹配&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;边界一致性检查&lt;/strong&gt;：跨服务处理时验证数据格式一致性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用静态分析&lt;/strong&gt;：我们提供的Semgrep规则可检测常见错误配置&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些解析器特性已导致真实漏洞，包括Hashicorp Vault认证绕过(CVE-2020-16250)等案例。开发者需要特别警惕大小写不敏感匹配这类Go特有行为。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
