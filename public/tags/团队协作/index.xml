<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>团队协作 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/</link>
        <description>Recent content in 团队协作 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 20:29:16 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E5%9B%A2%E9%98%9F%E5%8D%8F%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>代码与善意：软件工程中的人文关怀</title>
        <link>http://localhost:1313/p/%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%96%84%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BA%BA%E6%96%87%E5%85%B3%E6%80%80/</link>
        <pubDate>Sat, 09 Aug 2025 20:29:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%BB%A3%E7%A0%81%E4%B8%8E%E5%96%84%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B8%AD%E7%9A%84%E4%BA%BA%E6%96%87%E5%85%B3%E6%80%80/</guid>
        <description>&lt;h2 id=&#34;代码与善意&#34;&gt;代码与善意
&lt;/h2&gt;&lt;p&gt;人们很容易将软件开发视为纯粹的技术活动，认为人类因素无关紧要，一切只关乎计算机。然而事实恰恰相反——软件工程本质上是关于人的学科。&lt;/p&gt;
&lt;p&gt;多年来，许多试图修复软件开发问题的尝试之所以失败，正是因为只关注系统技术层面，而忽略了编写代码的是人类这一事实。当你看到有人更关心优化而非代码可读性，当你遇到拒绝写注释却花整天时间压缩shell脚本行数的人，当你遇见不善沟通却崇拜小体积二进制文件的同事——这些都是这个问题的不同症状。&lt;/p&gt;
&lt;h3 id=&#34;代码即思想&#34;&gt;代码即思想
&lt;/h3&gt;&lt;p&gt;软件系统由人编写，被人阅读，被人修改，被人理解（或不被理解）。它们是开发者思维的直接体现，是我们地球上最接近原始思想表达的形式。软件本身不具备人性、生命、智能、情感、善恶——这些特质属于人类。软件完全且仅用于服务人类。&lt;/p&gt;
&lt;h3 id=&#34;评审的艺术&#34;&gt;评审的艺术
&lt;/h3&gt;&lt;p&gt;假设有人写了段糟糕代码，你有两种反馈方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&amp;ldquo;难以置信你觉得这是个好主意。你读过软件设计书籍吗？显然你不该这么做&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;这行代码难以理解，而且存在重复。能否重构得更清晰？&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键区别在于：第一种是对开发者的攻击，第二种是对代码的改进建议。更重要的是——不要做个混蛋。第一种回应显然粗鲁，它不会让人愿意与你合作、贡献更多代码或寻求进步。而第二种方式既指出了问题，又维护了协作关系。&lt;/p&gt;
&lt;h3 id=&#34;善意的价值&#34;&gt;善意的价值
&lt;/h3&gt;&lt;p&gt;阻止提交糟糕代码的根本原因本就与人相关：或是为了终端用户，或是为了其他需要阅读系统的开发者。通常两者兼有，因为构建可维护系统完全是为了持续有效地帮助用户。&lt;/p&gt;
&lt;p&gt;虽然阅读代码和使用程序的人很多，而被评审者只是个体，但为何要在非必要时刻薄？为何要制造让团队成员害怕犯错而非乐于做对事情的环境？&lt;/p&gt;
&lt;h3 id=&#34;超越代码评审&#34;&gt;超越代码评审
&lt;/h3&gt;&lt;p&gt;这延伸到代码评审之外：其他工程师的意见值得倾听，无论你是否同意。礼貌回应他们的陈述，以建设性方式交流想法。有时人们会愤怒——请理解。有时你也会愤怒，那时你同样希望队友的理解。&lt;/p&gt;
&lt;p&gt;这不是说&amp;quot;所有人永远正确&amp;quot;或&amp;quot;永不指正错误&amp;quot;。世界上和软件工程中确实存在许多需要拒绝的错误事物。但即使面对真正的错误，粗鲁也无济于事——他们不需要你的仇恨，而需要你的理解和帮助。&lt;/p&gt;
&lt;p&gt;与人为善，协作共进，方能铸就更优秀的软件。&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
