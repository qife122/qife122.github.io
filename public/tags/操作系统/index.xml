<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>操作系统 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</link>
        <description>Recent content in 操作系统 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Tue, 05 Aug 2025 22:29:28 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>FreeBSD在亚马逊EC2平台的技术维护与发布工程实践</title>
        <link>http://localhost:1313/p/freebsd%E5%9C%A8%E4%BA%9A%E9%A9%AC%E9%80%8Aec2%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%B4%E6%8A%A4%E4%B8%8E%E5%8F%91%E5%B8%83%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Tue, 05 Aug 2025 22:29:28 +0800</pubDate>
        
        <guid>http://localhost:1313/p/freebsd%E5%9C%A8%E4%BA%9A%E9%A9%AC%E9%80%8Aec2%E5%B9%B3%E5%8F%B0%E7%9A%84%E6%8A%80%E6%9C%AF%E7%BB%B4%E6%8A%A4%E4%B8%8E%E5%8F%91%E5%B8%83%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h1 id=&#34;亚马逊资助下的freebsd年度技术总结&#34;&gt;亚马逊资助下的FreeBSD年度技术总结
&lt;/h1&gt;&lt;p&gt;自2010年首次在亚马逊EC2平台启动FreeBSD以来，我一直负责该平台的维护工作。2023年11月，我新增了FreeBSD发布工程负责人的角色——恰逢FreeBSD 14.0发布，虽然该版本的实际发布工作由Glen Barber完成。尽管获得Antithesis和FreeBSD/EC2 Patreon的少量资助，但很快发现发布工程职责正在挤占我用于FreeBSD/EC2开发的志愿时间：不仅长期的功能开发清单陷入停滞，对异常现象的调查也经常被迫推迟。到2024年初，我越来越担忧自己无法胜任FreeBSD/EC2平台&amp;quot;所有者&amp;quot;的角色。&lt;/p&gt;
&lt;p&gt;经过多年断断续续的协商，2024年4月终于与亚马逊达成通过GitHub Sponsors提供一年资助的协议。亚马逊名义上资助我每月40小时用于FreeBSD发布工程和EC2开发（实际投入约50小时/月），其中20小时专用于EC2问题，20小时用于版本发布，10小时处理其他发布工程事务。&lt;/p&gt;
&lt;h2 id=&#34;版本发布管理&#34;&gt;版本发布管理
&lt;/h2&gt;&lt;p&gt;按照我在2024年5月BSDCan开发者峰会上制定的&lt;a class=&#34;link&#34; href=&#34;https://www.freebsd.org/releases/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;季度发布计划&lt;/a&gt;，过去一年共管理四个版本发布：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;FreeBSD 13.4（2024年9月）&lt;/li&gt;
&lt;li&gt;FreeBSD 14.2（2024年12月）&lt;/li&gt;
&lt;li&gt;FreeBSD 13.5（2025年3月）&lt;/li&gt;
&lt;li&gt;FreeBSD 14.3（计划2025年6月10日）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每个版本的发布工作集中在&amp;quot;Beta月&amp;quot;（每季度第二个月），耗时从33.5小时（13.5版本）到79小时（14.2版本）不等。稳定分支后期的发布工作量显著降低，预计FreeBSD 15.0的发布将超过100小时。&lt;/p&gt;
&lt;h2 id=&#34;ec2平台关键技术突破&#34;&gt;EC2平台关键技术突破
&lt;/h2&gt;&lt;h3 id=&#34;graviton电源驱动开发&#34;&gt;Graviton电源驱动开发
&lt;/h3&gt;&lt;p&gt;在Graviton系统上，通过解析ACPI _AEI对象确定GPIO引脚配置，将其传递给PL061 GPIO控制器驱动。当该引脚被触发时，控制器生成中断引发ACPI&amp;quot;电源按钮&amp;quot;事件。值得注意的是，EC2提供的ACPI表中错误指定了&amp;quot;Pull Up&amp;quot;配置，而PL061控制器实际不具备上拉电阻。为此我们在FreeBSD/EC2 AMI中新增了ACPI_Q_AEI_NOPULL特性标志。&lt;/p&gt;
&lt;h3 id=&#34;设备热插拔支持&#34;&gt;设备热插拔支持
&lt;/h3&gt;&lt;p&gt;热卸载功能的实现面临多个实例类型的特定问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Graviton系统IRQ泄漏&lt;/strong&gt;：通过引导加载程序设置禁用传统PCI中断路由代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PCI电源状态误判&lt;/strong&gt;：新增ACPI_Q_CLEAR_PME_ON_DETACH特性在设备分离前清除电源管理寄存器&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;NVMe驱动崩溃&lt;/strong&gt;：由nvme驱动维护者修复&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PCI总线&amp;quot;幽灵设备&amp;quot;&lt;/strong&gt;：因Nitro固件异步操作导致，通过ACPI_Q_DELAY_BEFORE_EJECT_RESCAN特性增加10ms延迟&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;我们还优化了PCIe热插拔超时机制，在EC2环境下将默认5秒等待缩短为0，并开发了可连续300次插拔测试的验证脚本。&lt;/p&gt;
&lt;h2 id=&#34;启动性能深度优化&#34;&gt;启动性能深度优化
&lt;/h2&gt;&lt;p&gt;通过分析2018年以来的启动数据（启动超过1万个EC2实例），发现并解决了多个关键问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;根磁盘大小影响&lt;/strong&gt;：将磁盘从6GB扩容到8GB解决性能下降问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Graviton 2熵种子问题&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;修复EFI熵种子请求在EC2中的执行路径&lt;/li&gt;
&lt;li&gt;重构熵池初始化逻辑，使用PBKDF2将64字节扩展为2048字节&lt;/li&gt;
&lt;li&gt;使arm64/UFS镜像启动时间从25秒降至8秒&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ZFS性能问题&lt;/strong&gt;：通过调整makefs事务组记录，将启动时间从22秒降至11秒&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;IMDSv2 IPv6支持缺陷&lt;/strong&gt;：修正连接优先级和超时设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;系统镜像生态扩展&#34;&gt;系统镜像生态扩展
&lt;/h2&gt;&lt;p&gt;新增两种AMI类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;small镜像&lt;/strong&gt;：移除调试符号等非必要组件，体积从5GB降至1GB&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;builder镜像&lt;/strong&gt;：提供定制化FreeBSD AMI的构建环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;同时优化镜像管理，清理了336TB历史EBS快照。&lt;/p&gt;
&lt;h2 id=&#34;发布工程体系改进&#34;&gt;发布工程体系改进
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;并行构建系统&lt;/strong&gt;：通过修复Makefile目录创建依赖，将发布构建时间从22小时缩短至13小时&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;构建可重现性&lt;/strong&gt;：利用EC2实例进行差异分析（diffoscope），发现并修复多个构建一致性问题&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;未来展望&#34;&gt;未来展望
&lt;/h2&gt;&lt;p&gt;随着资助期结束，FreeBSD 15.0及后续版本的发布将继续推进，但EC2平台的功能开发（如EBS卷自动扩容、网络接口热插拔支持等）可能放缓。这一年的资助使FreeBSD在云平台的支持达到新高度，相关技术成果将持续惠及整个开源社区。&lt;/p&gt;
&lt;p&gt;（原文发布于2025-06-06，经技术内容提取和结构化处理）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>消失的操作系统：数据中心OS的技术演进与挑战</title>
        <link>http://localhost:1313/p/%E6%B6%88%E5%A4%B1%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83os%E7%9A%84%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B%E4%B8%8E%E6%8C%91%E6%88%98/</link>
        <pubDate>Mon, 04 Aug 2025 10:40:26 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%B6%88%E5%A4%B1%E7%9A%84%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%BF%83os%E7%9A%84%E6%8A%80%E6%9C%AF%E6%BC%94%E8%BF%9B%E4%B8%8E%E6%8C%91%E6%88%98/</guid>
        <description>&lt;h1 id=&#34;消失的操作系统&#34;&gt;消失的操作系统
&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;前言
&lt;/h2&gt;&lt;p&gt;2011年我加入谷歌时，曾引用朋友的一句玩笑：&amp;ldquo;世界上大约有一台半计算机，谷歌拥有其中一台。&amp;ldquo;自2011年以来世界已发生巨变，现在全球可能有五六台这样的&amp;quot;计算机&amp;rdquo;。在下文中，当我说&amp;quot;计算机&amp;quot;时，指的是由大量独立机器连接组成的、能像单台计算机一样运作的超大规模集群。&lt;/p&gt;
&lt;h2 id=&#34;正文&#34;&gt;正文
&lt;/h2&gt;&lt;p&gt;现代微服务部署的技术生态令人困惑——变化迅速，大量表面相似的项目声称能实现类似功能。即使对我这样深耕技术领域的人而言，不同项目的精确用途也不总是清晰的。&lt;/p&gt;
&lt;p&gt;我多次提及&amp;quot;数据中心操作系统&amp;quot;的概念（至少&lt;a class=&#34;link&#34; href=&#34;%e9%93%be%e6%8e%a51&#34; &gt;这里&lt;/a&gt;和&lt;a class=&#34;link&#34; href=&#34;%e9%93%be%e6%8e%a52&#34; &gt;这里&lt;/a&gt;），自2015年从谷歌休假以来一直在思考这个问题。最近与一群性能工程师（他们处于开发与运维的交汇点）的交流促使我写下这些思考。这是第一篇相关文章，后续可能还有更多（特别是关于其安全模型的内容）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：本文纯属个人观点，包含大量未经科学验证的主张。我经常犯错。&lt;/p&gt;
&lt;p&gt;我的核心观点是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;计算机发展初期，经过数十年才出现真正的&amp;quot;操作系统&amp;rdquo;。在真正OS出现前，存在许多&amp;quot;原型OS&amp;quot;——需要单独管理拼凑的工具集合。当时全球计算机数量稀少，使用计算机需在大型研究机构工作。这些机器运行着为该计算机专门拼凑的独特OS。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;大约从2007年开始，我们正经历第二个类似时期：&amp;ldquo;单台计算机&amp;quot;模式被&amp;quot;仓库级计算机&amp;quot;取代。最初只有少数财力雄厚的组织能拥有这样的计算机，但云计算使得没有数十亿美元建设完整数据中心的公司也能使用&amp;quot;大量小型独立计算机&amp;rdquo;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;超大规模企业（谷歌、Facebook，也包括腾讯等）内部正在构建&amp;quot;原型数据中心OS&amp;quot;；亚马逊正在将其部分系统外部化；大量构成数据中心OS的独立组件已作为开源项目存在。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;但目前尚不存在一个普通公司可以直接安装的完整数据中心OS&lt;/strong&gt;。存在一个&amp;quot;消失的OS&amp;quot;——安装在大量计算机集合上的软件，将这些计算机集合转变为&amp;quot;一台计算机&amp;quot;。&lt;/p&gt;
&lt;h2 id=&#34;数据中心os的组成&#34;&gt;数据中心OS的组成
&lt;/h2&gt;&lt;p&gt;观察现代技术栈会发现一个惊人的趋同现象——不在于人们实际运行的软件，而在于需要实现的&amp;quot;角色&amp;quot;。每个角色通常都有多种不同的实现方案。每个大规模分布式基础设施都包含以下组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;集群级文件系统&lt;/strong&gt;：谷歌内部使用GFS/Colossus，外部可能是GlusterFS等。许多公司最终使用S3，因为现有方案不够理想。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;水平可扩展键值存储&lt;/strong&gt;：谷歌内部用BigTable，外部可能是Cassandra、Scylla，甚至ElasticSearch（勉强算）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分布式一致性键值存储&lt;/strong&gt;：谷歌内部用Chubby，外部用etcd。大多数应用不直接使用，主要用于集群管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;发布/订阅消息队列系统&lt;/strong&gt;：如PubSub、Kafka、AWS的SQS或RabbitMQ。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;任务调度/容器编排系统&lt;/strong&gt;：根据可用资源、待运行任务和约束条件，解决受限的装箱优化问题以确保资源合理利用。如Borg，某种程度上也包括Kubernetes。可能与MapReduce风格的批量工作负载基础设施集成以利用闲置CPU周期。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缺失的工具与挑战&#34;&gt;缺失的工具与挑战
&lt;/h2&gt;&lt;p&gt;思考&amp;quot;单机OS上有哪些组件应该在数据中心OS中存在&amp;quot;非常有价值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;人们通过Prometheus和各种数据收集代理构建了近似&amp;quot;进程管理器&amp;quot;的工具&lt;/li&gt;
&lt;li&gt;分布式追踪（公认的必需品）实质上是数据中心版的strace&lt;/li&gt;
&lt;li&gt;&amp;ldquo;数据中心版的syslog是什么&amp;quot;同样是个有趣问题&lt;/li&gt;
&lt;li&gt;大量可观测性工程实质是将单机自省能力移植到&amp;quot;计算机&amp;quot;上&lt;/li&gt;
&lt;li&gt;人们谈论的&amp;quot;服务网格&amp;quot;是否只是数据中心版的portmapper？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有一些功能我们完全不知道如何构建对应方案。比如&amp;quot;计算机&amp;quot;的&amp;quot;调试器&amp;quot;应该是什么样子？显然，在单主机上单步执行不是解决现代分布式系统问题的正确方式——你的服务可能与数十台其他主机交互，这些主机可能同时崩溃（或逐渐停止等），重新启动和单步执行极其困难。&lt;/p&gt;
&lt;p&gt;除了需要为&amp;quot;计算机&amp;quot;重建的众多监控、开发和调试工具外，还有许多更基础的问题没有满意答案。&lt;strong&gt;安全领域尤其未知&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;什么是这台&amp;quot;计算机&amp;quot;的&amp;quot;特权进程&amp;rdquo;？&lt;/li&gt;
&lt;li&gt;权限和信任边界是什么？&lt;/li&gt;
&lt;li&gt;用户管理如何工作？&lt;/li&gt;
&lt;li&gt;跨服务认证和凭据委派如何实现？&lt;/li&gt;
&lt;li&gt;如何避免将James Forshaw在其幻灯片中描述的所有单机权限提升漏洞重新引入我们的新OS和各种服务？&lt;/li&gt;
&lt;li&gt;是否有办法确保Linux内核的/mm单个漏洞不会导致整个安全模型崩溃？&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;结语&#34;&gt;结语
&lt;/h2&gt;&lt;p&gt;简而言之，我认为正在浮现的数据中心OS是计算机科学几十年来最激动人心的发展。有时我希望自己更擅长说服亿万富翁投资几亿美元解决有趣问题——因为如果有我想致力于解决的问题，那就是开发一个FOSS数据中心OS——&amp;ldquo;在N台机器上安装这个，你就拥有了&amp;rsquo;一台计算机&amp;rsquo;&amp;quot;。如果思考&amp;quot;这个特定组件在&amp;rsquo;计算机&amp;rsquo;中实现什么功能？这个项目的单机等价物是什么？&amp;quot;，许多技术景观会更容易理解。&lt;/p&gt;
&lt;p&gt;本文可能会有后续，因为关于这个话题我还有更多不成熟的想法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据中心OS的安全模型&lt;/li&gt;
&lt;li&gt;Kubernetes：你想成为调度器还是OS？只能选一个&lt;/li&gt;
&lt;li&gt;如何获得bash脚本的强大功能，但针对2万台机器的集群？&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
