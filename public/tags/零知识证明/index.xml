<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>零知识证明 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/</link>
        <description>Recent content in 零知识证明 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Wed, 06 Aug 2025 15:21:08 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>阈值密码学实现中的多个CVE漏洞分析</title>
        <link>http://localhost:1313/p/%E9%98%88%E5%80%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcve%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
        <pubDate>Wed, 06 Aug 2025 15:21:08 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E9%98%88%E5%80%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcve%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
        <description>&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;io.finnet委托我们对基于Canetti等人论文《UC Non-Interactive, Proactive, Threshold ECDSA with Identifiable Aborts》的Go语言实现tss-lib进行代码审计。审计发现的高危漏洞已分配CVE编号：CVE-2022-47930、CVE-2022-47931、CVE-2023-26556和CVE-2023-26557。&lt;/p&gt;
&lt;h2 id=&#34;安全问题描述&#34;&gt;安全问题描述
&lt;/h2&gt;&lt;h3 id=&#34;cve-2022-47930涉及证明的重放攻击&#34;&gt;CVE-2022-47930：涉及证明的重放攻击
&lt;/h3&gt;&lt;p&gt;多数MPC阈值方案使用零知识证明防止参与者作弊。但该实现中Fiat-Shamir变换的挑战值未包含会话ID、上下文字符串或随机数，导致可能重放攻击。具体表现为Schnorr知识证明的挑战计算未使用会话ID：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Fig 22.2 e&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;big&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;eHash&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;common&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SHA512_256i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;g&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;common&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RejectionSample&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;eHash&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;该问题同样影响方案中的其他零知识证明（dec、affg、enc、logstar和mul）。&lt;/p&gt;
&lt;h3 id=&#34;cve-2022-47931哈希值碰撞&#34;&gt;CVE-2022-47931：哈希值碰撞
&lt;/h3&gt;&lt;p&gt;函数&lt;code&gt;SHA512_256&lt;/code&gt;和&lt;code&gt;SHA512_256i&lt;/code&gt;在哈希拼接时使用&amp;quot;$&amp;ldquo;作为分隔符，但该字符可能包含在输入值中导致碰撞。例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a$&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;和&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;会产生相同哈希值。这破坏了随机预言机假设，可能被用于构造恶意参数。&lt;/p&gt;
&lt;h3 id=&#34;cve-2023-2655626557非恒定时间运算&#34;&gt;CVE-2023-26556/26557：非恒定时间运算
&lt;/h3&gt;&lt;p&gt;这两个漏洞涉及敏感操作中使用Go的非常数时间算法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;big.Int&lt;/code&gt;的模幂运算可能泄露Paillier私钥的lambda值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;crypto/elliptic&lt;/code&gt;包的secp256k1曲线实现缺少恒定时间标量乘法，可能泄露秘密标量（如密钥份额x）&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;结论建议&#34;&gt;结论建议
&lt;/h2&gt;&lt;p&gt;密码协议实现应严格遵循论文规范，避免安全假设的偏差。公开这些漏洞细节有助于提升方案的安全性。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>密码学专家解答10大关键技术问题 - 深入解析密码学原理与应用</title>
        <link>http://localhost:1313/p/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%93%E5%AE%B6%E8%A7%A3%E7%AD%9410%E5%A4%A7%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98-%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/</link>
        <pubDate>Sat, 02 Aug 2025 13:46:58 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B8%93%E5%AE%B6%E8%A7%A3%E7%AD%9410%E5%A4%A7%E5%85%B3%E9%94%AE%E6%8A%80%E6%9C%AF%E9%97%AE%E9%A2%98-%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90%E5%AF%86%E7%A0%81%E5%AD%A6%E5%8E%9F%E7%90%86%E4%B8%8E%E5%BA%94%E7%94%A8/</guid>
        <description>&lt;h2 id=&#34;密码学专家解答10大关键技术问题&#34;&gt;密码学专家解答10大关键技术问题
&lt;/h2&gt;&lt;p&gt;密码学是电子设备和互联网的基础组成部分，它保护着信用卡、手机、网页浏览（希望您正在使用TLS！）甚至绝密军事数据的安全。在区块链领域，密码学同样至关重要，以太坊等区块链依赖哈希、Merkle树和ECDSA签名等原语来运行。配对密码学、全同态加密和零知识证明等创新技术也已进入区块链领域。&lt;/p&gt;
&lt;h3 id=&#34;1-snarks最常用的承诺方案有哪些&#34;&gt;1. SNARKs最常用的承诺方案有哪些？
&lt;/h3&gt;&lt;p&gt;多项式承诺方案是一种协议，证明者承诺某个多项式并生成证明表明该承诺有效。该协议包含三个主要算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Commit&lt;/li&gt;
&lt;li&gt;Open&lt;/li&gt;
&lt;li&gt;Verify&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在提交阶段，证明者发送其承诺——即他们在给定点对多项式f的评估值（即满足f(x)=a的值a）。该承诺应具有绑定性质，意味着一旦证明者承诺了某个多项式，他们就不能&amp;quot;改变主意&amp;quot;并为另一个多项式生成有效证明。它还可能具有隐藏性质，即在密码学上难以提取满足f(x)=a的值x。&lt;/p&gt;
&lt;p&gt;最常见的生产环境中使用的承诺方案包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;KZG(Kate-Zaverucha-Goldberg)，例如用于EIP 4844中的danksharding&lt;/li&gt;
&lt;li&gt;FRI(快速Reed-Solomon交互式Oracle接近性证明)，用于STARKs&lt;/li&gt;
&lt;li&gt;像Pedersen承诺这样的承诺方案，用于Bulletproofs等证明系统(被Monero和Zcash使用)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-哈希构造mdsponge有何区别&#34;&gt;2. 哈希构造(MD、Sponge)有何区别？
&lt;/h3&gt;&lt;p&gt;大多数人所熟悉的哈希函数，如MD5和SHA1，都是Merkle-Damgard构造。而我们熟知且喜爱的keccak256函数则是海绵构造。&lt;/p&gt;
&lt;p&gt;在Merkle-Damgard构造中，任意长度的消息被解析为特定大小的块。关键部分是压缩函数应用于每个块，使用前一个块作为下一个压缩函数的密钥(对于第一个块，我们使用IV或初始化向量代替)。&lt;/p&gt;
&lt;p&gt;相比之下，海绵构造不使用压缩函数。海绵构造的核心包括两个阶段：一个&amp;quot;吸收&amp;quot;阶段，其中消息的部分与初始状态进行异或运算，同时对它应用置换函数；然后是一个&amp;quot;挤压&amp;quot;阶段，其中输出的部分被提取并作为哈希输出。&lt;/p&gt;
&lt;h3 id=&#34;3-椭圆曲线密码学ecc的理论攻击有哪些&#34;&gt;3. 椭圆曲线密码学(ECC)的理论攻击有哪些？
&lt;/h3&gt;&lt;p&gt;ECC通常被视为密码学中复杂且有些神秘的部分，容易受到各种技术攻击。两个值得注意的理论攻击是Weil下降和MOV攻击。&lt;/p&gt;
&lt;p&gt;Weil下降攻击：这种方法涉及使用代数几何中的概念，特别是称为Weil下降的技术。其思想是将离散对数问题从其原始形式的椭圆曲线(复杂的代数结构)转换为更简单的代数结构(如超椭圆曲线)上的类似问题。&lt;/p&gt;
&lt;p&gt;MOV攻击：该攻击使用称为Weil配对的数学函数将椭圆曲线离散对数问题(ECDLP)转换为有限域中的离散对数问题，这是一个不同的数学设置。&lt;/p&gt;
&lt;h3 id=&#34;4-后量子密码系统如基于格和基于同源的密码学概述&#34;&gt;4. 后量子密码系统(如基于格和基于同源的密码学)概述
&lt;/h3&gt;&lt;p&gt;基于格的密码学使用格(显然)，它是基向量的整数线性组合。关于格有许多难题，如最短向量问题(给定基，找到格中最短的向量)和最接近向量问题(给定格和格外的点p，找到格中最接近p的点)。&lt;/p&gt;
&lt;p&gt;另一方面，基于同源的密码学涉及使用同源(显然)，这是椭圆曲线之间的同态。我们可以使用这些同源创建标准椭圆曲线Diffie-Hellman密钥交换的后量子版本。&lt;/p&gt;
&lt;h3 id=&#34;5-fiat-shamir启发式方法有哪些注意事项&#34;&gt;5. Fiat-Shamir启发式方法有哪些注意事项？
&lt;/h3&gt;&lt;p&gt;Fiat-Shamir用于将交互式Oracle证明系统转换为非交互式证明系统。这允许证明者证明计算的结果，而不需要验证者在线。这是通过获取公共输入的哈希并将该哈希解释为随机输入来实现的。&lt;/p&gt;
&lt;p&gt;需要注意的几个与安全相关的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哈希必须包含所有公共输入&lt;/li&gt;
&lt;li&gt;即使使用强Fiat-Shamir变换，也可能出现更微妙的理论问题&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6-plonk交互式oracle证明系统的最新进展&#34;&gt;6. PLONK交互式Oracle证明系统的最新进展
&lt;/h3&gt;&lt;p&gt;交互式Oracle证明是SNARKs中的主要信息理论组件，它允许证明者生成证明，以高概率发现伪造证明的方式&amp;quot;说服&amp;quot;验证者的&amp;quot;知识&amp;quot;。&lt;/p&gt;
&lt;p&gt;PLONK证明系统的变体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Turboplonk：支持两个以上输入的自定义门&lt;/li&gt;
&lt;li&gt;UltraPLONK：支持查找表&lt;/li&gt;
&lt;li&gt;Hyperplonk：消除了对数论变换(NTT)的需求&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7-构建zkevm的各种设计决策type-123等&#34;&gt;7. 构建zkEVM的各种设计决策(Type 1/2/3等)
&lt;/h3&gt;&lt;p&gt;不同类型的zkEVM可以根据它们与以太坊的&amp;quot;完全兼容性&amp;quot;来考虑，Type 1最等效，Type 4最不等效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Type 1 zkEVMs在各方面等同于以太坊的执行和共识层&lt;/li&gt;
&lt;li&gt;Type 2 zkEVMs旨在实现EVM等效&lt;/li&gt;
&lt;li&gt;Type 3 zkEVMs通过使用更少的等效性实现更快的证明时间&lt;/li&gt;
&lt;li&gt;Type 4 zkEVMs旨在将Solidity和Vyper等语言编译为ZK友好格式以生成证明&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8-zkevms的进一步改进&#34;&gt;8. zkEVMs的进一步改进
&lt;/h3&gt;&lt;p&gt;虽然从理论上讲，构建zkEVM和创建高效证明的主要挑战可以通过plonkish算术化、查找和增量可验证组合(IVC)的组合来解决，但在我们真正实现ZK证明所承诺的大规模可扩展性之前，仍存在许多工程挑战。&lt;/p&gt;
&lt;p&gt;可能的进一步优化包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用更小的字段&lt;/li&gt;
&lt;li&gt;硬件改进和并行化&lt;/li&gt;
&lt;li&gt;理论改进&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9-shamir的秘密共享方案及其常见错误&#34;&gt;9. Shamir的秘密共享方案及其常见错误
&lt;/h3&gt;&lt;p&gt;Shamir的秘密共享(SSS)是一种在各方之间分割一组秘密的方法，使得一组参与者可以合作恢复秘密，但任何数量少于阈值的参与者都无法了解任何信息。&lt;/p&gt;
&lt;p&gt;需要注意的几个可能使SSS或Feldman的可验证秘密共享完全不安全的&amp;quot;陷阱&amp;quot;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;向参与者共享0点会无意中泄露秘密&lt;/li&gt;
&lt;li&gt;确保共享之间的差异不为0或模等价&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10-递归证明的折叠方案如何工作&#34;&gt;10. 递归证明的折叠方案如何工作？
&lt;/h3&gt;&lt;p&gt;折叠方案是增量可验证计算问题的一种解决方案。折叠方案起源于Nova，并引入了一个新想法：验证者不会在每次调用F时验证SNARK，而是将当前实例&amp;quot;折叠&amp;quot;到累加器中。&lt;/p&gt;
&lt;p&gt;对折叠方案的几项更新和改进已经完成。例如，Sangria方案将折叠推广到Plonkish算术化，而不仅仅是R1CS。HyperNova将Nova推广到可定制约束系统(CCS)，这是一个更通用的约束系统，可以表达Plonkish和AIR算术化。&lt;/p&gt;
&lt;h2 id=&#34;迈向更好的密码学安全&#34;&gt;迈向更好的密码学安全
&lt;/h2&gt;&lt;p&gt;密码学不断发展，理论与实现之间的差距越来越小。更多有趣的密码学协议和新颖的实现正在各处涌现，包括多方计算、增量可验证组合、全同态加密以及介于两者之间的一切。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Circomspect工具正式集成至Sindri CLI——零知识证明电路开发迎来安全增强</title>
        <link>http://localhost:1313/p/circomspect%E5%B7%A5%E5%85%B7%E6%AD%A3%E5%BC%8F%E9%9B%86%E6%88%90%E8%87%B3sindri-cli%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%94%B5%E8%B7%AF%E5%BC%80%E5%8F%91%E8%BF%8E%E6%9D%A5%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA/</link>
        <pubDate>Sat, 02 Aug 2025 12:58:09 +0800</pubDate>
        
        <guid>http://localhost:1313/p/circomspect%E5%B7%A5%E5%85%B7%E6%AD%A3%E5%BC%8F%E9%9B%86%E6%88%90%E8%87%B3sindri-cli%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E7%94%B5%E8%B7%AF%E5%BC%80%E5%8F%91%E8%BF%8E%E6%9D%A5%E5%AE%89%E5%85%A8%E5%A2%9E%E5%BC%BA/</guid>
        <description>&lt;p&gt;我们的静态分析工具Circomspect现已正式集成至Sindri命令行界面（CLI）！Circomspect专为帮助开发者更安全地构建Circom电路而设计，特别是在该新型编程框架工具支持有限的情况下。此次集成标志着Circomspect向更广泛使用迈出重要一步，从而为编写Circom电路的开发者提供更好支持。&lt;/p&gt;
&lt;p&gt;开发零知识证明电路是项艰巨任务。即使忽略技术复杂性，在Circom等平台上运行非基础电路也需要极高的计算资源：基础测试可能耗时数分钟（或更久），这将大幅延长开发周期。Sindri通过让用户访问能显著加速电路执行的专用硬件来缓解该问题。其简洁的API和CLI工具使开发者无需自行管理基础设施即可将电路与专用硬件集成。&lt;/p&gt;
&lt;p&gt;Sindri Labs首席执行官Stasia Carson对此表示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;我们持续聚焦于让Sindri CLI对电路开发者更具普适价值，无论其是否使用Sindri服务。关键在于通过优化Docker容器实现无安装工具分发，并为静态分析、代码检查、编译和验证等工具提供统一的跨框架接口。Circomspect是开发安全Circom电路的关键工具，坦白说它可能是所有框架中最佳的安全工具，因此我们视其为最重要的集成之一。&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;此次集成对Circomspect具有里程碑意义。随着用户群体扩大，我们计划扩展更多分析功能，相关进展将在年内陆续公布。请持续关注我们的博客，获取关于Circomspect和零知识证明电路开发的最新动态！&lt;/p&gt;
</description>
        </item>
        <item>
        <title>揭秘Shamir秘密共享漏洞与ZKDocs发布</title>
        <link>http://localhost:1313/p/%E6%8F%AD%E7%A7%98shamir%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ezkdocs%E5%8F%91%E5%B8%83/</link>
        <pubDate>Sat, 02 Aug 2025 00:55:39 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E6%8F%AD%E7%A7%98shamir%E7%A7%98%E5%AF%86%E5%85%B1%E4%BA%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ezkdocs%E5%8F%91%E5%B8%83/</guid>
        <description>&lt;p&gt;Trail of Bits公开披露两个影响Binance阈值签名方案库(tss-lib)及其主要活跃分叉项目的漏洞。受影响代码库包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Binance的tss-lib&lt;/li&gt;
&lt;li&gt;Clover Network的threshold-crypto&lt;/li&gt;
&lt;li&gt;Keep Network的keep-ecdsa&lt;/li&gt;
&lt;li&gt;Swingby的tss-lib&lt;/li&gt;
&lt;li&gt;THORchain的tss-lib&lt;/li&gt;
&lt;li&gt;ZenGo X的curv&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;攻击者只需在密钥生成或重新共享协议启动时配置恶意ID，即可窃取其他用户的私钥或使其节点崩溃。&lt;/p&gt;
&lt;p&gt;阈值签名方案是强大的密码学工具，但需要零知识证明、承诺方案和可验证秘密共享等复杂非标准化原语。由于缺乏实施指南，实践中常出现类似我们披露的这两个漏洞。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阈值签名方案原理&lt;/strong&gt;&lt;br&gt;
阈值签名允许用户组共同控制签名私钥，与多重签名(multisig)的区别在于：多重签名每个用户持有独立密钥，而阈值签名中每个用户持有同一密钥的份额。阈值签名只需生成一个组签名。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可验证秘密共享(VSS)&lt;/strong&gt;&lt;br&gt;
Shamir秘密共享通过生成t-1次随机多项式（常数项设为密钥值），在n个不同点求值创建份额。Feldman方案在此基础上增加了可验证性。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;漏洞技术细节&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;零值泄露漏洞&lt;/strong&gt;：当多项式在x=0处求值时直接泄露常数项密钥。虽然多数实现通过检查ID非零来防护，但未对椭圆曲线群阶取模检查，导致设置ID为群阶q时仍会泄露密钥。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;模运算崩溃漏洞&lt;/strong&gt;：计算拉格朗日系数时，若IDi ≡ SelfID (mod q)，会导致模逆不存在。脆弱实现未验证模逆直接解引用空指针。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;ZKDocs发布&lt;/strong&gt;&lt;br&gt;
我们推出非标准化密码原语文档ZKDocs，包含秘密共享等协议的完整实现细节和安全考量。例如关于零值份额漏洞的详细分析可在ZKDocs的秘密共享章节查阅。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间线&lt;/strong&gt;&lt;br&gt;
2021.10.19 发现tss-lib数据泄露&lt;br&gt;
2021.12.06 向各厂商报告&lt;br&gt;
截至2021.12.20，除Clover外所有厂商均已修复&lt;/p&gt;
&lt;p&gt;Binance、Keep Network等团队已提交修复补丁。我们呼吁开发者：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;模运算前必须进行模约简&lt;/li&gt;
&lt;li&gt;始终验证模逆和模平方根操作&lt;/li&gt;
&lt;li&gt;必要时联系专业审计&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>用零知识证明重塑漏洞披露机制 - 突破性技术解析</title>
        <link>http://localhost:1313/p/%E7%94%A8%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E9%87%8D%E5%A1%91%E6%BC%8F%E6%B4%9E%E6%8A%AB%E9%9C%B2%E6%9C%BA%E5%88%B6-%E7%AA%81%E7%A0%B4%E6%80%A7%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</link>
        <pubDate>Fri, 01 Aug 2025 23:16:03 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E7%94%A8%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E9%87%8D%E5%A1%91%E6%BC%8F%E6%B4%9E%E6%8A%AB%E9%9C%B2%E6%9C%BA%E5%88%B6-%E7%AA%81%E7%A0%B4%E6%80%A7%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</guid>
        <description>&lt;h1 id=&#34;用零知识证明重塑漏洞披露机制&#34;&gt;用零知识证明重塑漏洞披露机制
&lt;/h1&gt;&lt;p&gt;我们与约翰霍普金斯大学的合作伙伴Matthew Green正在利用零知识证明（ZK）技术建立一个可信环境，使科技公司与漏洞研究者能够安全沟通而不必担心破坏或纠纷。这项为期四年的研究将推动ZK证明从理论走向实践，为研究者提供能生成漏洞可利用性ZK证明的软件工具。该研究隶属于DARPA&amp;quot;加密验证与评估信息保护&amp;quot;（SIEVE）计划。&lt;/p&gt;
&lt;h2 id=&#34;为什么需要漏洞可利用性的zk证明&#34;&gt;为什么需要漏洞可利用性的ZK证明？
&lt;/h2&gt;&lt;p&gt;软件厂商与漏洞研究者之间常因漏洞报告产生矛盾。研究者过度披露漏洞细节可能丧失奖励，而过早披露则可能损害企业声誉。更严重的是，当企业忽视安全团队警告时，研究者面临两难选择：保持沉默让用户处于风险，或公开漏洞迫使企业行动——后者可能反而帮助攻击者。&lt;/p&gt;
&lt;p&gt;ZK证明将彻底改变这种局面，允许企业明确定义漏洞赏金范围，研究者则能无可辩驳地证明其拥有有效漏洞利用方案，同时避免公开披露风险。&lt;/p&gt;
&lt;h2 id=&#34;zk证明的设计原理&#34;&gt;ZK证明的设计原理
&lt;/h2&gt;&lt;p&gt;在ZK证明中，证明者无需透露具体信息即可验证陈述真实性。例如证明知道SHA256原像而不泄露原像本身。目前最著名的工业应用是Zcash等隐私区块链，用户通过ZK证明交易合法性而不暴露任何敏感信息。&lt;/p&gt;
&lt;p&gt;开发高效ZK系统需权衡三个指标：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;证明生成时间&lt;/li&gt;
&lt;li&gt;验证时间&lt;/li&gt;
&lt;li&gt;通信带宽（证明数据量）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;核心挑战在于将待证明陈述转换为无循环的布尔/算术电路。这对缺乏明确数学表述的问题尤为困难，例如包含数据依赖循环的程序必须展开处理。&lt;/p&gt;
&lt;h2 id=&#34;漏洞可利用性证明技术实现&#34;&gt;漏洞可利用性证明技术实现
&lt;/h2&gt;&lt;p&gt;由于ZK证明接受布尔电路表述，我们需要构建仅在漏洞利用成功时返回&amp;quot;真&amp;quot;的电路。关键挑战包括：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;处理器建模&lt;/strong&gt;：需精确模拟目标程序的编译架构。初始方案是对处理器单步运行建模，但会导致电路规模爆炸（50MB内存的100条指令轨迹将产生5GB电路）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;内存验证优化&lt;/strong&gt;：采用SNARKs for C的方案，将证明分为核心逻辑与内存正确性两部分。逻辑验证通过检查指令序列状态转移实现，内存验证则通过内存排序轨迹的线性扫描完成，避免直接处理整个RAM。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;防伪造机制&lt;/strong&gt;：通过&amp;quot;置换检查器&amp;quot;电路确保内存排序轨迹的真实性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;x86架构的特殊挑战&#34;&gt;x86架构的特殊挑战
&lt;/h2&gt;&lt;p&gt;从简易的MSP430 RISC架构转向复杂x86架构面临巨大挑战：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RISC处理器每周期约1-10k逻辑门&lt;/li&gt;
&lt;li&gt;基础x86模型处理10,000条指令可能产生48GB证明数据&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们的解决方案是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;动态子集生成&lt;/strong&gt;：通过程序分析确定二进制文件实际使用的x86指令子集（通常仅数百条）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;静态二进制转换&lt;/strong&gt;：对repz等运行时依赖指令，转换为可验证的子集指令&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;组合电路优化&lt;/strong&gt;：避免硬编码复杂指令处理逻辑&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;漏洞披露新范式&#34;&gt;漏洞披露新范式
&lt;/h2&gt;&lt;p&gt;这项技术将实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;企业精确定义漏洞赏金范围&lt;/li&gt;
&lt;li&gt;研究者安全提交漏洞证明&lt;/li&gt;
&lt;li&gt;消费者保护机制：研究者可警示风险而不公开漏洞细节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们正推动ZK证明从学术走向工业应用。如果您有特殊应用场景，欢迎联系我们——我们在ZK证明方案和电路编译器领域拥有丰富经验。&lt;/p&gt;
&lt;p&gt;（原文包含技术架构图表示例和论文引用，此处保留技术要点翻译）&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
