<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Windows内核 on 办公AI智能小助手</title>
        <link>http://localhost:1313/tags/windows%E5%86%85%E6%A0%B8/</link>
        <description>Recent content in Windows内核 on 办公AI智能小助手</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>qife</copyright>
        <lastBuildDate>Fri, 08 Aug 2025 20:26:58 +0800</lastBuildDate><atom:link href="http://localhost:1313/tags/windows%E5%86%85%E6%A0%B8/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Windows cldflt.sys驱动堆溢出漏洞CVE-2024-30085分析与利用</title>
        <link>http://localhost:1313/p/windows-cldflt.sys%E9%A9%B1%E5%8A%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9Ecve-2024-30085%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</link>
        <pubDate>Fri, 08 Aug 2025 20:26:58 +0800</pubDate>
        
        <guid>http://localhost:1313/p/windows-cldflt.sys%E9%A9%B1%E5%8A%A8%E5%A0%86%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9Ecve-2024-30085%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;tldr&#34;&gt;TLDR
&lt;/h1&gt;&lt;p&gt;CVE-2024-30085是影响Windows云文件迷你过滤器驱动cldflt.sys的基于堆的缓冲区溢出漏洞。通过构造特殊的重解析点，可以触发缓冲区溢出破坏相邻的_WNF_STATE_DATA对象。被破坏的_WNF_STATE_DATA对象可用于从ALPC句柄表对象泄露内核指针。第二次缓冲区溢出用于破坏另一个_WNF_STATE_DATA对象，进而破坏相邻的PipeAttribute对象。通过在用户空间伪造PipeAttribute对象，我们能够泄露令牌地址并覆盖权限，将权限提升至NT AUTHORITY\SYSTEM。&lt;/p&gt;
&lt;h1 id=&#34;漏洞分析与补丁&#34;&gt;漏洞分析与补丁
&lt;/h1&gt;&lt;p&gt;CVE-2024-30085是由SSD Secure Disclosure的Alex Birnberg以及Theori的Gwangun Jung和Junoh Lee发现的基于堆的缓冲区溢出漏洞。对于Windows 10 22H2，该漏洞在KB5039211更新中被修复。&lt;/p&gt;
&lt;p&gt;查看补丁差异，可以清楚地看到HsmIBitmapNORMALOpen函数已被修改。在未打补丁的函数中，驱动程序在分页池中分配了一个大小为0x1000的HsBm对象，并将memcpy_size大小的数据复制到分配的缓冲区中。由于用户可以控制复制的数据以及memcpy_size的值，如果memcpy_size大于0x1000，就会发生分页池中的堆缓冲区溢出！&lt;/p&gt;
&lt;h1 id=&#34;重解析点结构&#34;&gt;重解析点结构
&lt;/h1&gt;&lt;p&gt;重解析点包含一个重解析标签（标识拥有该重解析点的文件系统驱动程序）和用户定义的数据。在本例中，我们将使用IO_REPARSE_TAG_CLOUD_6(0x9000601a)作为重解析标签。&lt;/p&gt;
&lt;p&gt;用户定义的数据具有以下结构：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_REPARSE_DATA_BUFFER&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;ULONG&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;ReparseTag&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;USHORT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ReparseDataLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;USHORT&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Reserved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;UCHAR&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DataBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GenericReparseBuffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REPARSE_DATA_BUFFER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PREPARSE_DATA_BUFFER&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h1 id=&#34;触发漏洞&#34;&gt;触发漏洞
&lt;/h1&gt;&lt;p&gt;让我们看看触发漏洞所需的代码路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-&amp;gt; HsmFltPostCREATE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -&amp;gt; HsmiFltPostECPCREATE
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        -&amp;gt; HsmpSetupContexts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            -&amp;gt; HsmpCtxCreateStreamContext
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -&amp;gt; HsmIBitmapNORMALOpen
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;通过打开包含cldflt重解析数据的文件，我们能够到达HsmpCtxCreateStreamContext。但是，为了到达HsmIBitmapNORMALOpen触发易受攻击的memcpy，我们必须通过一些与FeRp对象及其嵌套的BtRp对象相关的检查。&lt;/p&gt;
&lt;h1 id=&#34;利用概述&#34;&gt;利用概述
&lt;/h1&gt;&lt;p&gt;目前，我们在分页池中有一个溢出，影响大小为0x1000的对象。为了提升权限，我们需要一个内核指针泄露和任意写入能力。我们计划触发这个漏洞两次——第一次获取内核泄露并获得任意写入原语，第二次获取任意读取能力从而获取令牌地址。&lt;/p&gt;
&lt;p&gt;完整的利用步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建漏洞利用文件1并设置大小为0x1010的自定义重解析点数据&lt;/li&gt;
&lt;li&gt;喷洒填充_WNF_STATE_DATA&lt;/li&gt;
&lt;li&gt;喷洒第一组_WNF_STATE_DATA对象&lt;/li&gt;
&lt;li&gt;通过释放每隔一个_WNF_STATE_DATA对象来打孔&lt;/li&gt;
&lt;li&gt;第一次触发漏洞以回收其中一个孔——这会破坏_WNF_STATE_DATA对象，给我们越界读写能力&lt;/li&gt;
&lt;li&gt;喷洒ALPC句柄表以回收剩余的孔&lt;/li&gt;
&lt;li&gt;通过从第一个被破坏的_WNF_STATE_DATA对象读取泄露内核指针&lt;/li&gt;
&lt;li&gt;创建漏洞利用文件2并设置大小为0x1010的自定义重解析点数据&lt;/li&gt;
&lt;li&gt;喷洒第二组填充_WNF_STATE_DATA&lt;/li&gt;
&lt;li&gt;通过释放每隔一个_WNF_STATE_DATA对象来打孔&lt;/li&gt;
&lt;li&gt;第二次触发漏洞以回收其中一个孔&lt;/li&gt;
&lt;li&gt;喷洒PipeAttribute以回收剩余的孔&lt;/li&gt;
&lt;li&gt;使用第二个被破坏的_WNF_STATE_DATA对象破坏PipeAttribute对象，使其指向用户空间中的伪造对象——这给了我们任意读取能力&lt;/li&gt;
&lt;li&gt;使用被破坏的PipeAttribute对象获取令牌地址&lt;/li&gt;
&lt;li&gt;使用第一个被破坏的_WNF_STATE_DATA对象破坏ALPC句柄表，给我们任意写入能力&lt;/li&gt;
&lt;li&gt;覆盖令牌权限获取完全权限！&lt;/li&gt;
&lt;li&gt;获取winlogon进程的句柄&lt;/li&gt;
&lt;li&gt;弹出NT AUTHORITY\SYSTEM shell！！！&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;获取内核指针泄露&#34;&gt;获取内核指针泄露
&lt;/h1&gt;&lt;p&gt;我们将使用两个内核对象来获取内核指针泄露：_WNF_STATE_DATA和_ALPC_HANDLE_TABLE。&lt;/p&gt;
&lt;p&gt;Windows通知设施(WNF)是一个未记录的内核组件，用于在系统间发送通知。用于发送通知的数据存储在_WNF_STATE_DATA对象中，该对象分配在分页池中，由一个大小为0x10的头部和紧随其后的数据组成。&lt;/p&gt;
&lt;p&gt;高级本地过程调用(ALPC)是Windows内核中未记录的内部进程间通信设施。当创建ALPC端口时，_ALPC_HANDLE_TABLE对象最初以0x80的大小分配在分页池中。每次调用NtAlpcCreateResourceReserve时，都会创建一个_KALPC_RESERVE blob，并调用AlpcAddHandleTableEntry将其地址添加到句柄表中。&lt;/p&gt;
&lt;h1 id=&#34;任意读取&#34;&gt;任意读取
&lt;/h1&gt;&lt;p&gt;现在我们有了内核指针泄露，我们想要获得任意读取能力以便获取令牌地址。为此，可以第二次触发漏洞来覆盖第二个_WNF_STATE_DATA数据对象。与之前一样，我们将喷洒_WNF_STATE_DATA，通过释放每隔一个对象来打孔，然后触发漏洞导致溢出并破坏相邻的_WNF_STATE_DATA对象。但这次，我们将喷洒PipeAttribute，并使用被破坏的_WNF_STATE_DATA来破坏相邻的PipeAttribute结构。&lt;/p&gt;
&lt;p&gt;PipeAttribute任意读取技术由Corentin Bayet和Paul Fariello在他们的论文中提出。当创建管道时，用户可以添加属性，这些属性随后以键值对的形式存储在链表中。PipeAttribute是一个可变大小的结构，分配在分页池中。&lt;/p&gt;
&lt;h1 id=&#34;权限提升&#34;&gt;权限提升
&lt;/h1&gt;&lt;p&gt;现在我们有了令牌地址，我们最终可以将权限提升到NT AUTHORITY\SYSTEM！&lt;/p&gt;
&lt;p&gt;记住我们用来泄露ALPC句柄表中_KALPC_RESERVE指针的第一个_WNF_STATE_DATA吗？我们可以使用相同的_WNF_STATE_DATA对象用指向用户空间中伪造的_KALPC_RESERVE结构的指针覆盖该指针。在_KALPC_RESERVE内部，有一个指向_KALPC_MESSAGE的指针。&lt;/p&gt;
&lt;p&gt;在_KALPC_MESSAGE内部，有两个我们感兴趣的字段：ExtensisonBuffer和ExtensionBufferSize。当调用NtAlpcSendWaitReceivePort时，用户可控的ExtensionBufferSize大小的数据被写入ExtensionBuffer。为了获得任意写入，我们可以让我们的伪造_KALPC_RESERVE结构指向一个伪造的_KALPC_MESSAGE结构（也在用户空间中），将ExtensionBuffer设置为我们想要写入的位置！&lt;/p&gt;
&lt;p&gt;在这种情况下，我们将ExtensionBuffer设置为令牌权限（位于偏移量0x40），ExtensionBufferSize设置为0x10，这样我们可以写入16个\xff，这将启用所有权限。&lt;/p&gt;
&lt;h1 id=&#34;漏洞利用演示&#34;&gt;漏洞利用演示
&lt;/h1&gt;&lt;p&gt;这是漏洞利用运行时的样子：&lt;/p&gt;
&lt;p&gt;[图片描述漏洞利用成功运行]&lt;/p&gt;
&lt;p&gt;漏洞利用源代码可以在此处获取。&lt;/p&gt;
&lt;h1 id=&#34;致谢&#34;&gt;致谢
&lt;/h1&gt;&lt;p&gt;我要感谢Chen Le Qi在我研究这个漏洞时的耐心指导——我真的学到了很多！&lt;/p&gt;
&lt;h1 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Windows云过滤器API文档&lt;/li&gt;
&lt;li&gt;占位文件文档&lt;/li&gt;
&lt;li&gt;重解析点文档&lt;/li&gt;
&lt;li&gt;Windows结构体参考&lt;/li&gt;
&lt;li&gt;云过滤器重解析数据结构&lt;/li&gt;
&lt;li&gt;ALPC技术论文&lt;/li&gt;
&lt;li&gt;PipeAttribute技术论文&lt;/li&gt;
&lt;li&gt;Windows内核堆分析&lt;/li&gt;
&lt;li&gt;使用ALPC和PipeAttribute利用CVE-2023-36424&lt;/li&gt;
&lt;li&gt;WNF堆喷洒技术&lt;/li&gt;
&lt;li&gt;从句柄创建进程技术&lt;/li&gt;
&lt;/ol&gt;
</description>
        </item>
        <item>
        <title>Windows内核对象初始化器实验：绕过对象回调实现进程监控与反调试</title>
        <link>http://localhost:1313/p/windows%E5%86%85%E6%A0%B8%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8%E5%AE%9E%E9%AA%8C%E7%BB%95%E8%BF%87%E5%AF%B9%E8%B1%A1%E5%9B%9E%E8%B0%83%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95/</link>
        <pubDate>Thu, 07 Aug 2025 05:24:38 +0800</pubDate>
        
        <guid>http://localhost:1313/p/windows%E5%86%85%E6%A0%B8%E5%AF%B9%E8%B1%A1%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8%E5%AE%9E%E9%AA%8C%E7%BB%95%E8%BF%87%E5%AF%B9%E8%B1%A1%E5%9B%9E%E8%B0%83%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%8F%8D%E8%B0%83%E8%AF%95/</guid>
        <description>&lt;h1 id=&#34;实验windows对象初始化器---参见pg合规免责声明---逆向工程&#34;&gt;实验Windows对象初始化器 - 参见PG合规免责声明* - 逆向工程
&lt;/h1&gt;&lt;h2 id=&#34;概述&#34;&gt;概述
&lt;/h2&gt;&lt;p&gt;在本文中，我想介绍一种有趣的方法，通过实验性替代手段实现类似于Windows对象回调功能的效果。众所周知，Windows系统上的反恶意软件、反作弊和通用监控工具经常使用这些回调。然而，它们的使用仅限于拥有签名模块的实体，而且这些回调存在被篡改的风险。&lt;/p&gt;
&lt;h2 id=&#34;构建块&#34;&gt;构建块
&lt;/h2&gt;&lt;p&gt;Windows内核中的对象是操作系统运行和记录的基础。我们将以一个熟悉的对象为例：进程(Process)。&lt;/p&gt;
&lt;h3 id=&#34;进程创建与通知&#34;&gt;进程创建与通知
&lt;/h3&gt;&lt;p&gt;Windows中的进程通知回调是系统监控和安全的基石。这些回调主要由反恶意软件和反作弊系统使用，提供关于进程创建和终止事件的实时通知。&lt;/p&gt;
&lt;h2 id=&#34;函数指针重绑定&#34;&gt;函数指针重绑定
&lt;/h2&gt;&lt;p&gt;我们通过修改对象类型初始化器中的函数指针来实现进程通知回调，完全避开传统的对象回调列表。以下是关键实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定位ObTypeIndexTable表&lt;/li&gt;
&lt;li&gt;枚举所有对象类型，找到PsProcessType&lt;/li&gt;
&lt;li&gt;替换原始OpenProcedure指针为我们的处理函数&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;process_open_procedure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e_ob_open_reason&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;open_reason&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;uint8_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;access_mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;PEPROCESS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;PEPROCESS&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object_body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;granted_access&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handle_count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 处理进程创建事件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open_reason&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ob_open_handle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 记录进程创建信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 调用原始函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g_ob_type_hook_pair&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;o_open_procedure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;利用securityprocedure实现反调试&#34;&gt;利用SecurityProcedure实现反调试
&lt;/h2&gt;&lt;p&gt;通过挂钩DebugObject类型的安全过程，我们可以实现系统级反调试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;NTSTATUS&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;generic_security_procedure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;object&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;SECURITY_OPERATION_CODE&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;operation_code&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ob_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DbgkDebugObjectType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 阻止调试器附加
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATUS_DEBUG_ATTACH_FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 调用原始函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;g_ob_type_tracking_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[...]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;o_security_procedure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(...);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;实现结果&#34;&gt;实现结果
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;成功监控所有新创建的进程&lt;/li&gt;
&lt;li&gt;有效阻止x64dbg和WinDbg等调试器附加&lt;/li&gt;
&lt;li&gt;无需签名驱动模块即可实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;该方法在Windows 11 23H2上测试通过&lt;/li&gt;
&lt;li&gt;修改受PatchGuard保护的结构可能导致系统崩溃&lt;/li&gt;
&lt;li&gt;建议仅在PG禁用或短时间内使用此技术&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;完整对象类型和过程转储&#34;&gt;完整对象类型和过程转储
&lt;/h2&gt;&lt;p&gt;文章最后提供了完整的Windows内核对象类型及其相关过程的转储信息，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型名称&lt;/li&gt;
&lt;li&gt;打开/关闭/删除过程&lt;/li&gt;
&lt;li&gt;安全过程&lt;/li&gt;
&lt;li&gt;解析过程等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这项技术展示了Windows内核对象系统的灵活性，为系统监控和安全研究提供了新的思路。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>内核池初探：MS10-058漏洞分析与利用</title>
        <link>http://localhost:1313/p/%E5%86%85%E6%A0%B8%E6%B1%A0%E5%88%9D%E6%8E%A2ms10-058%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</link>
        <pubDate>Tue, 05 Aug 2025 14:48:58 +0800</pubDate>
        
        <guid>http://localhost:1313/p/%E5%86%85%E6%A0%B8%E6%B1%A0%E5%88%9D%E6%8E%A2ms10-058%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E5%88%A9%E7%94%A8/</guid>
        <description>&lt;h1 id=&#34;内核池初探ms10-058漏洞分析与利用&#34;&gt;内核池初探：MS10-058漏洞分析与利用
&lt;/h1&gt;&lt;h2 id=&#34;引言&#34;&gt;引言
&lt;/h2&gt;&lt;p&gt;我正在研究基于池(pool)的内存破坏漏洞。因此我想为Tarjei Mandt在其首次演讲&amp;quot;Windows 7内核池利用&amp;quot;[3]中提到的漏洞编写一个PoC利用程序。我认为这是开始学习池溢出漏洞的好练习。&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录
&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;引言&lt;/li&gt;
&lt;li&gt;前言&lt;/li&gt;
&lt;li&gt;触发漏洞&lt;/li&gt;
&lt;li&gt;池喷射技术
&lt;ul&gt;
&lt;li&gt;非分页对象&lt;/li&gt;
&lt;li&gt;nt!PoolHitTag&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;利用技术
&lt;ul&gt;
&lt;li&gt;基本结构&lt;/li&gt;
&lt;li&gt;覆盖PoolIndex&lt;/li&gt;
&lt;li&gt;非分页池类型&lt;/li&gt;
&lt;li&gt;伪造池描述符&lt;/li&gt;
&lt;li&gt;注意事项&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;载荷与清理&lt;/li&gt;
&lt;li&gt;致谢&lt;/li&gt;
&lt;li&gt;结论&lt;/li&gt;
&lt;li&gt;参考文献&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言
&lt;/h2&gt;&lt;p&gt;如果你想实验这个漏洞，应该阅读[1]并确保拥有易受攻击的系统。我在Windows 7 32位虚拟机(tcpip.sys 6.1.7600.16385)上测试了这个漏洞。微软关于此漏洞的公告是MS10-058，由Matthieu Suiche[2]发现，并被用作Tarjei Mandt论文[3]中的示例。&lt;/p&gt;
&lt;h2 id=&#34;触发漏洞&#34;&gt;触发漏洞
&lt;/h2&gt;&lt;p&gt;tcpip!IppSortDestinationAddresses中的整数溢出导致分配了错误大小的非分页池内存块。漏洞版本与修补版本的差异如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;9
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+29   imul    eax, 1Ch
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+2C   push    esi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+2D   mov     esi, ds:__imp__ExAllocatePoolWithTag@12 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+33   push    edi
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+34   mov     edi, 73617049h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+39   push    edi   
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+3A   push    eax  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+3B   push    ebx           
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;IppSortDestinationAddresses(x,x,x)+3C   call    esi ; ExAllocatePoolWithTag(x,x,x)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;可以通过WSAIoctl调用(SIO_ADDRESS_LIST_SORT)触发此代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;WSAIoctl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SIO_ADDRESS_LIST_SORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pwn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pwn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;池喷射技术&#34;&gt;池喷射技术
&lt;/h2&gt;&lt;h3 id=&#34;非分页对象&#34;&gt;非分页对象
&lt;/h3&gt;&lt;p&gt;我们可以使用多种对象来操作非分页池，例如信号量对象或保留对象。由于驱动请求的是0x54字节(实际获得0x60字节块)，这与I/O完成保留对象(IoCo)的大小完全匹配。&lt;/p&gt;
&lt;h3 id=&#34;ntpoolhittag&#34;&gt;nt!PoolHitTag
&lt;/h3&gt;&lt;p&gt;要调试特定的ExFreePoolWithTag调用，可以使用池命中标签(pool hit tags)。nt!PoolHitTag会与当前释放块的池标签进行比较，如果匹配则触发调试断点。&lt;/p&gt;
&lt;h2 id=&#34;利用技术&#34;&gt;利用技术
&lt;/h2&gt;&lt;h3 id=&#34;基本结构&#34;&gt;基本结构
&lt;/h3&gt;&lt;p&gt;池内存分为多种类型，其中两种是分页池和非分页池。池由_POOL_DESCRIPTOR结构描述，包含PoolType、ListHeads等字段。每个内存块在数据前都有一个_POOL_HEADER头，包含块大小、所属池等信息。&lt;/p&gt;
&lt;h3 id=&#34;覆盖poolindex&#34;&gt;覆盖PoolIndex
&lt;/h3&gt;&lt;p&gt;这种攻击的基本思路是破坏池头中的PoolIndex字段。该字段用于在释放分页池块时确定它属于哪个池描述符。攻击者可以通过破坏此字段使池管理器认为特定块属于另一个池描述符。&lt;/p&gt;
&lt;h3 id=&#34;伪造池描述符&#34;&gt;伪造池描述符
&lt;/h3&gt;&lt;p&gt;我们需要在空地址处伪造一个池描述符。只需分配该页面并放置伪造的延迟空闲列表和ListHeads即可。当释放一个块时，如果延迟空闲列表包含至少0x20个条目，ExFreePoolWithTag将实际释放这些块并将它们放在ListHeads的适当条目上。&lt;/p&gt;
&lt;h2 id=&#34;注意事项&#34;&gt;注意事项
&lt;/h2&gt;&lt;p&gt;值得注意的是，这种攻击在现代缓解措施下无法工作，主要原因包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PoolIndex字段的验证&lt;/li&gt;
&lt;li&gt;防止空页分配&lt;/li&gt;
&lt;li&gt;Windows 8引入了NonPagedPoolNX类型&lt;/li&gt;
&lt;li&gt;SMAP防止访问用户态数据&lt;/li&gt;
&lt;li&gt;SMEP防止执行用户态代码&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;载荷与清理&#34;&gt;载荷与清理
&lt;/h2&gt;&lt;p&gt;经典的&amp;quot;写任意位置&amp;quot;场景目标是HalDispatchTable。我们只需用指向我们载荷(setupPayload())的指针覆盖HalDispatchTable+4。完成后，我们需要将指针恢复为hal!HaliQuerySystemInformation。&lt;/p&gt;
&lt;h2 id=&#34;致谢&#34;&gt;致谢
&lt;/h2&gt;&lt;p&gt;特别感谢我的朋友@0vercl0k的审查和帮助！&lt;/p&gt;
&lt;h2 id=&#34;结论&#34;&gt;结论
&lt;/h2&gt;&lt;p&gt;希望你喜欢这篇文章。如果你想了解更多关于这个主题的内容，可以查看Tarjei Mandt、Zhenhua Liu和Nikita Tarakanov的最新论文。你可以在我的新github[5]上找到我的代码。&lt;/p&gt;
&lt;h2 id=&#34;参考文献&#34;&gt;参考文献
&lt;/h2&gt;&lt;p&gt;[1] itsecdb上的漏洞详情
[2] 微软公告
[3] Windows 7内核池利用 - Tarjei Mandt的论文(必读)
[4] Windows 7中的保留对象 - j00ru的优秀文章
[5] 我的MS10-058漏洞利用代码&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
