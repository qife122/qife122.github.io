<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arm64 on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/arm64/</link>
    <description>Recent content in Arm64 on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Fri, 08 Aug 2025 00:33:58 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/arm64/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简化代码迁移：Ampere Porting Advisor助力x86到Arm64的高效转换</title>
      <link>https://qife122.github.io/p/%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BBampere-porting-advisor%E5%8A%A9%E5%8A%9Bx86%E5%88%B0arm64%E7%9A%84%E9%AB%98%E6%95%88%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Fri, 08 Aug 2025 00:33:58 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E7%AE%80%E5%8C%96%E4%BB%A3%E7%A0%81%E8%BF%81%E7%A7%BBampere-porting-advisor%E5%8A%A9%E5%8A%9Bx86%E5%88%B0arm64%E7%9A%84%E9%AB%98%E6%95%88%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;简化代码迁移ampere-porting-advisor的优势&#34;&gt;简化代码迁移：Ampere Porting Advisor的优势&lt;/h1&gt;&#xA;&lt;p&gt;随着从传统x86向Arm64（尤其是Ampere处理器）的转型加速，开发者急需高效迁移现有代码库的方案。Ampere Porting Advisor正是为此设计的工具，可通过&lt;a href=&#34;https://github.com/AmpereComputing/ampere-porting-advisor&#34;&gt;GitHub页面&lt;/a&gt;获取。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arm64架构内存页大小配置指南：提升性能的关键技巧</title>
      <link>https://qife122.github.io/p/arm64%E6%9E%B6%E6%9E%84%E5%86%85%E5%AD%98%E9%A1%B5%E5%A4%A7%E5%B0%8F%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 06 Aug 2025 22:20:09 +0800</pubDate>
      <guid>https://qife122.github.io/p/arm64%E6%9E%B6%E6%9E%84%E5%86%85%E5%AD%98%E9%A1%B5%E5%A4%A7%E5%B0%8F%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD%E7%9A%84%E5%85%B3%E9%94%AE%E6%8A%80%E5%B7%A7/</guid>
      <description>&lt;h1 id=&#34;理解arm64架构的内存页大小&#34;&gt;理解Arm64架构的内存页大小&lt;/h1&gt;&#xA;&lt;p&gt;Arm64架构与x86的主要区别之一，是可以在CPU的内存管理单元(MMU)中配置4K、16K或64K的内存页大小。本文总结了内存页大小的概念、在Linux系统上的配置方法，以及何时应该为应用程序使用不同的页大小。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
