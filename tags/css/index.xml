<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CSS on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/css/</link>
    <description>Recent content in CSS on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Mon, 04 Aug 2025 06:42:03 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/css/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CSS智能化：探索更智能样式语言的未来</title>
      <link>https://qife122.github.io/p/css%E6%99%BA%E8%83%BD%E5%8C%96%E6%8E%A2%E7%B4%A2%E6%9B%B4%E6%99%BA%E8%83%BD%E6%A0%B7%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E6%9C%AA%E6%9D%A5/</link>
      <pubDate>Mon, 04 Aug 2025 06:42:03 +0800</pubDate>
      <guid>https://qife122.github.io/p/css%E6%99%BA%E8%83%BD%E5%8C%96%E6%8E%A2%E7%B4%A2%E6%9B%B4%E6%99%BA%E8%83%BD%E6%A0%B7%E5%BC%8F%E8%AF%AD%E8%A8%80%E7%9A%84%E6%9C%AA%E6%9D%A5/</guid>
      <description>&lt;h1 id=&#34;css智能化探索更智能样式语言的未来&#34;&gt;CSS智能化：探索更智能样式语言的未来&lt;/h1&gt;&#xA;&lt;p&gt;CSS已从纯粹的呈现性语言发展为具备逻辑能力——这要归功于容器查询、关系型伪类和if()函数等特性。它是否仍仅用于样式设计，还是正在演变成更强大的工具？Gabriel Shoyombo探讨了CSS近年来的智能化进程、未来方向、解决的问题、复杂性争议以及开发者对此转变的反应。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用JavaScript和CSS创建&#34;动态高亮&#34;导航栏</title>
      <link>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8javascript%E5%92%8Ccss%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E9%AB%98%E4%BA%AE%E5%AF%BC%E8%88%AA%E6%A0%8F/</link>
      <pubDate>Mon, 04 Aug 2025 06:30:46 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8javascript%E5%92%8Ccss%E5%88%9B%E5%BB%BA%E5%8A%A8%E6%80%81%E9%AB%98%E4%BA%AE%E5%AF%BC%E8%88%AA%E6%A0%8F/</guid>
      <description>&lt;h1 id=&#34;使用javascript和css创建动态高亮导航栏&#34;&gt;使用JavaScript和CSS创建&amp;quot;动态高亮&amp;quot;导航栏&lt;/h1&gt;&#xA;&lt;p&gt;在本教程中，Blake Lundquist将带我们学习使用纯JavaScript和CSS创建&amp;quot;动态高亮&amp;quot;导航模式的两种方法。第一种技术使用getBoundingClientRect方法在点击时显式动画导航栏项之间的边框。第二种方法使用新的View Transition API实现相同的功能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>经典卡通如何启发现代CSS动画技术</title>
      <link>https://qife122.github.io/p/%E7%BB%8F%E5%85%B8%E5%8D%A1%E9%80%9A%E5%A6%82%E4%BD%95%E5%90%AF%E5%8F%91%E7%8E%B0%E4%BB%A3css%E5%8A%A8%E7%94%BB%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 02 Aug 2025 06:22:18 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E7%BB%8F%E5%85%B8%E5%8D%A1%E9%80%9A%E5%A6%82%E4%BD%95%E5%90%AF%E5%8F%91%E7%8E%B0%E4%BB%A3css%E5%8A%A8%E7%94%BB%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h1 id=&#34;粉碎动画系列第一部经典卡通如何启发现代css&#34;&gt;粉碎动画系列第一部：经典卡通如何启发现代CSS&lt;/h1&gt;&#xA;&lt;p&gt;浏览器厂商很快就在CSS中加入了运动功能。首先是简单的:hover伪类，随后是两种状态间的过渡动画。接着出现了通过@keyframes改变状态的能力，最近更是新增了与滚动位置联动的滚动驱动动画。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
