<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>反序列化漏洞 on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</link>
    <description>Recent content in 反序列化漏洞 on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Sat, 09 Aug 2025 18:24:12 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RubySec安全实战指南 - 深入解析Ruby漏洞与防御技术</title>
      <link>https://qife122.github.io/p/rubysec%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90ruby%E6%BC%8F%E6%B4%9E%E4%B8%8E%E9%98%B2%E5%BE%A1%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sat, 09 Aug 2025 18:24:12 +0800</pubDate>
      <guid>https://qife122.github.io/p/rubysec%E5%AE%89%E5%85%A8%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97-%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90ruby%E6%BC%8F%E6%B4%9E%E4%B8%8E%E9%98%B2%E5%BE%A1%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h3 id=&#34;rubysec实战指南发布&#34;&gt;RubySec实战指南发布&lt;/h3&gt;&#xA;&lt;p&gt;在互联网广泛使用的Ruby应用中，潜藏着可能影响大量系统的安全漏洞，这些漏洞正吸引攻击者瞄准高价值目标。其中，利用YAML格式数据序列化/反序列化等常见特性的漏洞尤为突出。经测试，几乎所有主流开源Ruby项目均存在此类隐患，但多数开发者尚未意识到风险。&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用海象运算符简化Python反序列化漏洞利用</title>
      <link>https://qife122.github.io/p/%E5%88%A9%E7%94%A8%E6%B5%B7%E8%B1%A1%E8%BF%90%E7%AE%97%E7%AC%A6%E7%AE%80%E5%8C%96python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</link>
      <pubDate>Mon, 04 Aug 2025 02:19:58 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E5%88%A9%E7%94%A8%E6%B5%B7%E8%B1%A1%E8%BF%90%E7%AE%97%E7%AC%A6%E7%AE%80%E5%8C%96python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;利用海象运算符简化反序列化载荷构造&#34;&gt;利用海象运算符简化反序列化载荷构造&lt;/h1&gt;&#xA;&lt;p&gt;在利用Python反序列化（特别是Pickle）漏洞时，通常需要构造包含参数集合和服务器端可用可调用对象的载荷。最常见的方法是使用&lt;code&gt;eval&lt;/code&gt;函数配合待执行的字符串，这种方案非常灵活——通常可以导入&lt;code&gt;os&lt;/code&gt;模块并调用&lt;code&gt;os.system&lt;/code&gt;执行任意命令。但某些场景下会存在限制，例如无法直接获取应用输出或出站连接被阻断导致反向Shell失效。有时甚至需要反序列化操作返回具有特定属性的对象。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
