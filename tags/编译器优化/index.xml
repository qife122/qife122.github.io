<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编译器优化 on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96/</link>
    <description>Recent content in 编译器优化 on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Fri, 08 Aug 2025 08:20:51 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/%E7%BC%96%E8%AF%91%E5%99%A8%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>加密货币钱包、系统与基础设施审计经验分享</title>
      <link>https://qife122.github.io/p/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%92%B1%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%AE%A1%E8%AE%A1%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</link>
      <pubDate>Fri, 08 Aug 2025 08:20:51 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%92%B1%E5%8C%85%E7%B3%BB%E7%BB%9F%E4%B8%8E%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%AE%A1%E8%AE%A1%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;在过去的三年中，Doyensec为全球知名加密货币项目提供安全测试服务。我们审计了桌面/移动钱包、交易所Web界面、托管系统和核心基础设施组件，发现许多设计实现缺陷。本文精选四类典型漏洞进行技术剖析。&lt;/p&gt;</description>
    </item>
    <item>
      <title>加密货币钱包、系统及基础设施审计经验分享</title>
      <link>https://qife122.github.io/p/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%92%B1%E5%8C%85%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%AE%A1%E8%AE%A1%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</link>
      <pubDate>Wed, 06 Aug 2025 14:30:16 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E5%8A%A0%E5%AF%86%E8%B4%A7%E5%B8%81%E9%92%B1%E5%8C%85%E7%B3%BB%E7%BB%9F%E5%8F%8A%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E5%AE%A1%E8%AE%A1%E7%BB%8F%E9%AA%8C%E5%88%86%E4%BA%AB/</guid>
      <description>&lt;p&gt;在过去的三年中，Doyensec为全球知名加密货币项目提供安全测试服务，审计范围涵盖桌面/移动钱包、交易所Web界面、托管系统及核心基础设施组件。我们既见证了优秀实践，也发现了诸多设计与实现漏洞。失败是最好的安全教材，本文将通过四个典型案例揭示看似简单却危害巨大的漏洞模式。&lt;/p&gt;</description>
    </item>
    <item>
      <title>C#记录类型与集合的深度探讨：从自动生成代码到自定义相等性比较</title>
      <link>https://qife122.github.io/p/c%23%E8%AE%B0%E5%BD%95%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%B7%B1%E5%BA%A6%E6%8E%A2%E8%AE%A8%E4%BB%8E%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E7%AD%89%E6%80%A7%E6%AF%94%E8%BE%83/</link>
      <pubDate>Tue, 05 Aug 2025 22:12:27 +0800</pubDate>
      <guid>https://qife122.github.io/p/c%23%E8%AE%B0%E5%BD%95%E7%B1%BB%E5%9E%8B%E4%B8%8E%E9%9B%86%E5%90%88%E7%9A%84%E6%B7%B1%E5%BA%A6%E6%8E%A2%E8%AE%A8%E4%BB%8E%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90%E4%BB%A3%E7%A0%81%E5%88%B0%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%B8%E7%AD%89%E6%80%A7%E6%AF%94%E8%BE%83/</guid>
      <description>&lt;h1 id=&#34;记录类型与集合&#34;&gt;记录类型与集合&lt;/h1&gt;&#xA;&lt;p&gt;本文某种程度上记录了我在选举站点中使用记录类型和集合时遇到的各种摩擦点。&lt;/p&gt;&#xA;&lt;h2 id=&#34;记录类型回顾&#34;&gt;记录类型回顾&lt;/h2&gt;&#xA;&lt;p&gt;这可能是本系列中最具普适性的博客文章。尽管记录类型自C# 10就已存在，但我个人使用不多（虽然我期待这个功能已有十多年，不过那是另一回事）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>二进制安全优化实践：消除编译器引入的代码重用攻击隐患</title>
      <link>https://qife122.github.io/p/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5%E6%B6%88%E9%99%A4%E7%BC%96%E8%AF%91%E5%99%A8%E5%BC%95%E5%85%A5%E7%9A%84%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8%E6%94%BB%E5%87%BB%E9%9A%90%E6%82%A3/</link>
      <pubDate>Sun, 03 Aug 2025 05:53:54 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8%E4%BC%98%E5%8C%96%E5%AE%9E%E8%B7%B5%E6%B6%88%E9%99%A4%E7%BC%96%E8%AF%91%E5%99%A8%E5%BC%95%E5%85%A5%E7%9A%84%E4%BB%A3%E7%A0%81%E9%87%8D%E7%94%A8%E6%94%BB%E5%87%BB%E9%9A%90%E6%82%A3/</guid>
      <description>&lt;h1 id=&#34;二进制安全优化实践&#34;&gt;二进制安全优化实践&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&amp;ldquo;这样存在毫无意义，安全地存在才有价值&amp;rdquo;（《麦克白》3.1）&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;编译器不仅要生成高效代码，还必须生成安全代码。尽管编译器开发过程中经过严格测试和正确性认证，但其优化过程可能意外引入信息泄漏或删除程序员编写的安全关键操作。图1展示了CWE-733漏洞实例：编译器通过&amp;quot;死存储消除&amp;quot;优化移除了加密密钥清零操作，导致密钥可能被攻击者恢复。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
