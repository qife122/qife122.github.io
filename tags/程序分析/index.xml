<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>程序分析 on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 程序分析 on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Sat, 09 Aug 2025 16:56:48 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/%E7%A8%8B%E5%BA%8F%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>驯服文件解析风险的两款新工具：PolyFile与PolyTracker</title>
      <link>https://qife122.github.io/p/%E9%A9%AF%E6%9C%8D%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E9%A3%8E%E9%99%A9%E7%9A%84%E4%B8%A4%E6%AC%BE%E6%96%B0%E5%B7%A5%E5%85%B7polyfile%E4%B8%8Epolytracker/</link>
      <pubDate>Sat, 09 Aug 2025 16:56:48 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E9%A9%AF%E6%9C%8D%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E9%A3%8E%E9%99%A9%E7%9A%84%E4%B8%A4%E6%AC%BE%E6%96%B0%E5%B7%A5%E5%85%B7polyfile%E4%B8%8Epolytracker/</guid>
      <description>&lt;h3 id=&#34;驯服文件解析风险的两款新工具&#34;&gt;驯服文件解析风险的两款新工具&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;Evan Sultanik | 2019年11月1日&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;解析文件格式是困难的——即使规范明确定义时也是如此。当规范存在歧义时，会导致解析器和解释器出现意外行为，进而引发安全漏洞。在DARPA SafeDocs项目支持下，我们开发了两款工具来解决这一根本问题：&lt;/p&gt;</description>
    </item>
    <item>
      <title>检测不良OpenSSL使用模式 - Anselm工具深度解析</title>
      <link>https://qife122.github.io/p/%E6%A3%80%E6%B5%8B%E4%B8%8D%E8%89%AFopenssl%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F-anselm%E5%B7%A5%E5%85%B7%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 06 Aug 2025 10:56:03 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E6%A3%80%E6%B5%8B%E4%B8%8D%E8%89%AFopenssl%E4%BD%BF%E7%94%A8%E6%A8%A1%E5%BC%8F-anselm%E5%B7%A5%E5%85%B7%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;检测不良openssl使用模式&#34;&gt;检测不良OpenSSL使用模式&lt;/h1&gt;&#xA;&lt;p&gt;OpenSSL是最流行的密码学库之一，即便您不使用C/C++，您所用编程语言的核心库很可能也包含OpenSSL绑定。由于其底层API的设计特点，这个库极易被误用。幸运的是，许多错误都遵循可识别的模式，这为自动化检测提供了可能。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Siderophile：暴露Rust代码库中的不安全操作</title>
      <link>https://qife122.github.io/p/siderophile%E6%9A%B4%E9%9C%B2rust%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%89%E5%85%A8%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 06 Aug 2025 08:22:18 +0800</pubDate>
      <guid>https://qife122.github.io/p/siderophile%E6%9A%B4%E9%9C%B2rust%E4%BB%A3%E7%A0%81%E5%BA%93%E4%B8%AD%E7%9A%84%E4%B8%8D%E5%AE%89%E5%85%A8%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;今天我们发布了一款名为siderophile的工具，它能帮助Rust开发者在代码库中寻找模糊测试目标。该工具会扫描crate的所有依赖项，定位每个不安全函数、表达式、特质方法等，然后沿调用图追溯至使用这些不安全元素的源头函数，并按危险程度（badness）进行排序——函数使用的不安全元素越多，其危险等级就越高。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Magnifier：交互式反编译的实验性工具</title>
      <link>https://qife122.github.io/p/magnifier%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 02 Aug 2025 17:43:34 +0800</pubDate>
      <guid>https://qife122.github.io/p/magnifier%E4%BA%A4%E4%BA%92%E5%BC%8F%E5%8F%8D%E7%BC%96%E8%AF%91%E7%9A%84%E5%AE%9E%E9%AA%8C%E6%80%A7%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h3 id=&#34;trail-of-bits的反编译技术栈&#34;&gt;Trail of Bits的反编译技术栈&lt;/h3&gt;&#xA;&lt;p&gt;Trail of Bits正在开发多个与程序反编译相关的开源项目：Remill、Anvill、Rellic以及新推出的Magnifier。其技术策略是通过多级中间表示（IR）逐步提升编译程序：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Maat：让符号执行变得简单 - 跨架构多功能符号执行框架</title>
      <link>https://qife122.github.io/p/maat%E8%AE%A9%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8F%98%E5%BE%97%E7%AE%80%E5%8D%95-%E8%B7%A8%E6%9E%B6%E6%9E%84%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Sat, 02 Aug 2025 11:26:19 +0800</pubDate>
      <guid>https://qife122.github.io/p/maat%E8%AE%A9%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E5%8F%98%E5%BE%97%E7%AE%80%E5%8D%95-%E8%B7%A8%E6%9E%B6%E6%9E%84%E5%A4%9A%E5%8A%9F%E8%83%BD%E7%AC%A6%E5%8F%B7%E6%89%A7%E8%A1%8C%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;h1 id=&#34;maat让符号执行变得简单&#34;&gt;Maat：让符号执行变得简单&lt;/h1&gt;&#xA;&lt;p&gt;我们发布了Maat——一个跨架构、多用途且用户友好的符号执行框架。它提供动态符号执行（DSE）、污点分析、二进制插桩、环境模拟和约束求解等核心功能。基于Ghidra的中间表示语言p-code，Maat兼具C++高性能API和Python便捷接口，既适合安全专家也方便初学者入门。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
