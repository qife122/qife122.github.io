<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>污点分析 on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 污点分析 on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Sat, 09 Aug 2025 07:13:29 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>路由器固件漏洞自动化挖掘：基于污点分析的规模化漏洞检测</title>
      <link>https://qife122.github.io/p/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%96%E6%8E%98%E5%9F%BA%E4%BA%8E%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%84%E6%A8%A1%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sat, 09 Aug 2025 07:13:29 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%9B%BA%E4%BB%B6%E6%BC%8F%E6%B4%9E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8C%96%E6%8E%98%E5%9F%BA%E4%BA%8E%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90%E7%9A%84%E8%A7%84%E6%A8%A1%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%A3%80%E6%B5%8B/</guid>
      <description>&lt;h1 id=&#34;基于污点分析的路由器固件漏洞规模化挖掘&#34;&gt;基于污点分析的路由器固件漏洞规模化挖掘&lt;/h1&gt;&#xA;&lt;p&gt;在最近几个月的工作中，我们开发了一套基于污点分析的自动化工具，用于检测路由器中的安全漏洞。该工具针对D-Link DIR-878路由器1.12A1固件中的CVE-2019-8312至CVE-2019-8319等命令注入漏洞进行了优化设计，目标是实现比人工分析更快的漏洞发现速度。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用Binary Ninja进行反向污点分析 - 追踪程序崩溃根源</title>
      <link>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8binary-ninja%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90-%E8%BF%BD%E8%B8%AA%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E6%A0%B9%E6%BA%90/</link>
      <pubDate>Sun, 03 Aug 2025 00:44:21 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8binary-ninja%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%90%91%E6%B1%A1%E7%82%B9%E5%88%86%E6%9E%90-%E8%BF%BD%E8%B8%AA%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E6%A0%B9%E6%BA%90/</guid>
      <description>&lt;h1 id=&#34;反向污点分析原理&#34;&gt;反向污点分析原理&lt;/h1&gt;&#xA;&lt;p&gt;在Trail of Bits暑期实习期间，我开发了KRFAnalysis工具集，用于分析系统调用故障注入工具KRF产生的崩溃。KRF能有效引发程序崩溃，但难以确定具体是哪个故障系统调用导致了崩溃。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
