<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CodeQL on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/codeql/</link>
    <description>Recent content in CodeQL on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Wed, 06 Aug 2025 16:10:02 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/codeql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用CodeQL检测C&#43;&#43;迭代器失效问题</title>
      <link>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8codeql%E6%A3%80%E6%B5%8Bc-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 06 Aug 2025 16:10:02 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8codeql%E6%A3%80%E6%B5%8Bc-%E8%BF%AD%E4%BB%A3%E5%99%A8%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</guid>
      <description>&lt;h1 id=&#34;使用codeql检测迭代器失效&#34;&gt;使用CodeQL检测迭代器失效&lt;/h1&gt;&#xA;&lt;p&gt;迭代器失效是C++中常见且隐蔽的一类错误，经常导致可利用的漏洞。在Trail of Bits实习期间，我开发了Itergator——一组用于分析和发现迭代器失效的CodeQL类和查询。&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用CodeQL捕捉OpenSSL误用漏洞 - 关键加密API安全实践</title>
      <link>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8codeql%E6%8D%95%E6%8D%89openssl%E8%AF%AF%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%85%B3%E9%94%AE%E5%8A%A0%E5%AF%86api%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 04 Aug 2025 21:40:49 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E4%BD%BF%E7%94%A8codeql%E6%8D%95%E6%8D%89openssl%E8%AF%AF%E7%94%A8%E6%BC%8F%E6%B4%9E-%E5%85%B3%E9%94%AE%E5%8A%A0%E5%AF%86api%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;使用codeql捕捉openssl误用漏洞&#34;&gt;使用CodeQL捕捉OpenSSL误用漏洞&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;作者：Damien Santiago&lt;/strong&gt;&lt;br&gt;&#xA;&lt;strong&gt;日期：2023年12月22日&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;我开发了五个CodeQL查询，用于捕捉OpenSSL libcrypto API中潜在的高危漏洞。这个被广泛采用但容错性低的API，一旦误用可能导致内存泄漏、认证绕过等加密实现问题。这些查询（在导师Fredrik Dahlgren和Filipe Casal指导下完成）通过确保正确的密钥处理、熵初始化和大数清除检查来预防误用。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
