<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全漏洞 on 办公AI智能小助手</title>
    <link>https://qife122.github.io/tags/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/</link>
    <description>Recent content in 安全漏洞 on 办公AI智能小助手</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <copyright>qife</copyright>
    <lastBuildDate>Thu, 07 Aug 2025 15:01:24 +0800</lastBuildDate>
    <atom:link href="https://qife122.github.io/tags/%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ASP.NET请求验证绕过漏洞解析</title>
      <link>https://qife122.github.io/p/asp.net%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 07 Aug 2025 15:01:24 +0800</pubDate>
      <guid>https://qife122.github.io/p/asp.net%E8%AF%B7%E6%B1%82%E9%AA%8C%E8%AF%81%E7%BB%95%E8%BF%87%E6%BC%8F%E6%B4%9E%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;aspnet请求验证绕过&#34;&gt;ASP.NET请求验证绕过&lt;/h1&gt;&#xA;&lt;p&gt;2017年10月14日&lt;/p&gt;&#xA;&lt;p&gt;&amp;hellip;以及为什么你应该报告这个漏洞（也许）。&lt;/p&gt;&#xA;&lt;p&gt;本文讨论的是.NET请求验证漏洞，如&lt;a href=&#34;https://docs.microsoft.com/en-us/previous-versions/dotnet/articles/ms972969%28v=msdn.10%29&#34;&gt;微软文档&lt;/a&gt;所述。虽然这不是新问题，但我在2017年仍发现许多.NET网站存在此问题。&lt;/p&gt;&#xA;&lt;h2 id=&#34;请求验证机制剖析&#34;&gt;请求验证机制剖析&lt;/h2&gt;&#xA;&lt;p&gt;请求验证是ASP.NET的输入过滤器，旨在防范XSS攻击。但微软官方声明该机制并不安全：&lt;/p&gt;</description>
    </item>
    <item>
      <title>突破防线：MCP服务器如何在被调用前发起攻击</title>
      <link>https://qife122.github.io/p/%E7%AA%81%E7%A0%B4%E9%98%B2%E7%BA%BFmcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A2%AB%E8%B0%83%E7%94%A8%E5%89%8D%E5%8F%91%E8%B5%B7%E6%94%BB%E5%87%BB/</link>
      <pubDate>Thu, 07 Aug 2025 13:30:53 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E7%AA%81%E7%A0%B4%E9%98%B2%E7%BA%BFmcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A6%82%E4%BD%95%E5%9C%A8%E8%A2%AB%E8%B0%83%E7%94%A8%E5%89%8D%E5%8F%91%E8%B5%B7%E6%94%BB%E5%87%BB/</guid>
      <description>&lt;h1 id=&#34;突破防线mcp服务器如何在被调用前发起攻击&#34;&gt;突破防线：MCP服务器如何在被调用前发起攻击&lt;/h1&gt;&#xA;&lt;p&gt;这是关于模型上下文协议(MCP)安全发展的系列文章首篇。我们将披露这个新协议中的关键漏洞——&amp;ldquo;越线攻击&amp;rdquo;，该漏洞允许恶意MCP服务器在工具被调用前就执行攻击。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins安全漏洞与攻击技术全解析</title>
      <link>https://qife122.github.io/p/jenkins%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E5%85%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Thu, 07 Aug 2025 00:12:57 +0800</pubDate>
      <guid>https://qife122.github.io/p/jenkins%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E5%85%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;jenkins攻击技术合集&#34;&gt;Jenkins攻击技术合集&lt;/h3&gt;&#xA;&lt;h4 id=&#34;远程代码执行rce技术&#34;&gt;远程代码执行(RCE)技术&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;构建步骤操纵&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;http://www.labofapenetrationtester.com/2014/08/script-execution-and-privilege-esc-jenkins.html&#34;&gt;Lab of a Pentester&lt;/a&gt;&lt;br&gt;&#xA;通过修改构建步骤实现RCE&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;终端插件利用&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://medium.com/@uranium238/shodan-jenkins-to-get-rces-on-servers-6b6ec7c960e2&#34;&gt;Medium文章&lt;/a&gt;&lt;br&gt;&#xA;利用Terminal插件获取RCE权限&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;关键漏洞利用&#34;&gt;关键漏洞利用&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;CVE-2019-1003000&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;http://blog.orange.tw/2019/02/abusing-meta-programming-for-unauthenticated-rce.html&#34;&gt;Orange Tsai漏洞分析&lt;/a&gt;&lt;br&gt;&#xA;影响组件：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pipeline: Declarative Plugin ≤1.3.4&lt;/li&gt;&#xA;&lt;li&gt;Pipeline: Groovy Plugin ≤2.61&lt;/li&gt;&#xA;&lt;li&gt;Script Security Plugin ≤1.49&lt;br&gt;&#xA;&lt;em&gt;修复版本：Jenkins 2.121.1 LTS/2.132+&lt;/em&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;反序列化漏洞&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/Coalfire-Research/java-deserialization-exploits/tree/master/Jenkins&#34;&gt;GitHub PoC&lt;/a&gt;&lt;br&gt;&#xA;涉及CVE：&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jenkins安全漏洞与攻击技术全解析</title>
      <link>https://qife122.github.io/p/jenkins%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E5%85%A8%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 06 Aug 2025 15:37:54 +0800</pubDate>
      <guid>https://qife122.github.io/p/jenkins%E5%AE%89%E5%85%A8%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%94%BB%E5%87%BB%E6%8A%80%E6%9C%AF%E5%85%A8%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;jenkins攻击技术合集&#34;&gt;Jenkins攻击技术合集&lt;/h3&gt;&#xA;&lt;h4 id=&#34;远程代码执行rce相关&#34;&gt;远程代码执行(RCE)相关&lt;/h4&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;构建步骤操纵&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;http://www.labofapenetrationtester.com/2014/08/script-execution-and-privilege-esc-jenkins.html&#34;&gt;LabofPentester文章&lt;/a&gt;演示如何通过操纵构建步骤实现RCE&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;终端插件利用&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://medium.com/@uranium238/shodan-jenkins-to-get-rces-on-servers-6b6ec7c960e2&#34;&gt;Medium文章&lt;/a&gt;展示通过终端插件获取RCE&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;关键插件漏洞&lt;/strong&gt;&lt;br&gt;&#xA;Orange Tsai发现的漏洞影响：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Pipeline: Declarative Plugin ≤1.3.4&lt;/li&gt;&#xA;&lt;li&gt;Pipeline: Groovy Plugin ≤2.61&lt;/li&gt;&#xA;&lt;li&gt;Script Security Plugin ≤1.49&lt;br&gt;&#xA;（Jenkins 2.121.1 LTS/2.132 weekly已修复）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h4 id=&#34;反序列化漏洞&#34;&gt;反序列化漏洞&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;CVE-2015-8103 &amp;amp; CVE-2016-0792&lt;/strong&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://github.com/Coalfire-Research/java-deserialization-exploits/tree/master/Jenkins&#34;&gt;GitHub PoC&lt;/a&gt;&lt;br&gt;&#xA;&lt;a href=&#34;https://www.contrastsecurity.com/security-influencers/serialization-must-die-act-2-xstream&#34;&gt;技术分析&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>阈值密码学实现中的多个CVE漏洞分析</title>
      <link>https://qife122.github.io/p/%E9%98%88%E5%80%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcve%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 06 Aug 2025 15:21:08 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E9%98%88%E5%80%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%9E%E7%8E%B0%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AAcve%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;io.finnet委托我们对基于Canetti等人论文《UC Non-Interactive, Proactive, Threshold ECDSA with Identifiable Aborts》的Go语言实现tss-lib进行代码审计。审计发现的高危漏洞已分配CVE编号：CVE-2022-47930、CVE-2022-47931、CVE-2023-26556和CVE-2023-26557。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node.js V8引擎HashDoS漏洞技术分析报告</title>
      <link>https://qife122.github.io/p/node.js-v8%E5%BC%95%E6%93%8Ehashdos%E6%BC%8F%E6%B4%9E%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</link>
      <pubDate>Tue, 05 Aug 2025 17:47:00 +0800</pubDate>
      <guid>https://qife122.github.io/p/node.js-v8%E5%BC%95%E6%93%8Ehashdos%E6%BC%8F%E6%B4%9E%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90%E6%8A%A5%E5%91%8A/</guid>
      <description>&lt;h1 id=&#34;nodejs--报告-3131758---v8引擎中的hashdos漏洞--hackerone&#34;&gt;Node.js | 报告 #3131758 - V8引擎中的HashDoS漏洞 | HackerOne&lt;/h1&gt;&#xA;&lt;p&gt;Node.js v24.0.0使用的V8引擎版本变更了通过rapidhash计算字符串哈希的方式。该实现重新引入了HashDoS漏洞 - 攻击者通过控制待哈希字符串可生成大量哈希碰撞，且无需知晓哈希种子(hash-seed)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>tvOS 18.6 安全更新：漏洞修复与技术细节</title>
      <link>https://qife122.github.io/p/tvos-18.6-%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E4%B8%8E%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</link>
      <pubDate>Tue, 05 Aug 2025 04:26:52 +0800</pubDate>
      <guid>https://qife122.github.io/p/tvos-18.6-%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E6%BC%8F%E6%B4%9E%E4%BF%AE%E5%A4%8D%E4%B8%8E%E6%8A%80%E6%9C%AF%E7%BB%86%E8%8A%82/</guid>
      <description>&lt;h1 id=&#34;apple-sa-07-29-2025-7-tvos-186&#34;&gt;APPLE-SA-07-29-2025-7 tvOS 18.6&lt;/h1&gt;&#xA;&lt;p&gt;tvOS 18.6 解决了以下问题。安全内容的信息也可在 &lt;a href=&#34;https://support.apple.com/124153&#34;&gt;https://support.apple.com/124153&lt;/a&gt; 查看。&lt;/p&gt;&#xA;&lt;p&gt;Apple 在 &lt;a href=&#34;https://support.apple.com/100100&#34;&gt;https://support.apple.com/100100&lt;/a&gt; 维护了一个安全发布页面，列出了最近带有安全公告的软件更新。&lt;/p&gt;&#xA;&lt;h2 id=&#34;漏洞修复详情&#34;&gt;漏洞修复详情&lt;/h2&gt;&#xA;&lt;h3 id=&#34;afclip&#34;&gt;afclip&lt;/h3&gt;&#xA;&lt;p&gt;&lt;strong&gt;适用设备&lt;/strong&gt;：Apple TV HD 和 Apple TV 4K（所有型号）&lt;br&gt;&#xA;&lt;strong&gt;影响&lt;/strong&gt;：解析文件可能导致应用意外终止&lt;br&gt;&#xA;&lt;strong&gt;描述&lt;/strong&gt;：通过改进内存处理解决了该问题。&lt;br&gt;&#xA;&lt;strong&gt;CVE-2025-43186&lt;/strong&gt;：Trend Micro Zero Day Initiative 的 Hossein Lotfi (@hosselot)&lt;/p&gt;</description>
    </item>
    <item>
      <title>攻击Active Directory组托管服务账户(GMSA)的技术解析</title>
      <link>https://qife122.github.io/p/%E6%94%BB%E5%87%BBactive-directory%E7%BB%84%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E8%B4%A6%E6%88%B7gmsa%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 04 Aug 2025 12:12:29 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E6%94%BB%E5%87%BBactive-directory%E7%BB%84%E6%89%98%E7%AE%A1%E6%9C%8D%E5%8A%A1%E8%B4%A6%E6%88%B7gmsa%E7%9A%84%E6%8A%80%E6%9C%AF%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;攻击active-directory组托管服务账户gmsa&#34;&gt;攻击Active Directory组托管服务账户(GMSA)&lt;/h1&gt;&#xA;&lt;p&gt;2020年5月，我在Trimarc网络研讨会&amp;quot;保护Active Directory：解决常见问题&amp;quot;中介绍了AD组托管服务账户(GMSA)的安全问题。本文是研讨会内容的扩展版本。&lt;/p&gt;</description>
    </item>
    <item>
      <title>YOLO哈希构造的致命缺陷：密码学安全实践指南</title>
      <link>https://qife122.github.io/p/yolo%E5%93%88%E5%B8%8C%E6%9E%84%E9%80%A0%E7%9A%84%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</link>
      <pubDate>Sun, 03 Aug 2025 16:06:32 +0800</pubDate>
      <guid>https://qife122.github.io/p/yolo%E5%93%88%E5%B8%8C%E6%9E%84%E9%80%A0%E7%9A%84%E8%87%B4%E5%91%BD%E7%BC%BA%E9%99%B7%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AE%89%E5%85%A8%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;h2 id=&#34;yolomultihash&#34;&gt;YoloMultiHash&lt;/h2&gt;&#xA;&lt;p&gt;在Trail of Bits的审计工作中，YoloMultiHash是最常见的危险构造。当客户需要处理复杂数据结构或值数组时，常误用这种构造来实现Fiat-Shamir转录。&lt;/p&gt;</description>
    </item>
    <item>
      <title>通过MS13-063缓解LdrHotPatchRoutine DEP/ASLR绕过技术</title>
      <link>https://qife122.github.io/p/%E9%80%9A%E8%BF%87ms13-063%E7%BC%93%E8%A7%A3ldrhotpatchroutine-dep/aslr%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Sun, 03 Aug 2025 12:56:29 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E9%80%9A%E8%BF%87ms13-063%E7%BC%93%E8%A7%A3ldrhotpatchroutine-dep/aslr%E7%BB%95%E8%BF%87%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h1 id=&#34;通过ms13-063缓解ldrhotpatchroutine-depaslr绕过技术&#34;&gt;通过MS13-063缓解LdrHotPatchRoutine DEP/ASLR绕过技术&lt;/h1&gt;&#xA;&lt;p&gt;今天，我们发布了MS13-063安全更新，其中包含一项深度防御变更，用于解决可能被用来绕过两个重要平台防护措施的技术：地址空间布局随机化（ASLR）和数据执行保护（DEP）。正如我们过去所述，这些防护措施在增加攻击者利用漏洞的难度和成本方面发挥着重要作用。MS13-063所解决的绕过技术是由NSFocus安全实验室的Yang Yu在今年早些时候的CanSecWest安全会议上描述的。该绕过技术也被其他研究人员独立发现，并被VUPEN用于他们在Pwn2Own 2013比赛中的一个漏洞利用中。几个月前，我们发布了EMET 4.0，其中包含针对这一特定绕过技术的防护措施。在这篇博客文章中，我们希望提供一些关于该绕过技术如何工作以及MS13-063如何解决它的背景信息。&lt;/p&gt;</description>
    </item>
    <item>
      <title>V8引擎中的HashDoS漏洞分析 - Node.js v24.0.0安全风险警示</title>
      <link>https://qife122.github.io/p/v8%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84hashdos%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-node.js-v24.0.0%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AD%A6%E7%A4%BA/</link>
      <pubDate>Sun, 03 Aug 2025 09:45:12 +0800</pubDate>
      <guid>https://qife122.github.io/p/v8%E5%BC%95%E6%93%8E%E4%B8%AD%E7%9A%84hashdos%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90-node.js-v24.0.0%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AD%A6%E7%A4%BA/</guid>
      <description>&lt;h1 id=&#34;nodejs--报告-3131758---v8引擎中的hashdos漏洞--hackerone&#34;&gt;Node.js | 报告 #3131758 - V8引擎中的HashDoS漏洞 | HackerOne&lt;/h1&gt;&#xA;&lt;h2 id=&#34;漏洞概要&#34;&gt;漏洞概要&lt;/h2&gt;&#xA;&lt;p&gt;Node.js v24.0.0使用的V8引擎版本修改了通过rapidhash计算字符串哈希的方式。该实现重新引入了HashDoS漏洞——攻击者通过控制待哈希字符串可制造大量哈希碰撞，甚至无需知晓hash-seed即可实现碰撞攻击。&lt;/p&gt;</description>
    </item>
    <item>
      <title>苹果技术上有能力配合FBI解锁iPhone 5C——深入解析iOS安全机制</title>
      <link>https://qife122.github.io/p/%E8%8B%B9%E6%9E%9C%E6%8A%80%E6%9C%AF%E4%B8%8A%E6%9C%89%E8%83%BD%E5%8A%9B%E9%85%8D%E5%90%88fbi%E8%A7%A3%E9%94%81iphone-5c%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90ios%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</link>
      <pubDate>Sun, 03 Aug 2025 07:49:35 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E8%8B%B9%E6%9E%9C%E6%8A%80%E6%9C%AF%E4%B8%8A%E6%9C%89%E8%83%BD%E5%8A%9B%E9%85%8D%E5%90%88fbi%E8%A7%A3%E9%94%81iphone-5c%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90ios%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;fbi的技术要求&#34;&gt;FBI的技术要求&lt;/h1&gt;&#xA;&lt;p&gt;在枪击案调查中，FBI发现一部属于袭击者的iPhone 5C。该设备属于圣贝纳迪诺县公共卫生部（袭击者工作单位），FBI已获得搜查许可。但由于iOS设备的加密机制，FBI无法通过猜测密码解锁设备。在iOS设备中，几乎所有重要文件都采用设备密码和出厂时嵌入的硬件密钥组合加密。&lt;/p&gt;</description>
    </item>
    <item>
      <title>踩到DeFi乐高积木：yVault漏洞分析与修复</title>
      <link>https://qife122.github.io/p/%E8%B8%A9%E5%88%B0defi%E4%B9%90%E9%AB%98%E7%A7%AF%E6%9C%A8yvault%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Sun, 03 Aug 2025 07:27:45 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E8%B8%A9%E5%88%B0defi%E4%B9%90%E9%AB%98%E7%A7%AF%E6%9C%A8yvault%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E4%B8%8E%E4%BF%AE%E5%A4%8D/</guid>
      <description>&lt;h1 id=&#34;意外踩到defi乐高积木---trail-of-bits博客&#34;&gt;意外踩到DeFi乐高积木 - Trail of Bits博客&lt;/h1&gt;&#xA;&lt;p&gt;yVault的初始版本包含了一个可被攻击者操纵的yUSDC价格计算逻辑，可能导致资金池资产被耗尽。幸运的是，开发者Andre反应迅速，禁用了问题代码，保住了当时约40万美元的资金。这个漏洞凸显了DeFi领域因组合性带来的复杂性风险。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Discord桌面应用远程代码执行漏洞分析</title>
      <link>https://qife122.github.io/p/discord%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</link>
      <pubDate>Sun, 03 Aug 2025 03:25:44 +0800</pubDate>
      <guid>https://qife122.github.io/p/discord%E6%A1%8C%E9%9D%A2%E5%BA%94%E7%94%A8%E8%BF%9C%E7%A8%8B%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;discord桌面应用rce漏洞分析&#34;&gt;Discord桌面应用RCE漏洞分析&lt;/h1&gt;&#xA;&lt;p&gt;几个月前，我在Discord桌面应用中发现了一个远程代码执行漏洞，并通过其漏洞赏金计划进行了报告。这个RCE漏洞的有趣之处在于它需要组合多个漏洞才能实现。本文将分享详细的技术细节。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PGP签名与Linux包管理的安全隐患解析</title>
      <link>https://qife122.github.io/p/pgp%E7%AD%BE%E5%90%8D%E4%B8%8Elinux%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%89%E5%85%A8%E9%9A%90%E6%82%A3%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sun, 03 Aug 2025 02:07:44 +0800</pubDate>
      <guid>https://qife122.github.io/p/pgp%E7%AD%BE%E5%90%8D%E4%B8%8Elinux%E5%8C%85%E7%AE%A1%E7%90%86%E7%9A%84%E5%AE%89%E5%85%A8%E9%9A%90%E6%82%A3%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h3 id=&#34;pgp签名与linux包管理的安全隐患&#34;&gt;PGP签名与Linux包管理的安全隐患&lt;/h3&gt;&#xA;&lt;p&gt;在关于PGP生态系统的讨论中，我经常听到一种观点：尽管PGP存在问题，但它对Linux发行版的软件包签名至关重要。本文将重点讨论PGP在Linux包管理环境中暴露的几个系统性安全问题。&lt;/p&gt;</description>
    </item>
    <item>
      <title>错误但快速的云基础设施配置方式 - 安全风险警示</title>
      <link>https://qife122.github.io/p/%E9%94%99%E8%AF%AF%E4%BD%86%E5%BF%AB%E9%80%9F%E7%9A%84%E4%BA%91%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F-%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AD%A6%E7%A4%BA/</link>
      <pubDate>Sat, 02 Aug 2025 05:27:39 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E9%94%99%E8%AF%AF%E4%BD%86%E5%BF%AB%E9%80%9F%E7%9A%84%E4%BA%91%E5%9F%BA%E7%A1%80%E8%AE%BE%E6%96%BD%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F-%E5%AE%89%E5%85%A8%E9%A3%8E%E9%99%A9%E8%AD%A6%E7%A4%BA/</guid>
      <description>&lt;p&gt;今天我们将以&amp;quot;Max Power&amp;quot;方式配置云基础设施：将自动化与未经检查的AI输出相结合。不幸的是，这种方法产生的云基础设施代码虽然能用，但具有可怕的安全特性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure Storage SDK客户端加密填充Oracle漏洞缓解方案</title>
      <link>https://qife122.github.io/p/azure-storage-sdk%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%A1%AB%E5%85%85oracle%E6%BC%8F%E6%B4%9E%E7%BC%93%E8%A7%A3%E6%96%B9%E6%A1%88/</link>
      <pubDate>Sat, 02 Aug 2025 04:16:37 +0800</pubDate>
      <guid>https://qife122.github.io/p/azure-storage-sdk%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%8A%A0%E5%AF%86%E5%A1%AB%E5%85%85oracle%E6%BC%8F%E6%B4%9E%E7%BC%93%E8%A7%A3%E6%96%B9%E6%A1%88/</guid>
      <description>&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;&#xA;&lt;p&gt;谷歌根据协调漏洞披露(CVD)向微软报告了可能影响使用Azure Storage SDK(Python/.NET/Java版)客户端加密功能的填充Oracle漏洞(CVE-2022-30187)。微软已于2022年7月12日发布客户端加密功能v2正式版(GA)进行修复。目前未发现该漏洞在Azure服务中被利用的案例。&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用Flash和base标签绕过XSS Auditor的技术分析</title>
      <link>https://qife122.github.io/p/%E5%88%A9%E7%94%A8flash%E5%92%8Cbase%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87xss-auditor%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</link>
      <pubDate>Fri, 01 Aug 2025 22:26:13 +0800</pubDate>
      <guid>https://qife122.github.io/p/%E5%88%A9%E7%94%A8flash%E5%92%8Cbase%E6%A0%87%E7%AD%BE%E7%BB%95%E8%BF%87xss-auditor%E7%9A%84%E6%8A%80%E6%9C%AF%E5%88%86%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;利用flash和base标签绕过xss-auditor&#34;&gt;利用Flash和base标签绕过XSS Auditor&lt;/h1&gt;&#xA;&lt;p&gt;几天前，我正在和Mario一起研究如何绕过Chrome的XSS Auditor。Mario发现了这个绕过方法：&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://t.co/c9UcjpDZZM&#34;&gt;XSS Auditor Bypasses 05.2016&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;我也发现了另一个绕过方法。在这篇文章中，我想分享我的攻击向量。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go语言解析器中的意外安全陷阱</title>
      <link>https://qife122.github.io/p/go%E8%AF%AD%E8%A8%80%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E7%9A%84%E6%84%8F%E5%A4%96%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/</link>
      <pubDate>Fri, 01 Aug 2025 22:04:53 +0800</pubDate>
      <guid>https://qife122.github.io/p/go%E8%AF%AD%E8%A8%80%E8%A7%A3%E6%9E%90%E5%99%A8%E4%B8%AD%E7%9A%84%E6%84%8F%E5%A4%96%E5%AE%89%E5%85%A8%E9%99%B7%E9%98%B1/</guid>
      <description>&lt;h1 id=&#34;go语言解析器中的意外安全陷阱&#34;&gt;Go语言解析器中的意外安全陷阱&lt;/h1&gt;&#xA;&lt;p&gt;在Go应用程序中，解析不可信数据会形成危险的攻击面。通过三个真实攻击场景，我们揭示了Go标准库解析器中的安全隐患：&lt;/p&gt;&#xA;&lt;h2 id=&#34;攻击场景1意外反序列化数据&#34;&gt;攻击场景1：意外(反)序列化数据&lt;/h2&gt;&#xA;&lt;p&gt;当开发者使用&lt;code&gt;json:&amp;quot;-&amp;quot;&lt;/code&gt;标记试图阻止字段被反序列化时，错误添加的逗号后缀会导致该字段仍可通过&lt;code&gt;&amp;quot;-&amp;quot;&lt;/code&gt;键被修改：&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
